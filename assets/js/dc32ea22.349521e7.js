"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[958,4745,8367,6021,5657,8138,9494],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,k=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(k,s(s({ref:t},c),{},{components:n})):r.createElement(k,s({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4312:function(e,t,n){n.d(t,{ZP:function(){return i}});var r=n(3117),o=(n(7294),n(3905));const a={toc:[]},s="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"interview"},n.level&&(0,o.kt)("span",{className:"level"},n.level),n.children))}i.isMDXComponent=!0},9622:function(e,t,n){n.r(t),n.d(t,{assets:function(){return k},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return m},metadata:function(){return d},toc:function(){return b}});var r=n(3117),o=(n(7294),n(3905)),a=(n(4312),n(7895)),s=n(1152),i=n(8978),l=n(3325),u=n(4830),c=n(9338);const m={sidebar_position:3,id:"kubernetes-from-zero-to-hero",sidebar_label:"Kubernetes From Zero To Hero",title:"Kubernetes From Zero To Hero",tags:["Kubernetes Interviews"]},p="Kubernetes From Zero To Hero",d={unversionedId:"kubernetes/kubernetes-from-zero-to-hero",id:"kubernetes/kubernetes-from-zero-to-hero",title:"Kubernetes From Zero To Hero",description:"Kubernetes Structure",source:"@site/docs/kubernetes/1.intro.md",sourceDirName:"kubernetes",slug:"/kubernetes/kubernetes-from-zero-to-hero",permalink:"/devviews/interviews/kubernetes/kubernetes-from-zero-to-hero",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/1.intro.md",tags:[{label:"Kubernetes Interviews",permalink:"/devviews/interviews/tags/kubernetes-interviews"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"kubernetes-from-zero-to-hero",sidebar_label:"Kubernetes From Zero To Hero",title:"Kubernetes From Zero To Hero",tags:["Kubernetes Interviews"]},sidebar:"kubernetesInterviewSidebar",previous:{title:"Kubernetes Workload Resources",permalink:"/devviews/interviews/kubernetes/hero/workload-resources"}},k={},b=[{value:"Kubernetes Structure",id:"kubernetes-structure",level:3},{value:"Kubernetes Common Commands",id:"kubernetes-common-commands",level:3},{value:"Kubernetes Manifest",id:"kubernetes-manifest",level:3},{value:"Kubernetes Resources",id:"kubernetes-resources",level:3},{value:"Kubernetes Workload Resources",id:"kubernetes-workload-resources",level:3},{value:"Kubernetes Ingress Models",id:"kubernetes-ingress-models",level:3}],h={toc:b},g="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kubernetes-from-zero-to-hero"},"Kubernetes From Zero To Hero"),(0,o.kt)("h3",{id:"kubernetes-structure"},"Kubernetes Structure"),(0,o.kt)(a.default,{mdxType:"Architecture"}),(0,o.kt)("h3",{id:"kubernetes-common-commands"},"Kubernetes Common Commands"),(0,o.kt)(c.default,{mdxType:"CommonCommands"}),(0,o.kt)("h3",{id:"kubernetes-manifest"},"Kubernetes Manifest"),(0,o.kt)(u.default,{mdxType:"Manifest"}),(0,o.kt)("h3",{id:"kubernetes-resources"},"Kubernetes Resources"),(0,o.kt)(s.default,{mdxType:"Resources"}),(0,o.kt)("h3",{id:"kubernetes-workload-resources"},"Kubernetes Workload Resources"),(0,o.kt)(i.default,{mdxType:"WorkloadResources"}),(0,o.kt)("h3",{id:"kubernetes-ingress-models"},"Kubernetes Ingress Models"),(0,o.kt)(l.default,{mdxType:"IngressModels"}))}f.isMDXComponent=!0},7895:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Kubernetes Architecture",title:"Kubernetes Architecture",tags:["Kubernetes Knowledge"]},s=void 0,i={unversionedId:"kubernetes/hero/architecture",id:"kubernetes/hero/architecture",title:"Kubernetes Architecture",description:"Architecture",source:"@site/docs/kubernetes/hero/architecture.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/architecture",permalink:"/devviews/interviews/kubernetes/hero/architecture",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/architecture.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Kubernetes Architecture",title:"Kubernetes Architecture",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",next:{title:"Common Commands",permalink:"/devviews/interviews/kubernetes/hero/common-commands"}},l={},u=[],c={toc:u},m="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Architecture")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Kubernetes Architecture",src:n(9203).Z,width:"1536",height:"972"})),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"Kubernetes cluster")," consists of two parts: the control plane and the nodes. ",(0,o.kt)("strong",{parentName:"p"},"The control plane (Master Node)")," is responsible for managing the cluster state and configuration, while the ",(0,o.kt)("strong",{parentName:"p"},"nodes (Worker Nodes)")," are the compute machines that run the containers. "),(0,o.kt)("p",null,"The main components of the control plane are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-apiserver"),": The front end of the Kubernetes API, which handles requests from internal and external clients."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-scheduler"),": The component that assigns pods to nodes based on resource requirements and cluster health."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-controller-manager"),": The component that runs various controllers that ensure the desired state of the cluster is maintained."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"etcd"),": The distributed key-value store that stores the cluster data.")),(0,o.kt)("p",null,"The main components of a node are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kubelet"),": The agent that runs on each node and communicates with the control plane. It manages the pods and containers on the node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-proxy"),": The network proxy that maintains network rules and enables communication between pods across nodes."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"container runtime"),": The software that runs and manages the containers, such as Docker or containerd.")),(0,o.kt)("p",null,":::Note"),(0,o.kt)("p",null,"For fault tolerance purposes, there can be more than one master node in the cluster. If we have more than one master node, they would be in a HA (High Availability) mode, and only one of them will be the leader, performing all the operations"),(0,o.kt)("p",null,":::")))}p.isMDXComponent=!0},9338:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Common Commands",title:"Common Commands",tags:["Kubernetes Knowledge"]},s=void 0,i={unversionedId:"kubernetes/hero/common-commands",id:"kubernetes/hero/common-commands",title:"Common Commands",description:"Common Commands in Kubernetes",source:"@site/docs/kubernetes/hero/common-commands.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/common-commands",permalink:"/devviews/interviews/kubernetes/hero/common-commands",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/common-commands.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Common Commands",title:"Common Commands",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",previous:{title:"Kubernetes Architecture",permalink:"/devviews/interviews/kubernetes/hero/architecture"},next:{title:"Kubernetes Ingress Models",permalink:"/devviews/interviews/kubernetes/hero/ingress-models"}},l={},u=[],c={toc:u},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Common Commands in Kubernetes")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," is a tool that allows you to run commands against Kubernetes clusters. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"deploy applications, inspect and manage cluster resources, and view logs")),"."),(0,o.kt)("p",null,"Some common Kubernetes commands and examples for each are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl apply"),": Apply a configuration to a resource by filename or stdin. The resource name must be specified. This command creates the resource if it does not exist yet. To use apply, always create the resource initially with either ",(0,o.kt)("inlineCode",{parentName:"li"},"kubectl apply")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"kubectl create --save-config"),". For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Create a pod using the data in pod.yaml\nkubectl apply -f ./pod.yaml\n\n# Update a pod using the data in pod.json\nkubectl apply -f ./pod.json\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl create"),": Create a resource from a file or from stdin. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Create a pod using the data in pod.json\nkubectl create -f ./pod.json\n\n# Create a service using the data passed into stdin\ncat service.yaml | kubectl create -f -\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl delete"),": Delete resources by filenames, stdin, resources and names, or by resources and label selector. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Delete a pod using the type and name specified in pod.yaml\nkubectl delete -f ./pod.yaml\n\n# Delete all pods and services with label app=nginx\nkubectl delete pods,services -l app=nginx\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl describe"),": Show details of a specific resource or group of resources. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Show details of a pod\nkubectl describe pods my-pod\n\n# Show details of all nodes\nkubectl describe nodes\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl edit"),": Edit a resource on the server. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Edit a deployment named nginx-deployment\nkubectl edit deployment/nginx-deployment\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl exec"),": Execute a command in a container. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Run ls command in a container named my-container in a pod named my-pod\nkubectl exec my-pod -c my-container -- ls /\n\n# Get an interactive shell to a container named my-container in a pod named my-pod\nkubectl exec -it my-pod -c my-container -- /bin/bash\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl get"),": Display one or many resources. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Get details of a pod named my-pod\nkubectl get pods my-pod\n\n# Get details of all pods in JSON format\nkubectl get pods -o json\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl logs"),": Print the logs for a container in a pod. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Print the logs for a container named my-container in a pod named my-pod\nkubectl logs my-pod -c my-container\n\n# Print the logs for the previous instance of a container named my-container in a pod named my-pod\nkubectl logs my-pod -c my-container --previous\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl patch"),": Update field(s) of a resource using strategic merge patch, a JSON merge patch, or a JSON patch. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Partially update a node using strategic merge patch\nkubectl patch node k8s-node-1 -p \'{"spec":{"unschedulable":true}}\'\n\n# Partially update an array element of a deployment using JSON merge patch\nkubectl patch deployment valid-deployment  --type json   -p=\'[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"new image"}]\'\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl port-forward"),": Forward one or more local ports to a pod. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Listen on port 8888 locally and forward to port 5000 in the pod named my-pod\nkubectl port-forward my-pod 8888:5000\n\n# Listen on port 8888 on all addresses locally and forward to port 5000 in the pod named my-pod\nkubectl port-forward --address 0.0.0.0 my-pod 8888:5000\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl scale"),": Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Scale up/down a deployment named nginx-deployment to 3 replicas\nkubectl scale deployment/nginx-deployment --replicas=3\n\n# Scale up/down all deployments matching app=nginx label selector to 4 replicas\nkubectl scale deployments -l app=nginx --replicas=4\n\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl rollout"),": Manage the rollout of a resource. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# View the rollout history of a deployment named nginx-deployment\nkubectl rollout history deployment/nginx-deployment\n\n# Rollback to the previous revision of a deployment named nginx-deployment\nkubectl rollout undo deployment/nginx-deployment\n\n# Pause the rollout of a deployment named nginx-deployment\nkubectl rollout pause deployment/nginx-deployment\n\n# Resume the rollout of a deployment named nginx-deployment\nkubectl rollout resume deployment/nginx-deployment\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl run"),": Run a particular image on the cluster. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Start a single instance of nginx pod\nkubectl run nginx --image=nginx\n\n# Start a pod of busybox and keep it in the foreground, don\'t restart it if it exits\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx container using a specified port and env variable\nkubectl run nginx --image=nginx --port=80 --env="DOMAIN=cluster"\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl set"),": Set specific features on objects. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Set a new image for all containers in the pods of a deployment named nginx-deployment\nkubectl set image deployment/nginx-deployment nginx=nginx:1.9.1\n\n# Update the image and resources request and limit for all containers in the pods of a deployment named nginx-deployment\nkubectl set resources deployment nginx-deployment -c=nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi\n\n# Update the label of pod foo with the value bar\nkubectl label pods foo bar=value\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl taint"),": Update the taints on one or more nodes. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Add a taint that no pod can tolerate to node node1\nkubectl taint nodes node1 key=value:NoSchedule\n\n# Remove from node node1 the taint with key key and effect NoSchedule if one exists\nkubectl taint nodes node1 key:NoSchedule-\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kubectl top"),": Display Resource (CPU/Memory/Storage) usage. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Show metrics for all nodes\nkubectl top node\n\n# Show metrics for a given pod and its containers\nkubectl top pod pod_name --containers\n"))))}p.isMDXComponent=!0},3325:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Kubernetes Ingress Models",title:"Kubernetes Ingress Models",tags:["Kubernetes Knowledge"]},s=void 0,i={unversionedId:"kubernetes/hero/ingress-models",id:"kubernetes/hero/ingress-models",title:"Kubernetes Ingress Models",description:"Kubernetes Ingress Models",source:"@site/docs/kubernetes/hero/ingress-models.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/ingress-models",permalink:"/devviews/interviews/kubernetes/hero/ingress-models",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/ingress-models.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Kubernetes Ingress Models",title:"Kubernetes Ingress Models",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",previous:{title:"Common Commands",permalink:"/devviews/interviews/kubernetes/hero/common-commands"},next:{title:"Kubernetes Manifest",permalink:"/devviews/interviews/kubernetes/hero/manifest"}},l={},u=[],c={toc:u},m="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Kubernetes Ingress Models")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Kubernetes ingress models")," are the ways to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"expose HTTP and HTTPS routes"))," from outside the cluster to services within the cluster. Ingress models depend on the ingress controller that implements the ingress resource."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"An ingress controller")," is a software component that runs in the cluster and ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"configures an external load balancer or a reverse proxy according to the ingress rules")),". There are many ingress controllers available for Kubernetes, such as nginx, traefik, kong, contour, istio, etc. Each ingress controller may have different features and configuration options."),(0,o.kt)("p",null,"Some of the common ingress models are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Single service ingress"),": This model ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"exposes a single service"))," to the outside world using an ingress resource. The ingress resource specifies a host name and a path that map to the service. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: single-service-ingress\nspec:\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: my-service\n            port:\n              number: 80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Simple fanout"),": This model exposes multiple services under the same host name using different paths. The ingress resource specifies ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"a host name and multiple paths that map to different services")),". ")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Simple fanout",src:n(7181).Z,width:"1024",height:"685"})),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: simple-fanout-ingress\nspec:\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /foo\n        pathType: Prefix\n        backend:\n          service:\n            name: foo-service\n            port:\n              number: 80\n      - path: /bar\n        pathType: Prefix\n        backend:\n          service:\n            name: bar-service\n            port:\n              number: 80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Name-based virtual hosting"),": This model exposes ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"multiple services under different host names using the same IP address")),". The ingress resource specifies multiple host names and paths that map to different services. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: name-based-virtual-hosting-ingress\nspec:\n  rules:\n  - host: foo.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: foo-service\n            port:\n              number: 80\n  - host: bar.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: bar-service\n            port:\n              number: 80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"TLS/SSL termination"),": This model enables secure communication between clients and services ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"using TLS/SSL certificates")),". The ingress resource specifies a host name, a path, and a secret that contains the TLS/SSL certificate and key. The ingress controller terminates the TLS/SSL connection and forwards the plain HTTP request to the service. For example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-termination-ingress\nspec:\n  tls:\n  - hosts:\n    - example.com\n    secretName: tls-secret # contains tls.crt and tls.key for example.com domain \n  rules:\n  - host: example.com \n    http:\n      paths:\n      - path: /\n        pathType: Prefix \n        backend:\n          service:\n            name: my-service \n            port:\n              number: 80 \n"))))}p.isMDXComponent=!0},4830:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Kubernetes Manifest",title:"Kubernetes Manifest",tags:["Kubernetes Knowledge"]},s=void 0,i={unversionedId:"kubernetes/hero/manifest",id:"kubernetes/hero/manifest",title:"Kubernetes Manifest",description:"Kubernetes Manifest",source:"@site/docs/kubernetes/hero/manifest.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/manifest",permalink:"/devviews/interviews/kubernetes/hero/manifest",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/manifest.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Kubernetes Manifest",title:"Kubernetes Manifest",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",previous:{title:"Kubernetes Ingress Models",permalink:"/devviews/interviews/kubernetes/hero/ingress-models"},next:{title:"Kubernetes Resources",permalink:"/devviews/interviews/kubernetes/hero/resources"}},l={},u=[],c={toc:u},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Kubernetes Manifest")),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"manifest")," in Kubernetes is ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"a file that describes the desired state of a Kubernetes resource or a group of resources")),". A manifest can be written in YAML or JSON format, and it contains the fields and values that define the configuration and behavior of the resource. A manifest can be applied to the cluster using the ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply")," command, which creates or updates the resource according to the manifest. A manifest can also be used to delete a resource using the ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl delete")," command."),(0,o.kt)("p",null,"Examples of deployment manifest resource in Kubernetes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{10-19}","{10-19}":!0},"apiVersion: apps/v1\nkind: Deployment\nmetadata: # idetity info of Deployment Resource\n  name: nginx-deployment\nspec: # specification of Deployment\n  replicas: 3 # creates three replicas of nginx pods declared below\n  selector: # select pods that satify the following rules to apply Deployment\n    matchLabels:\n      app: nginx # only match pods have label `app: nginx`\n  template: # pods declaration: describe the desired state of a pod or a set of pods\n    metadata: # idetity info of Pod Resource\n      labels:\n        app: nginx # The label for the pods\n    spec: # specification of Pods\n      containers:\n      - name: nginx # The name of the container\n        image: nginx # The image of the container\n        ports:\n        - containerPort: 80 # The port that the container exposes\n"))))}p.isMDXComponent=!0},1152:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Kubernetes Resources",title:"Kubernetes Resources",tags:["Kubernetes Knowledge"]},s=void 0,i={unversionedId:"kubernetes/hero/resources",id:"kubernetes/hero/resources",title:"Kubernetes Resources",description:"Kubernetes Resources",source:"@site/docs/kubernetes/hero/resources.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/resources",permalink:"/devviews/interviews/kubernetes/hero/resources",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/resources.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Kubernetes Resources",title:"Kubernetes Resources",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",previous:{title:"Kubernetes Manifest",permalink:"/devviews/interviews/kubernetes/hero/manifest"},next:{title:"Kubernetes Workload Resources",permalink:"/devviews/interviews/kubernetes/hero/workload-resources"}},l={},u=[],c={toc:u},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Kubernetes Resources")),(0,o.kt)("p",null,"Kubernetes resource types are the kinds of objects that you can create and manage in a Kubernetes cluster. There are two main categories of resource types: workloads and services. "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Workloads")," are the resources that run your applications, such as ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"pods, deployments, replica sets, stateful sets, daemon sets, jobs, and cron jobs")),". "),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Services")," are the resources that expose your applications to the network, such as ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"services, ingresses, and network policies")),". "),(0,o.kt)("li",{parentName:"ol"},"In addition to these core resource types, there are also other resource types that support various aspects of cluster management, such as ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"config maps, secrets, persistent volumes, persistent volume claims, service accounts, roles, role bindings, cluster roles, cluster role bindings, and custom resource definitions")),".")),(0,o.kt)("p",null,"Each resource type has a specific structure and behavior that defines its state and functionality. You can use the Kubernetes API or the kubectl command-line tool to create, update, delete, and query these resources. You can also use configuration files to specify the desired state of your resources declaratively.")))}p.isMDXComponent=!0},8978:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Kubernetes Workload Resources",title:"Kubernetes Workload Resources",tags:["Kubernetes Knowledge"]},s=void 0,i={unversionedId:"kubernetes/hero/workload-resources",id:"kubernetes/hero/workload-resources",title:"Kubernetes Workload Resources",description:"Kubernetes Workload Resources",source:"@site/docs/kubernetes/hero/workload-resources.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/workload-resources",permalink:"/devviews/interviews/kubernetes/hero/workload-resources",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/workload-resources.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Kubernetes Workload Resources",title:"Kubernetes Workload Resources",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",previous:{title:"Kubernetes Resources",permalink:"/devviews/interviews/kubernetes/hero/resources"},next:{title:"Kubernetes From Zero To Hero",permalink:"/devviews/interviews/kubernetes/kubernetes-from-zero-to-hero"}},l={},u=[],c={toc:u},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Kubernetes Workload Resources")),(0,o.kt)("p",null,"Here is a brief explanation of each resource type you asked for, along with some examples:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Pods"),": Pods are the smallest and simplest unit of computing in Kubernetes. A pod ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"consists of one or more containers that share the same storage and network resources")),", and a specification for how to run the containers. A pod is usually created and managed by a higher-level resource, such as a deployment or a stateful set. An example of a pod configuration file is:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Replica sets"),": A replica set ensures that a ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"specified number of pod replicas are running at any given time")),". However, a deployment is a higher-level concept that manages replica sets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using deployments instead of directly using replica sets, unless you require custom update orchestration or don't require updates at all. An example of a replica set configuration file is:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: my-replicaset\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Deployments"),": Deployments are the recommended way to ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"manage the creation and scaling of pods")),". A deployment provides declarative updates for pods and replica sets. You describe the desired state of your pods in a deployment, and the deployment controller changes the actual state to match the desired state at a controlled rate. An example of a deployment configuration file is:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Stateful sets"),": Stateful sets are the workload API object used to ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"manage stateful applications")),". Similar but unlike a deployment, a stateful set maintains a sticky identity for each of their pods. Each pod has a persistent identifier that it maintains across any rescheduling. ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"A stateful set also provides a stable network identity and persistent storage for each pod")),". An example of a stateful set configuration file is:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-statefulset\nspec:\n  serviceName: "nginx"\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx \n  template:\n    metadata:\n      labels:\n        app: nginx \n    spec:\n      terminationGracePeriodSeconds: 10\n      containers:\n      - name: nginx\n        image: registry.k8s.io/nginx-slim:0.8 \n        ports:\n        - containerPort: 80 \n          name: web \n        volumeMounts:\n        - name: www \n          mountPath: /usr/share/nginx/html \n  volumeClaimTemplates:\n  - metadata:\n      name: www \n    spec:\n      accessModes: [ "ReadWriteOnce" ]\n      storageClassName: "my-storage-class"\n      resources:\n        requests:\n          storage: 1Gi \n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"DaemonSet"),": is a Kubernetes resource that ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"ensures that a copy of a pod runs on all or some nodes in the cluster")),". A DaemonSet is useful for",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"}," running system daemons or agents that provide services or monitoring for the nodes")),", such as log collectors, network plugins, storage drivers, etc. A DaemonSet controller ensures that as nodes are added or removed from the cluster, the pods are created or deleted accordingly.")),(0,o.kt)("p",null,"An example of a DaemonSet that runs the fluentd-elasticsearch logging agent on every node is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluentd-elasticsearch\n  namespace: kube-system\n  labels:\n    k8s-app: fluentd-logging\nspec:\n  selector:\n    matchLabels:\n      name: fluentd-elasticsearch\n  template:\n    metadata:\n      labels:\n        name: fluentd-elasticsearch\n    spec:\n      tolerations:\n      # these tolerations are to have the daemonset runnable on control plane nodes\n      # remove them if your control plane nodes should not run pods\n      - key: node-role.kubernetes.io/control-plane\n        operator: Exists\n        effect: NoSchedule\n      - key: node-role.kubernetes.io/master\n        operator: Exists\n        effect: NoSchedule\n      containers:\n      - name: fluentd-elasticsearch\n        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2\n        resources:\n          limits:\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        volumeMounts:\n        - name: varlog\n          mountPath: /var/log\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: varlog\n        hostPath:\n          path: /var/log\n")),(0,o.kt)("p",null,"You can create a DaemonSet using the kubectl apply command with the YAML file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl apply -f https://k8s.io/examples/controllers/daemonset.yaml\n"))))}p.isMDXComponent=!0},9203:function(e,t,n){t.Z=n.p+"assets/images/Kubernetes-Architecture-ebb62c1e031e4d93872eb3c903259f08.png"},7181:function(e,t,n){t.Z=n.p+"assets/images/simple-fanout-c11f1be838c847b7ae852f53cd76b33f.png"}}]);