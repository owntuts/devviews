"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8612],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(n),u=r,d=g["".concat(s,".").concat(u)]||g[u]||m[u]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5560:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=n(3117),r=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Change Detection Strategy",title:"Change Detection Strategy in Angular",slug:"/change-detection-strategy",tags:["Middle Angular Interviews"]},o=void 0,l={unversionedId:"js/angular-interviews/middle/change-detection-strategy",id:"js/angular-interviews/middle/change-detection-strategy",title:"Change Detection Strategy in Angular",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/js/angular-interviews/middle/change-detection-strategy.md",sourceDirName:"js/angular-interviews/middle",slug:"/change-detection-strategy",permalink:"/devviews/interviews/change-detection-strategy",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/js/angular-interviews/middle/change-detection-strategy.md",tags:[{label:"Middle Angular Interviews",permalink:"/devviews/interviews/tags/middle-angular-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Change Detection Strategy",title:"Change Detection Strategy in Angular",slug:"/change-detection-strategy",tags:["Middle Angular Interviews"]},sidebar:"jsInterviewSidebar",previous:{title:"Angular Form",permalink:"/devviews/interviews/template-driven-vs-reactive-forms-angular"},next:{title:"Interceptor",permalink:"/devviews/interviews/interceptor-angular"}},s={},p=[{value:"1. <code>ChangeDetectionStrategy.Default</code> (dirty checking):",id:"1-changedetectionstrategydefault-dirty-checking",level:3},{value:"Example",id:"example",level:3},{value:"<code>ChangeDetectionStrategy.OnPush</code>:",id:"changedetectionstrategyonpush",level:3}],c={toc:p},g="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(g,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat is ",(0,r.kt)("strong",{parentName:"p"},"Change Detection Strategy")," in Angular? ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeDetectionStrategy.Default")," vs ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeDetectionStrategy.OnPush"),"?")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,r.kt)("strong",{parentName:"p"},"Change detection")," means updating the DOM whenever there's something cause data changed in Angular. Such as: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"DOM events (click, hover,...)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"AJAX requests")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Timers (setTimers, setInterval)")),",...\nAngular runs the change detection by starting from the top and continuing until it reaches the bottom."),(0,r.kt)("p",null,"  ",(0,r.kt)("img",{alt:"Angular change detection",src:n(5012).Z,width:"964",height:"510"})),(0,r.kt)("p",null,"  There's two types of ",(0,r.kt)("strong",{parentName:"p"},"change detection"),":"),(0,r.kt)("h3",{id:"1-changedetectionstrategydefault-dirty-checking"},"1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ChangeDetectionStrategy.Default")," (dirty checking):"),(0,r.kt)("p",null,"  Angular has to be conservative and will checks every time something may have changed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Triggers (What will trigger the change detection in Default Strategy)"),": Angular will perform checks for each ",(0,r.kt)("strong",{parentName:"li"},"browser events"),", ",(0,r.kt)("strong",{parentName:"li"},"timers"),", ",(0,r.kt)("strong",{parentName:"li"},"XHRs")," and ",(0,r.kt)("strong",{parentName:"li"},"promises")," and ",(0,r.kt)("strong",{parentName:"li"},"the triggers of OnPush")," (see below)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Update Decision"),": Default strategy will updates the DOM based on value changes.")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{3} title="fullname.component.ts"',"{3}":!0,title:'"fullname.component.ts"'},"@Component({\n  selector: 'fullname',\n  changeDetection: ChangeDetectionStrategy.Default, // by default no need to add this line\n  template: `\n    <p>Hello {{person.firstName}} {{person.lastName}}</p>\n  `\n})\nexport class FullName {\n  @Input() person;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{17,19} title="app.component.ts"',"{17,19}":!0,title:'"app.component.ts"'},"@Component({\n  selector: 'app',\n  template: `\n    <button (click)='onChange(\"Loe\")'>Change Name<button>\n    <fullname [person]='p' />\n  `\n})\nexport class AppComponent implememnts OnInit {\n  p: any;\n  ngOnInit() {\n    this.p = {\n      firstName: 'John',\n      lastname: 'Doe'\n    }\n  }\n\n  // `onClick` will trigger the change detection.\n  onChange(newName: string) {\n    // changing value of object will update the view\n    this.p.lastname = newName;\n  }\n}\n")),(0,r.kt)("h3",{id:"changedetectionstrategyonpush"},(0,r.kt)("inlineCode",{parentName:"h3"},"ChangeDetectionStrategy.OnPush"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Triggers (What will trigger the change detection in OnPush Strategy)"),": only depend on the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"component\u2019s inputs")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"events")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"markForCheck method")),", or the use of the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"async pipe"))," in the template, to perform a change detection mechanism and update the view.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Update Decision"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"OnPush")," strategy will updates the view based on reference not value: "),(0,r.kt)("h3",{parentName:"li",id:"example-1"},"Example"),(0,r.kt)("p",{parentName:"li"},"As the example above")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," will trigger the change detection.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Changing value of object (",(0,r.kt)("inlineCode",{parentName:"p"},"this.p.lastname = newName"),") will not update the view.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"But change the object reference: ",(0,r.kt)("inlineCode",{parentName:"p"},"this.p = {/*another object*/}")," -> run change detection & update the view.")))))}m.isMDXComponent=!0},5012:function(e,t,n){t.Z=n.p+"assets/images/change-detection-a8e1016870200ea5b13f2f2e53ce5a47.png"}}]);