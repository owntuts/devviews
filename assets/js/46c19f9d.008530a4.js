"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[9668],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return v}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},w=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(n),w=i,v=c["".concat(p,".").concat(w)]||c[w]||d[w]||a;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=w;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}w.displayName="MDXCreateElement"},518:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var r=n(3117),i=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Preview Mode",title:"What Is Preview Mode In NextJS?",slug:"/what-is-preview-mode-nextjs",tags:["NextJS Interviews"]},o=void 0,s={unversionedId:"js/nextjs/basic/preview-mode",id:"js/nextjs/basic/preview-mode",title:"What Is Preview Mode In NextJS?",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/js/nextjs/basic/preview-mode.md",sourceDirName:"js/nextjs/basic",slug:"/what-is-preview-mode-nextjs",permalink:"/devviews/interviews/what-is-preview-mode-nextjs",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/js/nextjs/basic/preview-mode.md",tags:[{label:"NextJS Interviews",permalink:"/devviews/interviews/tags/next-js-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Preview Mode",title:"What Is Preview Mode In NextJS?",slug:"/what-is-preview-mode-nextjs",tags:["NextJS Interviews"]},sidebar:"jsInterviewSidebar",previous:{title:"Pre-rendering",permalink:"/devviews/interviews/pre-rendering-nextjs"},next:{title:"JIT vs AOT Node",permalink:"/devviews/interviews/static-generation-use-server-rendering"}},p={},l=[{value:"Workflow Of Preview Mode",id:"workflow-of-preview-mode",level:3}],u={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat Is ",(0,i.kt)("strong",{parentName:"p"},"Preview Mode")," In NextJS? And What will Happen if you navigate to a preview url?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,i.kt)("strong",{parentName:"p"},"Preview mode")," allows you to ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"view the draft content"))," on certain page immediately (That means NextJS will renders the editing content at request time instead of build time)."),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"draft content")," (or preview content) is the content that you're editing uncompletely, it may be saved on other database table."),(0,i.kt)("h3",{id:"workflow-of-preview-mode"},"Workflow Of Preview Mode"),(0,i.kt)("p",null,"When you navigate to the preview url like this:\n",(0,i.kt)("inlineCode",{parentName:"p"},"https://<your-site>/api/preview?secret=<token>&slug=<path>"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default function in ",(0,i.kt)("inlineCode",{parentName:"li"},"preview.js")," file (that you need to create first) in ",(0,i.kt)("inlineCode",{parentName:"li"},"pages/api")," will receive the request."),(0,i.kt)("li",{parentName:"ul"},"Calling ",(0,i.kt)("inlineCode",{parentName:"li"},"res.setPreviewData")," in the function will enable preview mode (NextJS will set these cookies ",(0,i.kt)("inlineCode",{parentName:"li"},"__prerender_bypass")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"__next_preview_data")," in brower)."),(0,i.kt)("li",{parentName:"ul"},"And ",(0,i.kt)("inlineCode",{parentName:"li"},"res.writeHead")," will redirect to the regular API - the API page that you want to fetch the preview content.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/api/preview.js"',title:'"pages/api/preview.js"'},"export default async (req, res) => {\n  // Fetch data based on url query to check if `slug` exists\n  // const post = await getPreviewPost ...\n  // ...\n  \n  // Enable Preview Mode by setting the cookies\n  res.setPreviewData({\n    post: {\n      id: post.databaseId,\n      slug: post.slug,\n      status: post.status,\n    },\n  });\n\n  // Redirect to the path from the fetched post\n  res.writeHead(307, { Location: `/posts/${post.slug || post.databaseId}` })\n  res.end()\n}\n")),(0,i.kt)("p",null,"In the regular API page, when ",(0,i.kt)("inlineCode",{parentName:"p"},"getStaticProps")," runs, NextJS will check browser cookies to know whether preview mode is turned on, if yes, it sets ",(0,i.kt)("inlineCode",{parentName:"p"},"preview = true")," in the context param of ",(0,i.kt)("inlineCode",{parentName:"p"},"getStaticProps"),". You will fetch preview content based on that."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/posts/[slug].js"',title:'"pages/posts/[slug].js"'},"export default function Post({ post, posts, preview }) {\n  if (preview) {\n    // render preview content\n  } else {\n    // render regular content\n  }\n}\n\nexport async function getStaticProps({ params, preview = false, previewData }) {\n  // get preview/draft data\n  const data = await getPostAndMorePosts(params.slug, preview, previewData)\n\n  // pass data to Post above\n  return {\n    props: {\n      preview,\n      post: data.post,\n      posts: data.posts,\n    },\n  }\n}\n"))))}d.isMDXComponent=!0}}]);