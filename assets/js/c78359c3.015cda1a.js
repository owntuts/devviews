"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[9655],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,k=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9153:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"docker-compose",title:"docker-compose",tags:["Docker Knowledge"]},i=void 0,s={unversionedId:"docker/hero/docker-compose",id:"docker/hero/docker-compose",title:"docker-compose",description:"docker-compose declaration",source:"@site/docs/docker/hero/docker-compose.md",sourceDirName:"docker/hero",slug:"/docker/hero/docker-compose",permalink:"/devviews/interviews/docker/hero/docker-compose",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/docker-compose.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"docker-compose",title:"docker-compose",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"container vs virtual machine",permalink:"/devviews/interviews/docker/hero/container-vs-virtual-machine"},next:{title:"Dockerfile-commands",permalink:"/devviews/interviews/docker/hero/dockerfile-commands"}},l={},c=[],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"docker-compose declaration")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Compose file version"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"version"),": Specifies the version of the Compose file syntax being used. It determines which Compose features are available to the file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.9"\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Services"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"services"),": Defines the services that make up your application. Each service is a container that runs the image defined by the build or image field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    build: .\n    ports:\n      - "5000:5000"\n  redis:\n    image: "redis:alpine"\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Service Configuration"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"build"),": Specifies the path to the Dockerfile for building a Docker image."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"image"),": Specifies the name of an existing image to use instead of building an image from a Dockerfile."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container_name"),": Specifies a custom name for the container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"command"),": Overrides the default command specified by the image."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"environment"),": Defines environment variables to set inside the container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ports"),": Exposes a port or a range of ports on the host."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"volumes"),": Mounts a directory or file from the host inside the container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"networks"),": Connects the service to a pre-existing network."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"depends_on"),": Specifies the dependent services in the order they should be started.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    build: .\n    container_name: my_container\n    command: python app.py\n    environment:\n      - ENV_VAR=value\n    ports:\n      - "5000:5000"\n    volumes:\n      - .:/code\n    networks:\n      - my_network\n    depends_on:\n      - db\n  db:\n    image: postgres\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Networks"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"networks"),": Defines the networks to be created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"networks:\n  my_network:\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Network Configuration"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"driver"),": Specifies the network driver to use."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ipam"),": Configures the IP Address Management driver for the network."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"subnet"),": Specifies the subnet for the network."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"gateway"),": Specifies the gateway for the network.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"networks:\n  my_network:\n    driver: bridge # A bridge network is the default network driver for Docker, and it allows your containers to communicate with each other and with the host machin\n    ipam:\n      driver: default #  The default IPAM driver assigns IP addresses to your containers automatically from a predefined pool\n      config:\n        - subnet: 172.28.0.0/16\n          gateway: 172.28.5.254\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Volumes"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"volumes"),": Defines the volumes to be created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"volumes:\n  my_volume:\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Volume Configuration"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"driver"),": Specifies the volume driver to use. (Volumes can also use different drivers and options to store data on remote hosts, cloud providers, or encrypt the contents of volumes.)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"driver_opts"),": Specifies the options for the volume driver."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"external"),": Specifies whether the volume should be created on the host or in a plugin managed volume."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name"),": Specifies the name of an existing volume to use.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'volumes:\n  my_volume:\n    driver: local # The local driver stores volumes on the host machine where the containers run\n    driver_opts:\n      type: "nfs4" # the type of the volume, which is nfs4. This means that your volume will use the NFSv4 protocol to access a shared file system on a remote server\n      o: "addr=192.168.1.100,nfsvers=4,rw" #  your volume will connect to the server with IP address 192.168.1.100, use NFS version 4, and mount the volume as read-write\n      device: ":/myshare" # your volume will access the directory /myshare on the remote server\n    external: true # volume is external, which means that it has been created outside of Compose using docker volume create or another tool\n')),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Secrets"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"secrets"),": Defines the secrets to be created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n  app:\n    image: example-app:latest\n    secrets: # specify the secrets that the app service should receive\n      - db_password # mount the db_password secret below to /run/secrets/db_password\n      - source: api_key # use the api_key secret blow as the source\n        target: app_api_key # mount the api_key secret to /run/secrets/app_api_key\n\nsecrets: # define the secrets that are used in the services\n  db_password: # name of the secret\n    file: ./db_password.txt # file path where the secret value is stored on the host machine\n  api_key: # name of the secret\n    external: true # indicate that the secret is created outside of Compose using docker secret create or another tool\n")),(0,o.kt)("ol",{start:9},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Configurations"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"configs"),": Defines the configurations to be created."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"file"),": Specifies the path to the file to use as the configuration.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    image: nginx\n    ports:\n      - "80:80"\n    configs: # specify the configs that the web service should receive\n      - source: nginx_config # use the nginx_config config as the source\n        target: /etc/nginx/nginx.conf # mount the config to /etc/nginx/nginx.conf within the container\n\n  app:\n    image: node\n    configs: # specify the configs that the app service should receive\n      - source: app_config # use the app_config config as the source\n        target: /app/config.json # mount the config to /app/config.json within the container\n\nconfigs:\n  nginx_config: # name of the config\n    file: ./nginx.conf # file path where the config value is stored on the host machine\n  app_config: # name of the config\n    external: true # indicate that the config is already created outside of Compose using `docker config create` or another tool\n')),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"services_order"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"services_order"),": Specifies the order in which services should be started.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"services_order: [web, db]\n"))))}u.isMDXComponent=!0}}]);