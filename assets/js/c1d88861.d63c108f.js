"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[1049],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=o(a),u=i,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return a?n.createElement(h,l(l({ref:t},m),{},{components:a})):n.createElement(h,l({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3404:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return m},default:function(){return c}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),l=["components"],p={sidebar_position:3,sidebar_label:"Heap",title:"Heap Data Structure",slug:"/heap-data-structure",tags:["Tree Data Structures"]},s=void 0,o={unversionedId:"data-structures/tree/heap",id:"data-structures/tree/heap",title:"Heap Data Structure",description:"First Views of A Heap",source:"@site/tutorials/data-structures/tree/heap.md",sourceDirName:"data-structures/tree",slug:"/heap-data-structure",permalink:"/devviews/tutorials/heap-data-structure",tags:[{label:"Tree Data Structures",permalink:"/devviews/tutorials/tags/tree-data-structures"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Heap",title:"Heap Data Structure",slug:"/heap-data-structure",tags:["Tree Data Structures"]},sidebar:"dataStructureSidebar",next:{title:"Trie",permalink:"/devviews/tutorials/trie-data-structure"}},m=[{value:"First Views of A Heap",id:"first-views-of-a-heap",children:[],level:3},{value:"What Is A Heap?",id:"what-is-a-heap",children:[],level:3},{value:"How To Build A Heap?",id:"how-to-build-a-heap",children:[],level:3},{value:"Heapify Algorithm Explanation",id:"heapify-algorithm-explanation",children:[],level:3},{value:"Heapify Implementation Note",id:"heapify-implementation-note",children:[],level:3},{value:"Heapify Implementation",id:"heapify-implementation",children:[{value:"Max Heap Tree Building",id:"max-heap-tree-building",children:[],level:4},{value:"Max Heapify",id:"max-heapify",children:[],level:4}],level:3}],d={toc:m};function c(e){var t=e.components,p=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,p,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"first-views-of-a-heap"},"First Views of A Heap"),(0,r.kt)("p",null,"The following is a heap of stones. The rocks underneath is bigger than the rock on top. This is a case of min-heap."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Heap data structure demo",src:a(1968).Z})," "),(0,r.kt)("h3",{id:"what-is-a-heap"},"What Is A Heap?"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Definition")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Max Heap data structure"),": is a complete binary tree in which any given node is always ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"greater"))," than its child nodes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Min Heap data structure"),": is a complete binary tree in which any given node is always ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"smaller"))," than its child nodes.")))),(0,r.kt)("h3",{id:"how-to-build-a-heap"},"How To Build A Heap?"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Problem")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Given an array: ",(0,r.kt)("inlineCode",{parentName:"p"},"A = [3, 9, 2, 1, 4, 5]"),", How to build a ",(0,r.kt)("strong",{parentName:"p"},"max-heap")," from that array?"))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Solution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("img",{alt:"heap array demo",src:a(1148).Z})),(0,r.kt)("p",{parentName:"div"},"First, View the array as a tree in which if a node is ",(0,r.kt)("inlineCode",{parentName:"p"},"A[i]")," then it's children will be ",(0,r.kt)("inlineCode",{parentName:"p"},"A[2*i + 1]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"A[2i + 2]"),"."),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("img",{alt:"heap tree demo",src:a(5500).Z})),(0,r.kt)("p",{parentName:"div"},"Then, Heapify the above tree. Heapify is a proccess of bringing smaller/larger items upwards (see below)."))),(0,r.kt)("h3",{id:"heapify-algorithm-explanation"},"Heapify Algorithm Explanation"),(0,r.kt)("p",null,"Let's call:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"i")," is the Phase, runs from ",(0,r.kt)("inlineCode",{parentName:"li"},"n/2 - 1")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"heapify")," is the Heapify function.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"First Phase"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"i")," starts at ",(0,r.kt)("inlineCode",{parentName:"li"},"2 = n/2 - 1"),".\n",(0,r.kt)("img",{alt:"Heapify array demo phase 1",src:a(8874).Z})),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"heapify")," does:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"marks ",(0,r.kt)("inlineCode",{parentName:"li"},"A[i]")," as largest elelment, "),(0,r.kt)("li",{parentName:"ul"},"looks at children of ",(0,r.kt)("inlineCode",{parentName:"li"},"A[i]"),", if they're larger than ",(0,r.kt)("inlineCode",{parentName:"li"},"A[i]"),", it will re-mark the new largest and  swap ",(0,r.kt)("inlineCode",{parentName:"li"},"A[i]")," with the new largest value."),(0,r.kt)("li",{parentName:"ul"},"Then does the same thing (recursively) to the new marked position.")))),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Heapify demo phase 1",src:a(3564).Z}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Second Phase"),": Similar to First phase but ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," at ",(0,r.kt)("inlineCode",{parentName:"p"},"1")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Heapify array demo phase 2",src:a(256).Z})),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Heapify demo phase 1",src:a(237).Z}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Final Phase"),": Similar to First phase but ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," at ",(0,r.kt)("inlineCode",{parentName:"p"},"0")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Heapify array demo phase 3",src:a(5777).Z})),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Heapify demo phase 1",src:a(9950).Z})))),(0,r.kt)("h3",{id:"heapify-implementation-note"},"Heapify Implementation Note"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The phase ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," (runs from ",(0,r.kt)("inlineCode",{parentName:"li"},"n/2 - 1")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"): ",(0,r.kt)("inlineCode",{parentName:"li"},"for (int i = n/2 - 1; i >= 0; i--)")),(0,r.kt)("li",{parentName:"ul"},"Heapify start from node ",(0,r.kt)("inlineCode",{parentName:"li"},"i"),", comes down and do heapify again => so it's call itself (recursive function).")),(0,r.kt)("h3",{id:"heapify-implementation"},"Heapify Implementation"),(0,r.kt)("h4",{id:"max-heap-tree-building"},"Max Heap Tree Building"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void build_maxheap (vector<int> &A)\n  {\n    int n = A.size();\n    for(int i = n/2 - 1 ; i >= 0 ; i--)\n    {\n      max_heapify (A, i) ;\n    }\n  }\n")),(0,r.kt)("h4",{id:"max-heapify"},"Max Heapify"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void max_heapify(vector<int> &hT, int i)\n{\n  int n = hT.size();\n  int largest = i; // mark i as largest\n  int l = 2 * i + 1;\n  int r = 2 * i + 2;\n  // review the children & re-mark largest if needed\n  if (l < n && hT[l] > hT[largest])\n    largest = l;\n  if (r < n && hT[r] > hT[largest])\n    largest = r;\n\n  if (largest != i)\n  {\n    swap(&hT[i], &hT[largest]);\n    // do heapify recursively on new marked position\n    heapify(hT, largest); \n  }\n}\n\nvoid swap(int *a, int *b)\n{\n  int temp = *b;\n  *b = *a;\n  *a = temp;\n}\n")))}c.isMDXComponent=!0},1148:function(e,t,a){t.Z=a.p+"assets/images/heap-array-demo-f93c3f4a7813da30e935eb0619c71731.svg"},1968:function(e,t,a){t.Z=a.p+"assets/images/heap-demo-c82708a44c5ab69c25d64afdcaf55a64.svg"},5500:function(e,t,a){t.Z=a.p+"assets/images/heap-tree-e0269675f82a998af19ed960504c1bd8.svg"},8874:function(e,t,a){t.Z=a.p+"assets/images/heapify-array-phase-1-e712396ebdee91a2e23c8365262315a3.svg"},256:function(e,t,a){t.Z=a.p+"assets/images/heapify-array-phase-2-e745c04c9352f0438d73ee411541df67.svg"},5777:function(e,t,a){t.Z=a.p+"assets/images/heapify-array-phase-3-845f8d0b2828800f7570c30e38224806.svg"},3564:function(e,t,a){t.Z=a.p+"assets/images/heapify-phase-1-39c444ee64f07c9f0679ecde09aa8c43.svg"},237:function(e,t,a){t.Z=a.p+"assets/images/heapify-phase-2-09fde91bf58642ba9619605bb0e9a3db.svg"},9950:function(e,t,a){t.Z=a.p+"assets/images/heapify-phase-3-700ff99da103e297a0320f7a6e4235fe.svg"}}]);