"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[3082],{3905:function(e,o,t){t.d(o,{Zo:function(){return p},kt:function(){return f}});var n=t(7294);function s(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function r(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?r(Object(t),!0).forEach((function(o){s(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function c(e,o){if(null==e)return{};var t,n,s=function(e,o){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],o.indexOf(t)>=0||(s[t]=e[t]);return s}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=n.createContext({}),m=function(e){var o=n.useContext(i),t=o;return e&&(t="function"==typeof e?e(o):a(a({},o),e)),t},p=function(e){var o=m(e.components);return n.createElement(i.Provider,{value:o},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},u=n.forwardRef((function(e,o){var t=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=m(t),u=s,f=l["".concat(i,".").concat(u)]||l[u]||d[u]||r;return t?n.createElement(f,a(a({ref:o},p),{},{components:t})):n.createElement(f,a({ref:o},p))}));function f(e,o){var t=arguments,s=o&&o.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=u;var c={};for(var i in o)hasOwnProperty.call(o,i)&&(c[i]=o[i]);c.originalType=e,c[l]="string"==typeof e?e:s,a[1]=c;for(var m=2;m<r;m++)a[m]=t[m];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5773:function(e,o,t){t.r(o),t.d(o,{assets:function(){return i},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return m}});var n=t(3117),s=(t(7294),t(3905));const r={sidebar_position:1e3,sidebar_label:"Namespace and Rooms",title:"Namespace and Rooms",tags:["Socket.IO Knowledge"]},a=void 0,c={unversionedId:"socketio/hero/namespaces-rooms",id:"socketio/hero/namespaces-rooms",title:"Namespace and Rooms",description:"Namespace and Rooms",source:"@site/docs/socketio/hero/namespaces-rooms.md",sourceDirName:"socketio/hero",slug:"/socketio/hero/namespaces-rooms",permalink:"/devviews/interviews/socketio/hero/namespaces-rooms",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/socketio/hero/namespaces-rooms.md",tags:[{label:"Socket.IO Knowledge",permalink:"/devviews/interviews/tags/socket-io-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Namespace and Rooms",title:"Namespace and Rooms",tags:["Socket.IO Knowledge"]},sidebar:"socketioInterviewSidebar",previous:{title:"Socket.IO How It Works",permalink:"/devviews/interviews/socketio/hero/howitworks"},next:{title:"Socket.IO Zero To Hero",permalink:"/devviews/interviews/socketio/socketio-zero-to-hero"}},i={},m=[],p={toc:m},l="wrapper";function d(e){let{components:o,...r}=e;return(0,s.kt)(l,(0,n.Z)({},p,r,{components:o,mdxType:"MDXLayout"}),(0,s.kt)("details",{open:!0},(0,s.kt)("summary",null,(0,s.kt)("h5",null,"Namespace and Rooms")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Namespace and Rooms",src:t(8716).Z,width:"647",height:"596"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Namespaces")," are a way to split the logic of your application over a single shared connection. ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Each namespace has its own event handlers, rooms and middlewares")),". "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Rooms")," are subdivisions of namespaces that can be created by the server. This allows you to broadcast data to a subset of related sockets."),(0,s.kt)("p",null,"For example, let's say you have a chat application with different topics. You can create one namespace per topic, and then create rooms within each namespace for different subtopics or groups. Here is a possible code snippet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"//server.js\nvar io = require('socket.io')(3000);\n\n// create a namespace for sports\nvar sports = io.of('/sports');\n\n// handle connection events for sports namespace\nsports.on('connection', function(socket) {\n  console.log('a user connected to sports');\n  // join a room for soccer fans\n  socket.join('soccer');\n  // send a message to the soccer room\n  sports.to('soccer').emit('message', 'Hello soccer fans!');\n  // handle chat messages from clients\n  socket.on('chat', function(data) {\n    // broadcast the message to the same room\n    sports.to(data.room).emit('message', data.message);\n  });\n});\n\n// create a namespace for movies\nvar movies = io.of('/movies');\n\n// handle connection events for movies namespace\nmovies.on('connection', function(socket) {\n  console.log('a user connected to movies');\n  // join a room for comedy fans\n  socket.join('comedy');\n  // send a message to the comedy room\n  movies.to('comedy').emit('message', 'Hello comedy fans!');\n  // handle chat messages from clients\n  socket.on('chat', function(data) {\n    // broadcast the message to the same room\n    movies.to(data.room).emit('message', data.message);\n  });\n});\n")),(0,s.kt)("p",null,"On the client side, you need to connect to the specific namespace and room you want to join. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"//client.js\n// connect to the sports namespace\nvar sports = io('/sports');\n\n// listen for messages from the server\nsports.on('message', function(data) {\n  console.log(data);\n});\n// send a chat message to the soccer room\nsports.emit('chat', {room: 'soccer', message: 'I love soccer!'});\n\n// connect to the movies namespace\nvar movies = io('/movies');\n// listen for messages from the server\nmovies.on('message', function(data) {\n  console.log(data);\n});\n// send a chat message to the comedy room\nmovies.emit('chat', {room: 'comedy', message: 'I love comedy!'});\n"))))}d.isMDXComponent=!0},8716:function(e,o,t){o.Z=t.p+"assets/images/namespace-rooms-29fe140c1549c52e50fdfac8b015f5a1.png"}}]);