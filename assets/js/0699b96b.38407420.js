"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5417],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return v}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,v=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?r.createElement(v,l(l({ref:t},p),{},{components:n})):r.createElement(v,l({ref:t},p))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7480:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return d}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"new vs override",title:"new vs override In C# (C-Sharp)",slug:"/new-vs-override",tags:["Basic C# Interviews"]},l=void 0,o={unversionedId:"c-sharp/basic/new-vs-override",id:"c-sharp/basic/new-vs-override",title:"new vs override In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/new-vs-override.md",sourceDirName:"c-sharp/basic",slug:"/new-vs-override",permalink:"/devviews/interviews/new-vs-override",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/new-vs-override.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"new vs override",title:"new vs override In C# (C-Sharp)",slug:"/new-vs-override",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"init vs readonly",permalink:"/devviews/interviews/init-vs-readonly-c-sharp"},next:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/dynamic-type-vs-object-type-variables-c-sharp"}},s={},d=[{value:"Here&#39;s an example of using <code>new</code>:",id:"heres-an-example-of-using-new",level:4},{value:"Here&#39;s an example of using <code>override</code>:",id:"heres-an-example-of-using-override",level:4}],p={toc:d},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Question:",type:"quest"},(0,a.kt)("p",{parentName:"admonition"},"*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,a.kt)("inlineCode",{parentName:"p"},"new")," vs ",(0,a.kt)("inlineCode",{parentName:"p"},"override")," method in C#?")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"ANSWER:")),(0,a.kt)("p",null,"  ","*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"new")," are used for method hiding"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"override")," are used for method overriding,")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"th"},"new")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"th"},"override")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Method hiding"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes, the method with the same name in the base class is hidden"),(0,a.kt)("td",{parentName:"tr",align:null},"No, the method with the same name in the base class is not hidden")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Method overriding"),(0,a.kt)("td",{parentName:"tr",align:null},"No, a new implementation of the method is created in the derived class"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes, a new implementation of the method replaces the implementation in the base class")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Signature"),(0,a.kt)("td",{parentName:"tr",align:null},"Can have a different signature from the method in the base class"),(0,a.kt)("td",{parentName:"tr",align:null},"Must have the same signature as the method in the base class")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Polymorphism"),(0,a.kt)("td",{parentName:"tr",align:null},"Method resolution depends on the object type that is used to call it"),(0,a.kt)("td",{parentName:"tr",align:null},"Method resolution is always the current implementation of the method in the derived class")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Use case"),(0,a.kt)("td",{parentName:"tr",align:null},"Used to provide a new implementation of a method that is not intended to replace the implementation in the base class"),(0,a.kt)("td",{parentName:"tr",align:null},"Used to customize the behavior of an inherited method and provide functionality that is specific to the derived class")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Syntax"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"public new returnType MethodName(parameters) { ... }")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"public override returnType MethodName(parameters) { ... }"))))),(0,a.kt)("h4",{id:"heres-an-example-of-using-new"},"Here's an example of using ",(0,a.kt)("inlineCode",{parentName:"h4"},"new"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class BaseClass\n{\n    public virtual void SayHello()\n    {\n        Console.WriteLine("Hello from BaseClass");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public new void SayHello()\n    {\n        Console.WriteLine("Hello from DerivedClass");\n    }\n}\n\n// Usage\nBaseClass obj1 = new DerivedClass();\nobj1.SayHello(); // Output: "Hello from BaseClass"\n\nDerivedClass obj2 = new DerivedClass();\nobj2.SayHello(); // Output: "Hello from DerivedClass"\n')),(0,a.kt)("h4",{id:"heres-an-example-of-using-override"},"Here's an example of using ",(0,a.kt)("inlineCode",{parentName:"h4"},"override"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class BaseClass\n{\n    public virtual void SayHello()\n    {\n        Console.WriteLine("Hello from BaseClass");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void SayHello()\n    {\n        Console.WriteLine("Hello from DerivedClass");\n    }\n}\n\n// Usage\nBaseClass obj1 = new DerivedClass();\nobj1.SayHello(); // Output: "Hello from DerivedClass"\n\nDerivedClass obj2 = new DerivedClass();\nobj2.SayHello(); // Output: "Hello from DerivedClass"\n\n'))))}m.isMDXComponent=!0}}]);