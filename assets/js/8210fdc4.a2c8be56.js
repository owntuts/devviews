"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[2666,8046,5816,6725,3805,9314,2964],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=m(n),d=a,h=p["".concat(s,".").concat(d)]||p[d]||c[d]||i;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54312:function(e,t,n){n.d(t,{ZP:function(){return o}});var r=n(83117),a=(n(67294),n(3905));const i={toc:[]},l="wrapper";function o(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"interview"},n.level&&(0,a.kt)("span",{className:"level"},n.level),n.children))}o.isMDXComponent=!0},33350:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return c},metadata:function(){return h},toc:function(){return k}});var r=n(83117),a=(n(67294),n(3905)),i=n(54312),l=n(10739),o=n(34134),s=n(81625),m=n(69418),u=n(31100),p=n(16471);const c={sidebar_position:3,id:"helm-from-zero-to-hero",sidebar_label:"Helm From Zero To Hero",title:"Helm From Zero To Hero"},d="Helm From Zero To Hero",h={unversionedId:"helm/helm-from-zero-to-hero",id:"helm/helm-from-zero-to-hero",title:"Helm From Zero To Hero",description:"Here, we discuss about Angular Interview Questions & Answers!",source:"@site/docs/helm/1.intro.md",sourceDirName:"helm",slug:"/helm/helm-from-zero-to-hero",permalink:"/devviews/interviews/helm/helm-from-zero-to-hero",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/1.intro.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"helm-from-zero-to-hero",sidebar_label:"Helm From Zero To Hero",title:"Helm From Zero To Hero"},sidebar:"helmInterviewSidebar",previous:{title:"JIT vs AOT",permalink:"/devviews/interviews/methods-vs-computed-vue1"},next:{title:"Helm Architecture",permalink:"/devviews/interviews/helm/hero/architecture"}},f={},k=[{value:"what is HELM?",id:"what-is-helm",level:3},{value:"Helm Architecture",id:"helm-architecture",level:3},{value:"Directory Structure",id:"directory-structure",level:3},{value:"Simple Helm Example",id:"simple-helm-example",level:3},{value:"Some Useful Commands",id:"some-useful-commands",level:3},{value:"Common Useful Template Expressions",id:"common-useful-template-expressions",level:3},{value:"Common Control Structure Template Expressions",id:"common-control-structure-template-expressions",level:3}],v={toc:k},g="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"helm-from-zero-to-hero"},"Helm From Zero To Hero"),(0,a.kt)("p",null,"Here, we discuss about Angular Interview Questions & Answers!"),(0,a.kt)("h2",{id:""}),(0,a.kt)(i.ZP,{mdxType:"Interview"},(0,a.kt)("h3",{id:"what-is-helm"},"what is HELM?"),(0,a.kt)("p",null,"HELM can refer to as the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"package manager for Kubernetes")),". Helm helps you manage Kubernetes applications by using Helm Charts to define, install, and upgrade even the most complex Kubernetes application. It could also refer to the handle or wheel that controls the direction in which a ship or boat travels.")),(0,a.kt)("h3",{id:"helm-architecture"},"Helm Architecture"),(0,a.kt)(s.default,{mdxType:"Architecture"}),(0,a.kt)("h3",{id:"directory-structure"},"Directory Structure"),(0,a.kt)(m.default,{mdxType:"DirectoryStructure"}),(0,a.kt)("h3",{id:"simple-helm-example"},"Simple Helm Example"),(0,a.kt)(l.default,{mdxType:"HEMLEX"}),(0,a.kt)("h3",{id:"some-useful-commands"},"Some Useful Commands"),(0,a.kt)(o.default,{mdxType:"SomeCommands"}),(0,a.kt)("h3",{id:"common-useful-template-expressions"},"Common Useful Template Expressions"),(0,a.kt)(u.default,{mdxType:"Expression"}),(0,a.kt)("h3",{id:"common-control-structure-template-expressions"},"Common Control Structure Template Expressions"),(0,a.kt)(p.default,{mdxType:"ControlStructure"}))}b.isMDXComponent=!0},81625:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Helm Architecture",title:"Helm Architecture",tags:["HELM Knowledge"]},l=void 0,o={unversionedId:"helm/hero/architecture",id:"helm/hero/architecture",title:"Helm Architecture",description:"Architecture",source:"@site/docs/helm/hero/architecture.md",sourceDirName:"helm/hero",slug:"/helm/hero/architecture",permalink:"/devviews/interviews/helm/hero/architecture",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/hero/architecture.md",tags:[{label:"HELM Knowledge",permalink:"/devviews/interviews/tags/helm-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Helm Architecture",title:"Helm Architecture",tags:["HELM Knowledge"]},sidebar:"helmInterviewSidebar",previous:{title:"Helm From Zero To Hero",permalink:"/devviews/interviews/helm/helm-from-zero-to-hero"},next:{title:"Chart Resources",permalink:"/devviews/interviews/helm/hero/chart-resources"}},s={},m=[],u={toc:m},p="wrapper";function c(e){let{components:t,...i}=e;return(0,a.kt)(p,(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Architecture")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Helm Architecture",src:n(64846).Z,width:"946",height:"535"})),(0,a.kt)("p",null,"Here's a step-by-step breakdown of the process:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A user creates source files (Templates, Values, Hooks) in YAML to define the Kubernetes resources they want to deploy."),(0,a.kt)("li",{parentName:"ol"},"Helm takes these source files and uses them to create a Chart Package."),(0,a.kt)("li",{parentName:"ol"},"The Chart Package is then pushed to a Helm Repository, and a Chart Index file is generated to provide an index of all available charts in the repository."),(0,a.kt)("li",{parentName:"ol"},"The Tiller Server interacts with the Kubernetes API to install, upgrade, or uninstall a chart from a Kubernetes cluster."),(0,a.kt)("li",{parentName:"ol"},"When the Tiller Server receives instructions to install a chart, it retrieves the Chart Package from the Helm Repository and unpacks it."),(0,a.kt)("li",{parentName:"ol"},"The Tiller Server then renders the templates in the Chart Package using the specified Values to generate the Kubernetes resources.")),(0,a.kt)("p",null,"Finally, the Tiller Server sends the Kubernetes resources to the Kubernetes API, which creates the specified resources in the Kubernetes cluster."),(0,a.kt)("p",null,"Overall, the process allows for repeatable, automated and managed deployment of Kubernetes resources using Helm architecture.")))}c.isMDXComponent=!0},69418:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Chart Resources",title:"Chart Resources",tags:["HELM Knowledge"]},l=void 0,o={unversionedId:"helm/hero/chart-resources",id:"helm/hero/chart-resources",title:"Chart Resources",description:"Directory Structure",source:"@site/docs/helm/hero/chart-resources.md",sourceDirName:"helm/hero",slug:"/helm/hero/chart-resources",permalink:"/devviews/interviews/helm/hero/chart-resources",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/hero/chart-resources.md",tags:[{label:"HELM Knowledge",permalink:"/devviews/interviews/tags/helm-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Chart Resources",title:"Chart Resources",tags:["HELM Knowledge"]},sidebar:"helmInterviewSidebar",previous:{title:"Helm Architecture",permalink:"/devviews/interviews/helm/hero/architecture"},next:{title:"Control Structure",permalink:"/devviews/interviews/helm/hero/control-structure"}},s={},m=[],u={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Directory Structure")),(0,a.kt)("p",null,"A Helm chart is a collection of files that describe a related set of Kubernetes resources. A Helm chart may have the following files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Chart.yaml: A YAML file containing information about the chart, such as name, version, description, etc. (required)"),(0,a.kt)("li",{parentName:"ul"},"values.yaml: The default configuration values for the chart (required)"),(0,a.kt)("li",{parentName:"ul"},"values.schema.json: A JSON schema for imposing a structure on the values.yaml file (optional)"),(0,a.kt)("li",{parentName:"ul"},"charts/: A directory containing any charts upon which this chart depends (optional)"),(0,a.kt)("li",{parentName:"ul"},"crds/: A directory containing custom resource definitions (CRDs) that are installed by the chart (optional)"),(0,a.kt)("li",{parentName:"ul"},"templates/: A directory of templates that, when combined with values, will generate valid Kubernetes manifest files (",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"required & important")),")"),(0,a.kt)("li",{parentName:"ul"},"templates/NOTES.txt: A plain text file containing short usage notes for the chart (optional)"),(0,a.kt)("li",{parentName:"ul"},"templates/hooks.yaml: Hooks are optional scripts allow you to perform additional tasks before or after chart installation, upgrade, or deletion. You can use them to set up databases, configure load balancers, or perform other tasks related to the chart installation. Here's an example of a pre-install hook in a chart (hooks.yaml) that logs a message before installing the chart:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="templates/hooks.yaml"',title:'"templates/hooks.yaml"'},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: "{{ .Release.Name }}-pre-install"\n  labels:\n    heritage: "{{ .Release.Service }}"\n    release: "{{ .Release.Name }}"\n    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"\n    app: "{{ .Chart.Name }}"\nspec:\n  containers:\n    - name: pre-install-logging\n      image: busybox\n      command: [\'sh\', \'-c\', \'echo "Installing {{ .Release.Name }}"\']\n      restartPolicy: Never\n\n'))))}c.isMDXComponent=!0},16471:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Control Structure",title:"Control Structure",tags:["HELM Knowledge"]},l=void 0,o={unversionedId:"helm/hero/control-structure",id:"helm/hero/control-structure",title:"Control Structure",description:"Common Control Structure in Helm template expressions",source:"@site/docs/helm/hero/control-structure.md",sourceDirName:"helm/hero",slug:"/helm/hero/control-structure",permalink:"/devviews/interviews/helm/hero/control-structure",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/hero/control-structure.md",tags:[{label:"HELM Knowledge",permalink:"/devviews/interviews/tags/helm-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Control Structure",title:"Control Structure",tags:["HELM Knowledge"]},sidebar:"helmInterviewSidebar",previous:{title:"Chart Resources",permalink:"/devviews/interviews/helm/hero/chart-resources"},next:{title:"Helm Expression",permalink:"/devviews/interviews/helm/hero/expression"}},s={},m=[],u={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Common Control Structure in Helm template expressions")),(0,a.kt)("p",null,"Some common control structures of template expressions in Helm are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ if ... }} {{ end }}"),": This structure evaluates a condition and renders the inner template if the condition is true. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ if .Values.enabled }} enabled: true {{ end }}")," renders ",(0,a.kt)("inlineCode",{parentName:"li"},"enabled: true")," if ",(0,a.kt)("inlineCode",{parentName:"li"},".Values.enabled")," is true."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ if ... }} {{ else }} {{ end }}"),": This structure evaluates a condition and renders the first inner template if the condition is true, or the second inner template if the condition is false. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ if .Values.enabled }} enabled: true {{ else }} enabled: false {{ end }}")," renders ",(0,a.kt)("inlineCode",{parentName:"li"},"enabled: true")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"enabled: false")," depending on ",(0,a.kt)("inlineCode",{parentName:"li"},".Values.enabled"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ range ... }} {{ end }}"),": This structure iterates over a list or map and renders the inner template for each element. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ range .Values.items }} - {{ . }} {{ end }}")," renders a list of items from ",(0,a.kt)("inlineCode",{parentName:"li"},".Values.items"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ with ... }} {{ end }}"),": This structure changes the scope or context for the inner template. It takes an argument and evaluates it. If the argument is not empty, it sets the dot (.) to the value of the argument and executes the inner template. Otherwise, it does nothing. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},'{{ with .Values.favorite }} color: {{ .color | default "green" }} {{ end }}')," renders ",(0,a.kt)("inlineCode",{parentName:"li"},"color: green")," if ",(0,a.kt)("inlineCode",{parentName:"li"},".Values.favorite")," is not empty and has no color field."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'{{ define "..." }} {{ end }}'),": This structure defines a named template that can be reused later. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},'{{ define "my-template" }} Hello, {{ .name }}! {{ end }}'),' defines a template named "my-template" that greets a person by name.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'{{ template "..." ... }}'),": This structure executes a named template with an optional argument. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},'{{ template "my-template" .Values.person }}'),' executes the template named "my-template" with ',(0,a.kt)("inlineCode",{parentName:"li"},".Values.person")," as the argument.")),(0,a.kt)("p",null,"You can learn more about control structures in template expressions in the Helm documentation.")))}c.isMDXComponent=!0},31100:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Helm Expression",title:"Helm Expression",tags:["HELM Knowledge"]},l=void 0,o={unversionedId:"helm/hero/expression",id:"helm/hero/expression",title:"Helm Expression",description:"Common Functions in Helm template expressions",source:"@site/docs/helm/hero/expression.md",sourceDirName:"helm/hero",slug:"/helm/hero/expression",permalink:"/devviews/interviews/helm/hero/expression",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/hero/expression.md",tags:[{label:"HELM Knowledge",permalink:"/devviews/interviews/tags/helm-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Helm Expression",title:"Helm Expression",tags:["HELM Knowledge"]},sidebar:"helmInterviewSidebar",previous:{title:"Control Structure",permalink:"/devviews/interviews/helm/hero/control-structure"},next:{title:"Helm Example",permalink:"/devviews/interviews/helm/hero/helm-example"}},s={},m=[],u={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Common Functions in Helm template expressions")),(0,a.kt)("p",null,"There are many useful commands and functions that you can use in template expressions in Helm. Here are some examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Values }}"),": This command accesses the values passed into the chart. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Values.image.tag }}")," refers to the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"image.tag")," in the ",(0,a.kt)("inlineCode",{parentName:"li"},"values.yaml")," file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Release }}"),": This command provides information about the release. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Release.Name }}")," refers to the name of the release, and ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Release.Namespace }}")," refers to the namespace of the release."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Chart }}"),": This command provides information about the chart. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Chart.Name }}")," refers to the name of the chart, and ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Chart.Version }}")," refers to the version of the chart."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Files }}"),": This command provides access to files in the chart. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},'{{ .Files.Get "config.toml" }}')," reads the file ",(0,a.kt)("inlineCode",{parentName:"li"},"config.toml")," in the chart and returns its contents as a string."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Capabilities }}"),": This command provides information about the capabilities of Kubernetes cluster. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},'{{ .Capabilities.APIVersions.Has "apps/v1" }}')," returns true if the cluster supports the API version ",(0,a.kt)("inlineCode",{parentName:"li"},"apps/v1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Template }}"),": This command provides information about the current template. For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Template.Name }}")," refers to the name of the template file, and ",(0,a.kt)("inlineCode",{parentName:"li"},"{{ .Template.BasePath }}")," refers to the base path of the template file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'{{ include "subchart1.labels" . }}'),": This function includes another template file and passes it a context. For example, this function includes the template defined in file ",(0,a.kt)("inlineCode",{parentName:"li"},"templates/_helpers.tpl")," from the subchart named ",(0,a.kt)("inlineCode",{parentName:"li"},"subchart1")," and passes it the current context (",(0,a.kt)("inlineCode",{parentName:"li"},"."),", which is a dot)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ toYaml .Values | indent 2 }}"),": This function converts a value to YAML format and indents it by 2 spaces. For example, this function converts the values in ",(0,a.kt)("inlineCode",{parentName:"li"},".Values")," to YAML and indents them by 2 spaces."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'{{ default "foo" .Values.bar }}'),": This function returns a default value if a value is empty. For example, this function returns ",(0,a.kt)("inlineCode",{parentName:"li"},'"foo"')," if ",(0,a.kt)("inlineCode",{parentName:"li"},".Values.bar")," is empty or undefined."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{{ quote .Values.name }}"),": This function wraps a value in double quotes. For example, this function returns ",(0,a.kt)("inlineCode",{parentName:"li"},'"Alice"')," if ",(0,a.kt)("inlineCode",{parentName:"li"},".Values.name")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"Alice"),".")),(0,a.kt)("p",null,"You can learn more about commands and functions in template expressions in the Helm documentation.")))}c.isMDXComponent=!0},10739:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Helm Example",title:"Helm Example",tags:["HELM Knowledge"]},l=void 0,o={unversionedId:"helm/hero/helm-example",id:"helm/hero/helm-example",title:"Helm Example",description:"Example",source:"@site/docs/helm/hero/helm-example.md",sourceDirName:"helm/hero",slug:"/helm/hero/helm-example",permalink:"/devviews/interviews/helm/hero/helm-example",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/hero/helm-example.md",tags:[{label:"HELM Knowledge",permalink:"/devviews/interviews/tags/helm-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Helm Example",title:"Helm Example",tags:["HELM Knowledge"]},sidebar:"helmInterviewSidebar",previous:{title:"Helm Expression",permalink:"/devviews/interviews/helm/hero/expression"},next:{title:"Helm some commands.md",permalink:"/devviews/interviews/helm/hero/some-commands"}},s={},m=[],u={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Example")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1. Create Helm project")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm create my-app\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2. Add variables in ",(0,a.kt)("inlineCode",{parentName:"strong"},"values.yaml")," file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="my-app\\values.yaml"',title:'"my-app\\values.yaml"'},"image:\n  repository: nginx\n  tag: stable\n  pullPolicy: IfNotPresent\n\nservice:\n  type: ClusterIP\n  port: 80\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Create & add deployment clarification in ",(0,a.kt)("inlineCode",{parentName:"strong"},"my-app.yaml")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"touch my-app.yaml\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="my-app\\my-app.yaml"',title:'"my-app\\my-app.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: my-app\n          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}\n          ports:\n            - containerPort: {{ .Values.service.port }}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-app\nspec:\n  type: {{ .Values.service.type }}\n  ports:\n    - port: {{ .Values.service.port }}\n      targetPort: {{ .Values.service.port }}\n  selector:\n    app: my-app\n\n")),(0,a.kt)("p",null,"This YAML definition creates a Kubernetes Deployment and Service that will run your application. The ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ .Values }}")," syntax refers to the values you defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," file."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"4. Test your chart by running:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm install my-app ./my-app\n\n")),(0,a.kt)("p",null,"Check the status of the deployment and service using ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl get deployments\nkubectl get services\n\n")),(0,a.kt)("p",null,"You should see your application running and be able to access it at the service URL.")))}c.isMDXComponent=!0},34134:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Helm some commands.md",title:"Helm some commands.md",tags:["HELM Knowledge"]},l=void 0,o={unversionedId:"helm/hero/some-commands",id:"helm/hero/some-commands",title:"Helm some commands.md",description:"Some Commands",source:"@site/docs/helm/hero/some-commands.md",sourceDirName:"helm/hero",slug:"/helm/hero/some-commands",permalink:"/devviews/interviews/helm/hero/some-commands",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/helm/hero/some-commands.md",tags:[{label:"HELM Knowledge",permalink:"/devviews/interviews/tags/helm-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Helm some commands.md",title:"Helm some commands.md",tags:["HELM Knowledge"]},sidebar:"helmInterviewSidebar",previous:{title:"Helm Example",permalink:"/devviews/interviews/helm/hero/helm-example"}},s={},m=[],u={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Some Commands")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm install [NAME] [CHART] [flags]"),": This command installs a chart archive."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm upgrade [RELEASE] [CHART] [flags]"),": This command upgrades a release to a new version of a chart."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm list [flags]"),": This command lists all releases."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm rollback [RELEASE] [REVISION] [flags]"),": This command rolls back a release to a previous revision."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm uninstall [RELEASE] [flags]"),": This command uninstalls a release."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm repo add [NAME] [URL] [flags]"),": This command adds a chart repository."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm repo update"),": This command updates information of available charts locally from chart repositories."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helm search repo [KEYWORD] [flags]"),": This command searches for charts in the repositories from the repositories file.")),(0,a.kt)("p",null,":::note"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("strong",{parentName:"p"},"chart")," is a package of pre-configured Kubernetes resources. It ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster")),". Charts are created as files laid out in a particular directory tree and can ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"be packaged into versioned archives"))," to be deployed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("strong",{parentName:"p"},"release")," is ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"an instance of a chart"))," running in a Kubernetes cluster. One chart can often be installed many times into the same cluster. And each time it is installed, a new release is created.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("strong",{parentName:"p"},"repository")," (or ",(0,a.kt)("strong",{parentName:"p"},"repo"),") is the place where charts can be collected and shared. It's like a package manager for Helm charts. Repositories can be public or private and can be added to Helm to make the charts they contain available for installation."))),(0,a.kt)("p",null,":::")))}c.isMDXComponent=!0},64846:function(e,t,n){t.Z=n.p+"assets/images/architecture-843b853946b659c5bd3321b5597f57aa.png"}}]);