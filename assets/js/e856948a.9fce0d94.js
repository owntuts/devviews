"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5657],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,d=p["".concat(u,".").concat(m)]||p[m]||h[m]||a;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7895:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Kubernetes Architecture",title:"Kubernetes Architecture",tags:["Kubernetes Knowledge"]},i=void 0,s={unversionedId:"kubernetes/hero/architecture",id:"kubernetes/hero/architecture",title:"Kubernetes Architecture",description:"Architecture",source:"@site/docs/kubernetes/hero/architecture.md",sourceDirName:"kubernetes/hero",slug:"/kubernetes/hero/architecture",permalink:"/devviews/interviews/kubernetes/hero/architecture",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kubernetes/hero/architecture.md",tags:[{label:"Kubernetes Knowledge",permalink:"/devviews/interviews/tags/kubernetes-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Kubernetes Architecture",title:"Kubernetes Architecture",tags:["Kubernetes Knowledge"]},sidebar:"kubernetesInterviewSidebar",next:{title:"Common Commands",permalink:"/devviews/interviews/kubernetes/hero/common-commands"}},u={},c=[],l={toc:c},p="wrapper";function h(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Architecture")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Kubernetes Architecture",src:n(9203).Z,width:"1536",height:"972"})),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"Kubernetes cluster")," consists of two parts: the control plane and the nodes. ",(0,o.kt)("strong",{parentName:"p"},"The control plane (Master Node)")," is responsible for managing the cluster state and configuration, while the ",(0,o.kt)("strong",{parentName:"p"},"nodes (Worker Nodes)")," are the compute machines that run the containers. "),(0,o.kt)("p",null,"The main components of the control plane are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-apiserver"),": The front end of the Kubernetes API, which handles requests from internal and external clients."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-scheduler"),": The component that assigns pods to nodes based on resource requirements and cluster health."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-controller-manager"),": The component that runs various controllers that ensure the desired state of the cluster is maintained."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"etcd"),": The distributed key-value store that stores the cluster data.")),(0,o.kt)("p",null,"The main components of a node are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kubelet"),": The agent that runs on each node and communicates with the control plane. It manages the pods and containers on the node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kube-proxy"),": The network proxy that maintains network rules and enables communication between pods across nodes."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"container runtime"),": The software that runs and manages the containers, such as Docker or containerd.")),(0,o.kt)("p",null,":::Note"),(0,o.kt)("p",null,"For fault tolerance purposes, there can be more than one master node in the cluster. If we have more than one master node, they would be in a HA (High Availability) mode, and only one of them will be the leader, performing all the operations"),(0,o.kt)("p",null,":::")))}h.isMDXComponent=!0},9203:function(e,t,n){t.Z=n.p+"assets/images/Kubernetes-Architecture-ebb62c1e031e4d93872eb3c903259f08.png"}}]);