"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5270],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),k=r,d=c["".concat(u,".").concat(k)]||c[k]||m[k]||l;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=k;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},52234:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s}});var a=n(83117),r=(n(67294),n(3905));const l={},o=void 0,i={unversionedId:"java/hero/concurrency",id:"java/hero/concurrency",title:"concurrency",description:"Concurrency vs Multithreading vs Parallelism",source:"@site/docs/java/hero/concurrency.md",sourceDirName:"java/hero",slug:"/java/hero/concurrency",permalink:"/devviews/interviews/java/hero/concurrency",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/java/hero/concurrency.md",tags:[],version:"current",frontMatter:{},sidebar:"javaInterviewSidebar",previous:{title:"OOP",permalink:"/devviews/interviews/java/hero/OOP"},next:{title:"exceptions",permalink:"/devviews/interviews/java/hero/exceptions"}},u={},s=[],p={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Concurrency vs Multithreading vs Parallelism")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multithreading")," is a technique that splits applications into multiple threads/tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Concurrency")," means doing those threads/tasks simultaneously on one or multiple processors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parallelism")," means that multiple threads/tasks are executed at the same time on different processors or cores.")),(0,r.kt)("p",null,"Since version 5.0, the Java platform has also included high-level concurrency APIs in the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.concurrent")," packages. These packages provide useful features such as ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"thread pools")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"atomic variables")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"locks")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"concurrent collections")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"synchronizers")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"executors")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"futures")),", and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"completable futures")),".")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ExecutorService")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService")," in Java is an interface that provides methods to manage the execution of asynchronous tasks on threads. It is part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.concurrent")," package, which contains classes and interfaces for concurrent programming. ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService")," helps in ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"creating and managing a pool of threads, and assigning tasks to them")),". "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can ",(0,r.kt)("strong",{parentName:"p"},"create")," an ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService")," instance by using one of the factory methods of the Executors class, or by using a specific implementation such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadPoolExecutor")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ForkJoinPool"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can ",(0,r.kt)("strong",{parentName:"p"},"assign tasks")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService")," using methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"submit()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"invokeAll()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"invokeAny()"),". These methods can accept ",(0,r.kt)("inlineCode",{parentName:"p"},"Runnable")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Callable")," objects, which represent the tasks to be executed. You can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"Future")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"CompletableFuture")," objects to get the result or status of the tasks. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can ",(0,r.kt)("strong",{parentName:"p"},"shut down")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService")," when you don\u2019t need it anymore, by using methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"shutdown()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"shutdownNow()"),"."))),(0,r.kt)("p",null,"Here is an example of how to use ExecutorService in Java:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.concurrent.*;\n\npublic class ExecutorServiceExample {\n\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        // Create an executor service with 4 threads\n        ExecutorService executor = Executors.newFixedThreadPool(4);\n\n        // Create a runnable task that prints "Hello World"\n        Runnable task = () -> {\n            System.out.println("Hello World");\n        };\n\n        // Submit the task to the executor service 10 times\n        for (int i = 0; i < 10; i++) {\n            executor.submit(task);\n        }\n\n        // Shutdown the executor service gracefully\n        executor.shutdown();\n    }\n}\n')),(0,r.kt)("p",null,"This code will output something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\n")),(0,r.kt)("p",null,"You can see that the executor service executes the task 10 times on 4 threads, and then shuts down. This is the benefit of using ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService")," in Java.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ExecutorService vs ThreadPoolExecutor vs ForkJoinPool")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadPoolExecutor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ForkJoinPool")," are all interfaces or classes for managing and executing tasks in Java. However, they have some differences in their design and behavior, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ExecutorService")," is an interface that represents an executor that can ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"run tasks asynchronously")),". It provides methods to ",(0,r.kt)("inlineCode",{parentName:"li"},"submit"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cancel"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"monitor")," and control the execution of tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ThreadPoolExecutor")," is a concrete class that implements ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecutorService"),". It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"uses a pool of threads to execute tasks")),". It allows to configure the core pool size, maximum pool size, keep alive time, work queue, thread factory and rejected execution handler."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ForkJoinPool")," is another concrete class that implements ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecutorService"),". It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"uses a work-stealing algorithm to execute tasks")),". It is designed for tasks that can be split into smaller subtasks recursively, such as ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"divide-and-conquer algorithms")),". It allows to configure the parallelism level, thread factory and uncaught exception handler.")),(0,r.kt)("p",null,"Here is a table that compares some of the main features of ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutorService"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ThreadPoolExecutor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ForkJoinPool"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"ExecutorService"),(0,r.kt)("th",{parentName:"tr",align:null},"ThreadPoolExecutor"),(0,r.kt)("th",{parentName:"tr",align:null},"ForkJoinPool"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Interface or class"),(0,r.kt)("td",{parentName:"tr",align:null},"Interface"),(0,r.kt)("td",{parentName:"tr",align:null},"Class"),(0,r.kt)("td",{parentName:"tr",align:null},"Class")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Task queue"),(0,r.kt)("td",{parentName:"tr",align:null},"Common queue for all threads"),(0,r.kt)("td",{parentName:"tr",align:null},"Common queue for all threads"),(0,r.kt)("td",{parentName:"tr",align:null},"Separate queue for each thread")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Task splitting"),(0,r.kt)("td",{parentName:"tr",align:null},"No support"),(0,r.kt)("td",{parentName:"tr",align:null},"No support"),(0,r.kt)("td",{parentName:"tr",align:null},"Support for recursive subtasks")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Work stealing"),(0,r.kt)("td",{parentName:"tr",align:null},"No support"),(0,r.kt)("td",{parentName:"tr",align:null},"No support"),(0,r.kt)("td",{parentName:"tr",align:null},"Support for stealing subtasks from other threads")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Configuration options"),(0,r.kt)("td",{parentName:"tr",align:null},"Depends on the implementation"),(0,r.kt)("td",{parentName:"tr",align:null},"Core pool size, maximum pool size, keep alive time, work queue, thread factory, rejected execution handler"),(0,r.kt)("td",{parentName:"tr",align:null},"Parallelism level, thread factory, uncaught exception handler"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"execute() vs submit() vs invokeAll() vs invokeAny()")),(0,r.kt)("p",null,"ExecutorService is an interface that provides methods for managing and executing tasks in Java. It has four methods for submitting tasks: ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"submit()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"invokeAll()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"invokeAny()"),". They have some differences in their design and behavior, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"execute()")," takes a ",(0,r.kt)("inlineCode",{parentName:"li"},"Runnable")," task as a parameter and does not return anything. It is suitable for tasks that do not need to produce any result or handle any exception. It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"does not provide any way to cancel or monitor the task")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submit()")," takes either a ",(0,r.kt)("inlineCode",{parentName:"li"},"Runnable")," or a ",(0,r.kt)("inlineCode",{parentName:"li"},"Callable")," task as a parameter and returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"Future")," object. It is suitable for tasks that need to produce a result or handle an exception. It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"provides a way to cancel or monitor the task using the ",(0,r.kt)("inlineCode",{parentName:"em"},"Future")," object")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"invokeAll()")," takes a collection of ",(0,r.kt)("inlineCode",{parentName:"li"},"Callable")," tasks as a parameter and returns a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Future")," objects. It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"blocks until all the tasks are completed or the timeout expires")),". It is ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"suitable for tasks that need to be executed in parallel"))," and their results need to be collected."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"invokeAny()")," takes a collection of ",(0,r.kt)("inlineCode",{parentName:"li"},"Callable")," tasks as a parameter and returns the result of one of the completed tasks. It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"blocks until at least one of the tasks is completed or the timeout expires")),". It is ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"suitable for tasks that are equivalent and only one result is needed")),".")),(0,r.kt)("p",null,"Here is a table that compares some of the main features of execute(), submit(), invokeAll() and invokeAny() methods in ExecutorService:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Return type"),(0,r.kt)("th",{parentName:"tr",align:null},"Blocking"),(0,r.kt)("th",{parentName:"tr",align:null},"Cancellation"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"execute()"),(0,r.kt)("td",{parentName:"tr",align:null},"Runnable"),(0,r.kt)("td",{parentName:"tr",align:null},"void"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"submit()"),(0,r.kt)("td",{parentName:"tr",align:null},"Runnable or Callable"),(0,r.kt)("td",{parentName:"tr",align:null},"Future"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"invokeAll()"),(0,r.kt)("td",{parentName:"tr",align:null},"Collection of Callable"),(0,r.kt)("td",{parentName:"tr",align:null},"List of Future"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"invokeAny()"),(0,r.kt)("td",{parentName:"tr",align:null},"Collection of Callable"),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"One")))),(0,r.kt)("p",null,"Here are some examples of using execute(), submit(), invokeAll() and invokeAny() methods in ExecutorService:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using execute() to run a Runnable task:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Create an ExecutorService with a fixed thread pool\nExecutorService executor = Executors.newFixedThreadPool(2);\n\n// Create a Runnable task\nRunnable task = () -> {\n    // Do some work\n    System.out.println("Hello from execute()");\n};\n\n// Execute the task\nexecutor.execute(task);\n\n// Shutdown the executor\nexecutor.shutdown();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using submit() to run a Callable task and get the result:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Create an ExecutorService with a fixed thread pool\nExecutorService executor = Executors.newFixedThreadPool(2);\n\n// Create a Callable task\nCallable<String> task = () -> {\n    // Do some work\n    return "Hello from submit()";\n};\n\n// Submit the task and get a Future object\nFuture<String> future = executor.submit(task);\n\n// Get the result from the Future object\ntry {\n    String result = future.get();\n    System.out.println(result);\n} catch (InterruptedException | ExecutionException e) {\n    e.printStackTrace();\n}\n\n// Shutdown the executor\nexecutor.shutdown();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using invokeAll() to run a collection of Callable tasks and get a list of results:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Create an ExecutorService with a fixed thread pool\nExecutorService executor = Executors.newFixedThreadPool(2);\n\n// Create a collection of Callable tasks\nList<Callable<String>> tasks = new ArrayList<>();\ntasks.add(() -> "Task 1");\ntasks.add(() -> "Task 2");\ntasks.add(() -> "Task 3");\n\n// Invoke all the tasks and get a list of Future objects\nList<Future<String>> futures = executor.invokeAll(tasks);\n\n// Iterate over the futures and get the results\nfor (Future<String> future : futures) {\n    try {\n        String result = future.get();\n        System.out.println(result);\n    } catch (InterruptedException | ExecutionException e) {\n        e.printStackTrace();\n    }\n}\n\n// Shutdown the executor\nexecutor.shutdown();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using invokeAny() to run a collection of Callable tasks and get one result:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Create an ExecutorService with a fixed thread pool\nExecutorService executor = Executors.newFixedThreadPool(2);\n\n// Create a collection of Callable tasks\nList<Callable<String>> tasks = new ArrayList<>();\ntasks.add(() -> "Task 1");\ntasks.add(() -> "Task 2");\ntasks.add(() -> "Task 3");\n\n// Invoke any of the tasks and get one result\nString result = executor.invokeAny(tasks);\n\n// Print the result\nSystem.out.println(result);\n\n// Shutdown the executor\nexecutor.shutdown();\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Future  vs CompletableFuture")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Future"),(0,r.kt)("th",{parentName:"tr",align:null},"CompletableFuture"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Blocking"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes, ",(0,r.kt)("inlineCode",{parentName:"td"},"Future.get()")," blocks the current thread"),(0,r.kt)("td",{parentName:"tr",align:null},"No, ",(0,r.kt)("inlineCode",{parentName:"td"},"CompletableFuture.thenAccept()")," registers a callback function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Completing"),(0,r.kt)("td",{parentName:"tr",align:null},"No, Future can only be cancelled"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes, CompletableFuture can be completed manually")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Composing"),(0,r.kt)("td",{parentName:"tr",align:null},"Limited, Future does not provide methods to chain or combine tasks"),(0,r.kt)("td",{parentName:"tr",align:null},"Rich, ",(0,r.kt)("inlineCode",{parentName:"td"},"CompletableFuture")," provides methods such as ",(0,r.kt)("inlineCode",{parentName:"td"},"thenApply()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"thenCompose()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"thenCombine()"),", etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Handling exceptions"),(0,r.kt)("td",{parentName:"tr",align:null},"Poor, ",(0,r.kt)("inlineCode",{parentName:"td"},"Future.get()")," throws an ",(0,r.kt)("inlineCode",{parentName:"td"},"ExecutionException")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Splendid"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"CompletableFuture.exceptionally()")," allows handling exceptions and providing fallback values")))),(0,r.kt)("p",null,"Here are some examples of using Future and CompletableFuture in Java:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creating a Future with ExecutorService and getting the result with Future.get():")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ExecutorService executor = Executors.newSingleThreadExecutor();\nFuture<Integer> future = executor.submit(() -> {\n    // Some long-running task\n    return 42;\n});\n// Do some other work\ntry {\n    // Get the result, blocking if necessary\n    Integer result = future.get();\n    System.out.println("Result: " + result);\n} catch (InterruptedException | ExecutionException e) {\n    e.printStackTrace();\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creating a CompletableFuture with CompletableFuture.supplyAsync() and getting the result with CompletableFuture.join():")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {\n    // Some long-running task\n    return 42;\n});\n// Do some other work\n// Get the result, blocking if necessary\nInteger result = future.join();\nSystem.out.println("Result: " + result);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Chaining multiple tasks with CompletableFuture.thenApply() and thenAccept():")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CompletableFuture.supplyAsync(() -> {\n    // Some long-running task\n    return 42;\n}).thenApply(result -> {\n    // Apply a function to the previous result\n    return result * 2;\n}).thenAccept(result -> {\n    // Consume the final result\n    System.out.println("Result: " + result);\n});\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Handling exceptions with CompletableFuture.exceptionally():")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CompletableFuture.supplyAsync(() -> {\n    // Some long-running task that may throw an exception\n    if (Math.random() > 0.5) {\n        throw new RuntimeException("Something went wrong");\n    }\n    return 42;\n}).exceptionally(ex -> {\n    // Handle the exception and provide a fallback value\n    System.out.println("Error: " + ex.getMessage());\n    return -1;\n}).thenAccept(result -> {\n    // Consume the final result\n    System.out.println("Result: " + result);\n});\n'))))}m.isMDXComponent=!0}}]);