"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8984],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5556:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p}});var a=n(3117),r=(n(7294),n(3905));const l={sidebar_position:1e3,sidebar_label:"let vs run vs with vs apply vs also in Kotlin",title:"let vs run vs with vs apply vs also in Kotlin",slug:"/let-vs-run-vs-with-vs-apply-vs-also",tags:["Basic Kotlin Interviews"]},i=void 0,o={unversionedId:"kotlin/basic/let-vs-run-vs-with-vs-apply-vs-also",id:"kotlin/basic/let-vs-run-vs-with-vs-apply-vs-also",title:"let vs run vs with vs apply vs also in Kotlin",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/let-vs-run-vs-with-vs-apply-vs-also.md",sourceDirName:"kotlin/basic",slug:"/let-vs-run-vs-with-vs-apply-vs-also",permalink:"/devviews/interviews/let-vs-run-vs-with-vs-apply-vs-also",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/let-vs-run-vs-with-vs-apply-vs-also.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"let vs run vs with vs apply vs also in Kotlin",title:"let vs run vs with vs apply vs also in Kotlin",slug:"/let-vs-run-vs-with-vs-apply-vs-also",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"Lambda Function vs Expression Function",permalink:"/devviews/interviews/lambda-vs-expression-function"},next:{title:"List vs Set vs Map",permalink:"/devviews/interviews/list-set-map"}},s={},p=[{value:"<code>let</code> vs <code>run</code> Example",id:"let-vs-run-example",level:4},{value:"<code>apply</code> and <code>also</code> Example:",id:"apply-and-also-example",level:4},{value:"<code>with</code> Example",id:"with-example",level:4}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,r.kt)("inlineCode",{parentName:"p"},"let")," vs ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," vs ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," vs ",(0,r.kt)("inlineCode",{parentName:"p"},"apply")," vs ",(0,r.kt)("inlineCode",{parentName:"p"},"also")," in Kotlin")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,r.kt)("p",null,"These functions provide a convenient way to execute a block of code within a specific scope, allowing you to access the properties and methods of an object more easily."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"let")," are similar"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"apply")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"with")," are similar")),(0,r.kt)("p",null,"Here's a table summarizing the differences:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Return Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Object Scope"),(0,r.kt)("th",{parentName:"tr",align:null},"Lambda Scope"),(0,r.kt)("th",{parentName:"tr",align:null},"Mutable Change"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"let")),(0,r.kt)("td",{parentName:"tr",align:null},"Lambda result"),(0,r.kt)("td",{parentName:"tr",align:null},"Non-null"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"it")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"run")),(0,r.kt)("td",{parentName:"tr",align:null},"Lambda result"),(0,r.kt)("td",{parentName:"tr",align:null},"Non-null"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"this")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"with")),(0,r.kt)("td",{parentName:"tr",align:null},"Lambda result"),(0,r.kt)("td",{parentName:"tr",align:null},"Non-null"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"this")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apply")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Non-null"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"this")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"also")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Non-null"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"it")),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"let-vs-run-example"},(0,r.kt)("inlineCode",{parentName:"h4"},"let")," vs ",(0,r.kt)("inlineCode",{parentName:"h4"},"run")," Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage"),":  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Want to run a block of code within an object scope"))),(0,r.kt)("p",null,"We want to convert the object's data into a string. We can use either ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," to achieve this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'data class User(val name: String, val age: Int)\n\nval user = User("John Doe", 30)\n\nval resultFromLet = user.let {\n    "Name: ${it.name}, Age: ${it.age}"\n}\n\nval resultFromRun = user.run {\n    "Name: ${this.name}, Age: ${this.age}"\n}\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"let")," is useful when working with ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"nullable objects")),", while ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," is more useful when working with ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"non-null objects")),"."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"apply-and-also-example"},(0,r.kt)("inlineCode",{parentName:"h4"},"apply")," and ",(0,r.kt)("inlineCode",{parentName:"h4"},"also")," Example:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Uasage"),": ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Want to modify an object in it's scope"))),(0,r.kt)("p",null,"In this example, we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," object and we want to update its properties. We can use either ",(0,r.kt)("inlineCode",{parentName:"p"},"apply")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"also")," to achieve this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'data class User(var name: String, var age: Int)\n\nval user = User("John Doe", 30)\n\nval resultFromApply = user.apply {\n    name = "Alice"\n    age = 25\n}.toString()\n\nval resultFromAlso = user.also {\n    it.name = "Bob"\n    it.age = 40\n}.toString()\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"apply")," is useful when you want to ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"modify"))," an object's properties and ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"return the object itself")),". "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"also")," is useful when you want to do something with the object and ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"return the object itself without modifying"))," it.")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"with-example"},(0,r.kt)("inlineCode",{parentName:"h4"},"with")," Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ussage"),": ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"want to access argument of an object"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"with")," can access members of an object argument concisely"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'class Configuration(var host: String, var port: Int) \n\nfun main() {\n    val configuration = Configuration(host = "127.0.0.1", port = 9000) \n\n    with(configuration) {\n        println("$host:$port")\n    }\n\n    // instead of:\n    println("${configuration.host}:${configuration.port}")    \n}\n'))))}d.isMDXComponent=!0}}]);