"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8513,7262,4376,9330,90],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return v}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,v=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(v,s(s({ref:t},u),{},{components:n})):a.createElement(v,s({ref:t},u))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4312:function(e,t,n){n.d(t,{ZP:function(){return o}});var a=n(3117),i=(n(7294),n(3905));const r={toc:[]},s="wrapper";function o(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"interview"},n.level&&(0,i.kt)("span",{className:"level"},n.level),n.children))}o.isMDXComponent=!0},725:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return v}});var a=n(3117),i=(n(7294),n(3905)),r=n(4312),s=n(2271),o=n(1871),l=n(6689),p=n(1971);const u={sidebar_position:3,id:"kotlin-interview-questions-answers-junior",sidebar_label:"Kotlin Interviews",title:"Kotlin Interview Questions and Answers",tags:["Kotlin Interviews"]},d="Basic Angular Interview Questions & Answers",c={unversionedId:"kotlin/kotlin-interview-questions-answers-junior",id:"kotlin/kotlin-interview-questions-answers-junior",title:"Kotlin Interview Questions and Answers",description:"Here, we discuss about Angular Interview Questions & Answers!",source:"@site/docs/kotlin/1.kotlin.md",sourceDirName:"kotlin",slug:"/kotlin/kotlin-interview-questions-answers-junior",permalink:"/devviews/interviews/kotlin/kotlin-interview-questions-answers-junior",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/1.kotlin.md",tags:[{label:"Kotlin Interviews",permalink:"/devviews/interviews/tags/kotlin-interviews"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"kotlin-interview-questions-answers-junior",sidebar_label:"Kotlin Interviews",title:"Kotlin Interview Questions and Answers",tags:["Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"vararg spread operator",permalink:"/devviews/interviews/vararg-vs-spread"},next:{title:"intro",permalink:"/devviews/interviews/kotlin/intro"}},m={},v=[{value:"vararg vs spread opertor",id:"vararg-vs-spread-opertor",level:2},{value:"lambda function vs expression function?",id:"lambda-function-vs-expression-function",level:2},{value:"<code>List</code> vs <code>Set</code> vs <code>Map</code>?",id:"list-vs-set-vs-map",level:2},{value:"<code>associateBy</code> vs <code>groupBy</code>?",id:"associateby-vs-groupby",level:2}],k={toc:v},g="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-angular-interview-questions--answers"},"Basic Angular Interview Questions & Answers"),(0,i.kt)("p",null,"Here, we discuss about Angular Interview Questions & Answers!"),(0,i.kt)("h2",{id:""}),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"vararg-vs-spread-opertor"},"vararg vs spread opertor"),(0,i.kt)(s.default,{mdxType:"VarargSpread"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"lambda-function-vs-expression-function"},"lambda function vs expression function?"),(0,i.kt)(o.default,{mdxType:"LambdaExFun"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"list-vs-set-vs-map"},(0,i.kt)("inlineCode",{parentName:"h2"},"List")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"Set")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"Map"),"?"),(0,i.kt)(l.default,{mdxType:"ListSetMap"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"associateby-vs-groupby"},(0,i.kt)("inlineCode",{parentName:"h2"},"associateBy")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"groupBy"),"?"),(0,i.kt)(p.default,{mdxType:"AssociateByGroupBy"})))}f.isMDXComponent=!0},1971:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return p}});var a=n(3117),i=(n(7294),n(3905));const r={sidebar_position:1e3,sidebar_label:"associateBy vs groupBy in Kotlin",title:"associateBy vs groupBy in Kotlin",slug:"/associateBy-vs-groupBy",tags:["Basic Kotlin Interviews"]},s=void 0,o={unversionedId:"kotlin/basic/associateBy-vs-groupBy",id:"kotlin/basic/associateBy-vs-groupBy",title:"associateBy vs groupBy in Kotlin",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/associateBy-vs-groupBy.md",sourceDirName:"kotlin/basic",slug:"/associateBy-vs-groupBy",permalink:"/devviews/interviews/associateBy-vs-groupBy",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/associateBy-vs-groupBy.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"associateBy vs groupBy in Kotlin",title:"associateBy vs groupBy in Kotlin",slug:"/associateBy-vs-groupBy",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",next:{title:"Lambda Function vs Expression Function",permalink:"/devviews/interviews/lambda-vs-expression-function"}},l={},p=[{value:"1. Example of <code>associateBy</code>:",id:"1-example-of-associateby",level:4},{value:"2. Example of <code>groupBy</code>:",id:"2-example-of-groupby",level:4}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"associateBy")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," in Kotlin")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"associateBy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," are functions in Kotlin that allow you to transform a collection into a map based on some criteria."),(0,i.kt)("p",null,"The differences between ",(0,i.kt)("inlineCode",{parentName:"p"},"associateBy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Function"),(0,i.kt)("th",{parentName:"tr",align:null},"Output"),(0,i.kt)("th",{parentName:"tr",align:null},"Key behavior when duplicates are present"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"associateBy")),(0,i.kt)("td",{parentName:"tr",align:null},"Map"),(0,i.kt)("td",{parentName:"tr",align:null},"Only the last element with the same key is included in the map")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"groupBy")),(0,i.kt)("td",{parentName:"tr",align:null},"Map>"),(0,i.kt)("td",{parentName:"tr",align:null},"All elements with the same key are grouped together in the list")))),(0,i.kt)("h4",{id:"1-example-of-associateby"},"1. Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"associateBy"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},'val list = listOf("apple", "banana", "orange", "papaya", "pineapple")\nval map = list.associateBy { it.first() }\nprint(map)\n// Since there are two words ("papaya" and "pineapple") that start with the letter "a", only the last one ("orange") appears in the resulting map.\n// {a=apple, b=banana, o=orange, p=pineapple}\n\n')),(0,i.kt)("h4",{id:"2-example-of-groupby"},"2. Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"groupBy"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},'val list = listOf("apple", "banana", "orange", "papaya", "pineapple")\nval map = list.groupBy { it.first() }\n// Both "papaya" and "pineapple" appear in the resulting map under the key "a".\n// {a=[apple], b=[banana], o=[orange], p=[papaya, pineapple]}\n\n'))))}c.isMDXComponent=!0},1871:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return p}});var a=n(3117),i=(n(7294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Lambda Function vs Expression Function",title:"Lambda Function vs Expression Function",slug:"/lambda-vs-expression-function",tags:["Basic Kotlin Interviews"]},s=void 0,o={unversionedId:"kotlin/basic/lambda-vs-expression-function",id:"kotlin/basic/lambda-vs-expression-function",title:"Lambda Function vs Expression Function",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/lambda-vs-expression-function.md",sourceDirName:"kotlin/basic",slug:"/lambda-vs-expression-function",permalink:"/devviews/interviews/lambda-vs-expression-function",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/lambda-vs-expression-function.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Lambda Function vs Expression Function",title:"Lambda Function vs Expression Function",slug:"/lambda-vs-expression-function",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"associateBy vs groupBy in Kotlin",permalink:"/devviews/interviews/associateBy-vs-groupBy"},next:{title:"List vs Set vs Map",permalink:"/devviews/interviews/list-set-map"}},l={},p=[],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nlambda function vs expression function?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,i.kt)("p",null,"A lambda function and an expression function are two different ways of defining a function in Kotlin, and they have some subtle differences. "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A lambda function")," is a function that has no name and can be passed as an argument to another function. It is defined using curly braces ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"->"),"."),(0,i.kt)("p",{parentName:"li"},"This is a lambda fuunction."))),(0,i.kt)("p",null,"It's equivalent to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"val lambdaFunc: (Int, Int) -> Int = { a, b -> a + b }\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"An expression function")," is a named function that has an expression as its body. It is defined using the ",(0,i.kt)("inlineCode",{parentName:"li"},"fun")," keyword, followed by the function name and its parameters.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"fun sum(a: Int, b: Int) = a + b\n"))))}c.isMDXComponent=!0},6689:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return p}});var a=n(3117),i=(n(7294),n(3905));const r={sidebar_position:1e3,sidebar_label:"List vs Set vs Map",title:"List vs Set vs Map in Kotlin?",slug:"/list-set-map",tags:["Basic Kotlin Interviews"]},s=void 0,o={unversionedId:"kotlin/basic/list-set-map",id:"kotlin/basic/list-set-map",title:"List vs Set vs Map in Kotlin?",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/list-set-map.md",sourceDirName:"kotlin/basic",slug:"/list-set-map",permalink:"/devviews/interviews/list-set-map",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/list-set-map.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"List vs Set vs Map",title:"List vs Set vs Map in Kotlin?",slug:"/list-set-map",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"Lambda Function vs Expression Function",permalink:"/devviews/interviews/lambda-vs-expression-function"},next:{title:"vararg spread operator",permalink:"/devviews/interviews/vararg-vs-spread"}},l={},p=[],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"List")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," in Kotlin?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Set"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," are collections in Kotlin that are used to store and organize data.\nHere is a table summarizing the differences between ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Set"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," in Kotlin:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Collection"),(0,i.kt)("th",{parentName:"tr",align:null},"Order"),(0,i.kt)("th",{parentName:"tr",align:null},"Duplicates"),(0,i.kt)("th",{parentName:"tr",align:null},"Access by index"),(0,i.kt)("th",{parentName:"tr",align:null},"Access by key"),(0,i.kt)("th",{parentName:"tr",align:null},"Mutable"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"List"),(0,i.kt)("td",{parentName:"tr",align:null},"Ordered"),(0,i.kt)("td",{parentName:"tr",align:null},"Allowed"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Set"),(0,i.kt)("td",{parentName:"tr",align:null},"Unordered"),(0,i.kt)("td",{parentName:"tr",align:null},"Not allowed"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Map"),(0,i.kt)("td",{parentName:"tr",align:null},"Unordered"),(0,i.kt)("td",{parentName:"tr",align:null},"Key: Not allowed ",(0,i.kt)("br",null)," Value: Allowed"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},'val numbers = listOf(1, 2, 3, 4, 5)\nval numbers = listOf(1, 2, 3, 4, 5)\nval phonebook = mapOf("Alice" to "123-4567", "Bob" to "234-5678", "Charlie" to "345-6789")\n\n'))))}c.isMDXComponent=!0},2271:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return p}});var a=n(3117),i=(n(7294),n(3905));const r={sidebar_position:1e3,sidebar_label:"vararg spread operator",title:"vararg spread operator",slug:"/vararg-vs-spread",tags:["Basic Kotlin Interviews"]},s=void 0,o={unversionedId:"kotlin/basic/vararg-vs-spread",id:"kotlin/basic/vararg-vs-spread",title:"vararg spread operator",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/vararg-vs-spread.md",sourceDirName:"kotlin/basic",slug:"/vararg-vs-spread",permalink:"/devviews/interviews/vararg-vs-spread",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/vararg-vs-spread.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"vararg spread operator",title:"vararg spread operator",slug:"/vararg-vs-spread",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"List vs Set vs Map",permalink:"/devviews/interviews/list-set-map"},next:{title:"Kotlin Interviews",permalink:"/devviews/interviews/kotlin/kotlin-interview-questions-answers-junior"}},l={},p=[],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat are differences between ",(0,i.kt)("inlineCode",{parentName:"p"},"myFun(*elements)")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"myFun(vararg elements)")," in Kotlin?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,i.kt)("p",null,"  ",(0,i.kt)("inlineCode",{parentName:"p"},"myFun(*elements)")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"myFun(vararg elements)")," are two ways of passing a variable number of arguments to a function in Kotlin."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"myFun(*elements)")," is the spread operator"),". It allows you to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"pass a list or array of elements"))," as a parameter to a function. The spread operator ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"unpacks"))," the contents of the list or array and passes each value individually as an argument to the function.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},'fun foo(vararg elements: String) {\n    elements.forEach { println(it) }\n}\n\nval myList = listOf("a", "b", "c")\n\nfoo(*myList.toTypedArray())\n\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"myFun(vararg elements)"))," defines a function that takes ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"multiple arguments"))," of the same type.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"fun bar(vararg elements: Int) {\n    elements.forEach { println(it) }\n}\n\nbar(1, 2, 3, 4, 5)\n"))))}c.isMDXComponent=!0}}]);