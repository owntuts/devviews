"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[7776],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return N}});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),m=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},s=function(t){var e=m(t.components);return a.createElement(o.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,s=d(t,["components","mdxType","originalType","parentName"]),p=m(n),k=r,N=p["".concat(o,".").concat(k)]||p[k]||u[k]||l;return n?a.createElement(N,i(i({ref:e},s),{},{components:n})):a.createElement(N,i({ref:e},s))}));function N(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=k;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=t,d[p]="string"==typeof t?t:r,i[1]=d;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},58346:function(t,e,n){n.r(e),n.d(e,{assets:function(){return o},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m}});var a=n(83117),r=(n(67294),n(3905));const l={sidebar_position:1e3,sidebar_label:"Nodejs Stream Events & Functions",title:"Nodejs Stream Events & Functions",tags:["Nodejs Knowledge"]},i=void 0,d={unversionedId:"nodejs/nodejs/common-stream-events",id:"nodejs/nodejs/common-stream-events",title:"Nodejs Stream Events & Functions",description:"Common Events & Functions of Stream in Nodejs",source:"@site/docs/nodejs/nodejs/common-stream-events.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/common-stream-events",permalink:"/devviews/interviews/nodejs/nodejs/common-stream-events",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/common-stream-events.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Stream Events & Functions",title:"Nodejs Stream Events & Functions",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/cluster"},next:{title:"Nodejs Stream",permalink:"/devviews/interviews/nodejs/nodejs/stream"}},o={},m=[{value:"Readable Stream Events:",id:"readable-stream-events",level:4},{value:"Writable Stream Events:",id:"writable-stream-events",level:4},{value:"Readable Stream Functions:",id:"readable-stream-functions",level:4},{value:"Writable Stream Functions:",id:"writable-stream-functions",level:4}],s={toc:m},p="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(p,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Common Events & Functions of Stream in Nodejs")),(0,r.kt)("p",null,"Here are tables that list some of the common events and functions for Node.js Readable streams and Writable streams:"),(0,r.kt)("h4",{id:"readable-stream-events"},"Readable Stream Events:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readable")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when data is ready to be read from the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when data is read from the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"end")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when the stream has no more data to read.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"error")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted if there is an error reading data from the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"close")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is closed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pause")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is paused.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"resume")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is resumed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readableend")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when the ",(0,r.kt)("inlineCode",{parentName:"td"},"end()")," method is called on the readable stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readableerror")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when an error occurs reading from the stream.")))),(0,r.kt)("h4",{id:"writable-stream-events"},"Writable Stream Events:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"drain")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is ready to receive more data after previously being write-blocked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"error")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted if there is an error writing data to the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"finish")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when all data has been successfully written to the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pipe")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when a readable stream is piped to the writable stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpipe")),(0,r.kt)("td",{parentName:"tr",align:null},"Emitted when a readable stream is unpiped from the writable stream.")))),(0,r.kt)("h4",{id:"readable-stream-functions"},"Readable Stream Functions:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"read([size])")),(0,r.kt)("td",{parentName:"tr",align:null},"Read ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," bytes of data from the stream (or as much as is currently available if ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," is omitted).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"setEncoding()")),(0,r.kt)("td",{parentName:"tr",align:null},"Set the encoding of the data emitted from the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pause()")),(0,r.kt)("td",{parentName:"tr",align:null},"Pause emitting the ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," event.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"resume()")),(0,r.kt)("td",{parentName:"tr",align:null},"Resume emitting the ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," event.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isPaused()")),(0,r.kt)("td",{parentName:"tr",align:null},"Check if the stream is paused.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pipe(dest)")),(0,r.kt)("td",{parentName:"tr",align:null},"Pipe the output of the stream to a writable stream (",(0,r.kt)("inlineCode",{parentName:"td"},"dest"),").")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpipe(dest?)")),(0,r.kt)("td",{parentName:"tr",align:null},"Stop piping the output of the stream to a writable stream (",(0,r.kt)("inlineCode",{parentName:"td"},"dest"),"), or stop all piping if no ",(0,r.kt)("inlineCode",{parentName:"td"},"dest")," is specified.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unshift(chunk)")),(0,r.kt)("td",{parentName:"tr",align:null},"Push a chunk of data back onto the stream's internal buffer (useful when implementing parsing logic).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"wrap(stream)")),(0,r.kt)("td",{parentName:"tr",align:null},"Wrap an old-style stream (that emits ",(0,r.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"end"),", and ",(0,r.kt)("inlineCode",{parentName:"td"},"error")," events) to make it compatible with the new-style ",(0,r.kt)("inlineCode",{parentName:"td"},"Readable")," stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"destroy([err])")),(0,r.kt)("td",{parentName:"tr",align:null},"Destroy the stream, optionally with an error.")))),(0,r.kt)("h4",{id:"writable-stream-functions"},"Writable Stream Functions:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"write(chunk[, encoding])")),(0,r.kt)("td",{parentName:"tr",align:null},"Write ",(0,r.kt)("inlineCode",{parentName:"td"},"chunk")," of data to the stream, optionally with ",(0,r.kt)("inlineCode",{parentName:"td"},"encoding"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"end([chunk][, encoding])")),(0,r.kt)("td",{parentName:"tr",align:null},"Signal the end of the stream, optionally writing a final ",(0,r.kt)("inlineCode",{parentName:"td"},"chunk")," of data with ",(0,r.kt)("inlineCode",{parentName:"td"},"encoding"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cork()")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable corking of the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uncork()")),(0,r.kt)("td",{parentName:"tr",align:null},"Flush any previously corked data on the stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"setDefaultEncoding()")),(0,r.kt)("td",{parentName:"tr",align:null},"Set the default encoding of the writable stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"destroy([err])")),(0,r.kt)("td",{parentName:"tr",align:null},"Destroy the stream, optionally with an error."))))))}u.isMDXComponent=!0}}]);