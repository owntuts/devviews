"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[3431],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93856:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"class vs struct vs record",title:"class vs struct vs record in C-Sharp",slug:"/class-struct-record",tags:["Basic C# Interviews"]},s=void 0,o={unversionedId:"c-sharp/basic/class-struct-record",id:"c-sharp/basic/class-struct-record",title:"class vs struct vs record in C-Sharp",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/class-struct-record.md",sourceDirName:"c-sharp/basic",slug:"/class-struct-record",permalink:"/devviews/interviews/class-struct-record",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/class-struct-record.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"class vs struct vs record",title:"class vs struct vs record in C-Sharp",slug:"/class-struct-record",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Built-in delegates",permalink:"/devviews/interviews/built-in-delegates-c-sharp"},next:{title:"Concurrent vs Parallel vs Asynchronous",permalink:"/devviews/interviews/concurrent-vs-parallel-vs-asynchronous"}},l={},c=[{value:"An example of how to define and use a <code>record</code> in C#:",id:"an-example-of-how-to-define-and-use-a-record-in-c",level:4}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Question:",type:"quest"},(0,a.kt)("p",{parentName:"admonition"},"*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,a.kt)("inlineCode",{parentName:"p"},"class")," vs ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," vs ",(0,a.kt)("inlineCode",{parentName:"p"},"record")," in C#? Give an example using ",(0,a.kt)("inlineCode",{parentName:"p"},"record"),"?")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"ANSWER:")),(0,a.kt)("p",null,"  ","*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,a.kt)("p",null,"Here's a summary of the differences between the three types:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Allocation")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Access")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Inheritance")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Mutability")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Class")),(0,a.kt)("td",{parentName:"tr",align:null},"Heap"),(0,a.kt)("td",{parentName:"tr",align:null},"Reference"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Mutable")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Struct")),(0,a.kt)("td",{parentName:"tr",align:null},"Stack"),(0,a.kt)("td",{parentName:"tr",align:null},"Value"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Mutable")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Record")),(0,a.kt)("td",{parentName:"tr",align:null},"Heap"),(0,a.kt)("td",{parentName:"tr",align:null},"Reference"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Immutable")))),(0,a.kt)("p",null,"In general, use a ",(0,a.kt)("inlineCode",{parentName:"p"},"class")," when you need complex behavior, inheritance, and references, use a ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," when you need a simple data container that can be passed around by value, and use a ",(0,a.kt)("inlineCode",{parentName:"p"},"record")," when you need an immutable data container with some additional functionality."),(0,a.kt)("h4",{id:"an-example-of-how-to-define-and-use-a-record-in-c"},"An example of how to define and use a ",(0,a.kt)("inlineCode",{parentName:"h4"},"record")," in C#:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\n\npublic class MyClass\n{\n    public record Person(string Name, int Age);\n\n    public static void Main(string[] args)\n    {\n        Person person = new Person("John Smith", 30);\n\n        // Accessing values of a record\n        string name = person.Name; // "John Smith"\n        int age = person.Age; // 30\n\n        // Attempt to update the object\n        // This won\'t work because records are immutable\n        // person.Age = 31;\n\n        // Creating a new Person record with updated age\n        Person updatedPerson = person with { Age = 31 };\n        Console.WriteLine(updatedPerson.Age); // Output: 31\n    }\n}\n\n'))))}d.isMDXComponent=!0}}]);