"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[90],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),v=a,d=c["".concat(l,".").concat(v)]||c[v]||m[v]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=v;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},2271:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"vararg spread operator",title:"vararg spread operator",slug:"/vararg-vs-spread",tags:["Basic Kotlin Interviews"]},o=void 0,s={unversionedId:"kotlin/basic/vararg-vs-spread",id:"kotlin/basic/vararg-vs-spread",title:"vararg spread operator",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/vararg-vs-spread.md",sourceDirName:"kotlin/basic",slug:"/vararg-vs-spread",permalink:"/devviews/interviews/vararg-vs-spread",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/vararg-vs-spread.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"vararg spread operator",title:"vararg spread operator",slug:"/vararg-vs-spread",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"List vs Set vs Map",permalink:"/devviews/interviews/list-set-map"},next:{title:"Kotlin Interviews",permalink:"/devviews/interviews/kotlin/kotlin-interview-questions-answers-junior"}},l={},p=[],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Question:",type:"quest"},(0,a.kt)("p",{parentName:"admonition"},"*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat are differences between ",(0,a.kt)("inlineCode",{parentName:"p"},"myFun(*elements)")," vs ",(0,a.kt)("inlineCode",{parentName:"p"},"myFun(vararg elements)")," in Kotlin?")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"ANSWER:")),(0,a.kt)("p",null,"  ","*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"myFun(*elements)")," vs ",(0,a.kt)("inlineCode",{parentName:"p"},"myFun(vararg elements)")," are two ways of passing a variable number of arguments to a function in Kotlin."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"myFun(*elements)")," is the spread operator"),". It allows you to ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"pass a list or array of elements"))," as a parameter to a function. The spread operator ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"unpacks"))," the contents of the list or array and passes each value individually as an argument to the function.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kt"},'fun foo(vararg elements: String) {\n    elements.forEach { println(it) }\n}\n\nval myList = listOf("a", "b", "c")\n\nfoo(*myList.toTypedArray())\n\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"myFun(vararg elements)"))," defines a function that takes ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"multiple arguments"))," of the same type.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kt"},"fun bar(vararg elements: Int) {\n    elements.forEach { println(it) }\n}\n\nbar(1, 2, 3, 4, 5)\n"))))}m.isMDXComponent=!0}}]);