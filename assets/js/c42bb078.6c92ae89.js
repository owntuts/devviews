"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[4894],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54312:function(e,t,n){n.d(t,{ZP:function(){return i}});var a=n(83117),r=(n(67294),n(3905));const o={toc:[]},l="wrapper";function i(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"interview"},n.level&&(0,r.kt)("span",{className:"level"},n.level),n.children))}i.isMDXComponent=!0},43706:function(e,t,n){n.r(t),n.d(t,{assets:function(){return b},contentTitle:function(){return f},default:function(){return T},frontMatter:function(){return y},metadata:function(){return N},toc:function(){return x}});var a=n(83117),r=(n(67294),n(3905));n(54312);const o={toc:[]},l="wrapper";function i(e){let{components:t,...i}=e;return(0,r.kt)(l,(0,a.Z)({},o,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"How Python Works")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"How Python Works",src:n(33019).Z,width:"1200",height:"568"})),(0,r.kt)("p",null,"Python is a popular programming language that can be used for web development, data analysis, software development, and more. It is an ",(0,r.kt)("strong",{parentName:"p"},"interpreted")," language, which means that the code you write is not directly translated into machine code, but rather passed to an interpreter that executes it. The interpreter performs several steps to run your Python code:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First, it checks and searches for ",(0,r.kt)("strong",{parentName:"li"},"syntax errors")," and verifies ",(0,r.kt)("strong",{parentName:"li"},"indentation rules"),". Python uses indentation to define blocks of code, so it is important to follow the correct indentation style."),(0,r.kt)("li",{parentName:"ul"},"Next, it converts the source code via ",(0,r.kt)("strong",{parentName:"li"},"tokenization"),", which means breaking the code into smaller pieces called tokens. Tokens are the basic units of Python syntax, such as keywords, identifiers, operators, literals, etc."),(0,r.kt)("li",{parentName:"ul"},"Then, the parser receives the lexical tokens and generates an ",(0,r.kt)("strong",{parentName:"li"},"Abstract Syntax Tree (AST)"),". The AST is a representation of the structure and meaning of your code. It shows how different tokens are related to each other and form expressions, statements, and blocks."),(0,r.kt)("li",{parentName:"ul"},"Finally, the interpreter converts the AST to ",(0,r.kt)("strong",{parentName:"li"},"Byte Code")," and initializes the ",(0,r.kt)("strong",{parentName:"li"},"Python Virtual Machine (PVM)")," to execute the byte code and send back the final result. Byte code is a low-level representation of your code that can be understood by the PVM. The PVM is a software component that simulates a physical machine and runs the byte code instructions."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Interpreted language vs Compiled language")),(0,r.kt)("p",null,"An interpreted language and a compiled language are two types of programming languages that differ in how they are executed by the computer. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"An interpreted language")," is a language that is ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"translated into machine code line by line"))," by another program called an interpreter. An example of an interpreted language is Python. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"A compiled language")," is a language that is ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"translated into machine code at once"))," by another program called a compiler. An example of a compiled language is C.")),(0,r.kt)("p",null,"Some of the main differences between an interpreted and a compiled language are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Speed"),": A compiled language is usually faster than an interpreted language because it does not need to be translated at run time. An interpreted language may have some performance overhead due to the interpreter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Portability"),": An interpreted language is usually more portable than a compiled language because it can run on any platform that has the interpreter installed. A compiled language may need to be recompiled for different platforms or architectures."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Error detection"),": A compiled language can detect syntax and semantic errors at compile time, which can prevent the code from running if there are any errors. An interpreted language can only detect errors at run time, which may cause unexpected behavior or crashes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Flexibility"),": An interpreted language can be more flexible than a compiled language because it can be modified or extended while the program is running. A compiled language may need to be recompiled for any changes to take effect."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Static vs Dynamic typed language?")),(0,r.kt)("p",null,"Here is a table that summarizes some of the main differences between the two types of languages:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Static Typed Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic Typed Language"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Performs type checking at compile time"),(0,r.kt)("td",{parentName:"tr",align:null},"Performs type checking at run time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Requires explicit declaration of data types for variables"),(0,r.kt)("td",{parentName:"tr",align:null},"Does not require explicit declaration of data types for variables")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can detect type errors at compile time and prevent the code from running"),(0,r.kt)("td",{parentName:"tr",align:null},"Can only detect type errors at run time and may cause unexpected behavior or crashes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Does not allow changing the data type of a variable once declared"),(0,r.kt)("td",{parentName:"tr",align:null},"Allows changing the data type of a variable at any point in the code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can be faster and more efficient than a dynamic typed language"),(0,r.kt)("td",{parentName:"tr",align:null},"May have some performance overhead due to the interpreter or the type checking process")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Static typed languages: Java, C, C++, C#, Scala, Kotlin, Rust, Go, Pascal, Swift, etc."),(0,r.kt)("li",{parentName:"ul"},"Dynamic typed languages: Python, Ruby, Perl, PHP, JavaScript, Erlang, Lisp, etc.")),(0,r.kt)("p",null,"In a ",(0,r.kt)("strong",{parentName:"p"},"strongly-typed language"),', such as Python, "1" + 2 will result in a type error since these languages don\'t allow for "type-coercion" (implicit conversion of data types). On the other hand, a ',(0,r.kt)("strong",{parentName:"p"},"weakly-typed language"),', such as Javascript, will simply output "12" as result.')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Memory Management in Python")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"memory management",src:n(61896).Z,width:"804",height:"656"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python uses a private heap space to store all its objects and data structures. The programmer can access the objects through references, which are stored in the stack."),(0,r.kt)("li",{parentName:"ul"},"Python uses reference counting to track how many references point to an object. When an object's reference count reaches zero, it is eligible for garbage collection."),(0,r.kt)("li",{parentName:"ul"},"Python has a built-in garbage collector that runs periodically and automatically. It uses a generational algorithm to scan the heap and collect unreachable objects. It also handles cyclic references using a mark-and-sweep algorithm."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"range vs xrange")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Range"),(0,r.kt)("th",{parentName:"tr",align:null},"Xrange"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A built-in function in Python 3 that returns an iterable object of numbers"),(0,r.kt)("td",{parentName:"tr",align:null},"A built-in function in Python 2 that returns an iterable object of numbers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Replaced xrange in Python 3 and behaves like xrange in Python 2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"Deprecated"))," in Python 3 and replaced by range")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Returns a range object that supports indexing, slicing, and some common operations"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an xrange object that supports indexing and some common operations, but not slicing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Uses less memory than xrange because it does not store all the numbers in memory, but generates them on demand"),(0,r.kt)("td",{parentName:"tr",align:null},"Uses more memory than range because it stores all the numbers in memory as an array of integers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Faster than xrange because it can access the numbers directly using indexing or slicing, and can be iterated over multiple times"),(0,r.kt)("td",{parentName:"tr",align:null},"Slower than range because it has to generate the numbers on demand, and can be iterated over only once"))))))}i.isMDXComponent=!0;const s={toc:[]},p="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,a.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Data Structure")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"data-structure",src:n(21099).Z,width:"1162",height:"608"})),(0,r.kt)("p",null,"Python has several built-in data types that can be used to store and manipulate different kinds of values. Some of the most common built-in data types in Python are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Numeric data types: These are data types that represent numbers, such as integers, floats, and complex numbers. Examples: ",(0,r.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"complex")),(0,r.kt)("li",{parentName:"ul"},"String data type: This is a data type that represents a sequence of characters, such as words, sentences, or text. Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"str")),(0,r.kt)("li",{parentName:"ul"},"Sequence data types: These are data types that represent ordered collections of items, such as lists, tuples, and ranges. Examples: ",(0,r.kt)("inlineCode",{parentName:"li"},"list"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"tuple"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"range")),(0,r.kt)("li",{parentName:"ul"},"Mapping data type: This is a data type that represents an unordered collection of key-value pairs, such as dictionaries. Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"dict")),(0,r.kt)("li",{parentName:"ul"},"Set data types: These are data types that represent unordered collections of unique items, such as sets and frozensets. Examples: ",(0,r.kt)("inlineCode",{parentName:"li"},"set"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"frozenset")),(0,r.kt)("li",{parentName:"ul"},"Boolean data type: This is a data type that represents a logical value, either True or False. Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"bool")),(0,r.kt)("li",{parentName:"ul"},"Binary data types: These are data types that represent sequences of bytes, such as bytes, bytearrays, and memoryviews. Examples: ",(0,r.kt)("inlineCode",{parentName:"li"},"bytes"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"bytearray"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"memoryview")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"mutable and immutable data type in python")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mutable data types"),": These are data types that can be changed after they are created. Examples are list, set, dictionary, bytearray, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Immutable data types"),": These are data types that cannot be changed after they are created. Examples are int, float, string, tuple, bool, bytes, etc."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Arrays vs lists")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Array"),(0,r.kt)("th",{parentName:"tr",align:null},"List"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Built-in"),(0,r.kt)("td",{parentName:"tr",align:null},"No, need to import"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data type"),(0,r.kt)("td",{parentName:"tr",align:null},"Homogeneous"),(0,r.kt)("td",{parentName:"tr",align:null},"Heterogeneous")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Arithmetic operations"),(0,r.kt)("td",{parentName:"tr",align:null},"Supported"),(0,r.kt)("td",{parentName:"tr",align:null},"Not supported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sequence length"),(0,r.kt)("td",{parentName:"tr",align:null},"Preferred for longer"),(0,r.kt)("td",{parentName:"tr",align:null},"Preferred for shorter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Flexibility and modification"),(0,r.kt)("td",{parentName:"tr",align:null},"Less"),(0,r.kt)("td",{parentName:"tr",align:null},"More")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import array\na = array.array('i', [1, 2, 3])\nfor i in a:\n    print(i, end=' ')    #OUTPUT: 1 2 3\na = array.array('i', [1, 2, 'string'])    #OUTPUT: TypeError: an integer is required (got type str)\na = [1, 2, 'string']\nfor i in a:\n   print(i, end=' ')    #OUTPUT: 1 2 string\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"list vs tuple vs range")),(0,r.kt)("p",null,"List, tuple and range are three built-in data types in Python that represent sequences of values. They have some similarities and differences in terms of syntax, mutability, methods and use cases. Here is a table that summarizes some of the main points to compare list, tuple and range with examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"List"),(0,r.kt)("th",{parentName:"tr",align:null},"Tuple"),(0,r.kt)("th",{parentName:"tr",align:null},"Range"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A list is an ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"ordered and mutable collection"))," of items, separated by commas and enclosed in square brackets."),(0,r.kt)("td",{parentName:"tr",align:null},"A tuple is an ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"ordered and immutable collection"))," of items, separated by commas and enclosed in parentheses."),(0,r.kt)("td",{parentName:"tr",align:null},"A range is an ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"immutable sequence of numbers")),", generated by the ",(0,r.kt)("inlineCode",{parentName:"td"},"range()")," function.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"my_list = [1, 2, 3, 'a', 'b', 'c']")),(0,r.kt)("td",{parentName:"tr",align:null},"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"my_tuple = (1, 2, 3, 'a', 'b', 'c')")),(0,r.kt)("td",{parentName:"tr",align:null},"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"my_range = range(1, 10, 2)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A list can be modified after its creation, such as adding, removing or changing items."),(0,r.kt)("td",{parentName:"tr",align:null},"A tuple cannot be modified after its creation, except by converting it to a list and back."),(0,r.kt)("td",{parentName:"tr",align:null},"A range cannot be modified after its creation, but it can be sliced or iterated over.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A list has many built-in methods to manipulate its items, such as ",(0,r.kt)("inlineCode",{parentName:"td"},"append()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"insert()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"pop()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"remove()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"sort()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"reverse()"),", etc."),(0,r.kt)("td",{parentName:"tr",align:null},"A tuple has only two built-in methods: ",(0,r.kt)("inlineCode",{parentName:"td"},"count()")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"index()"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"A range has no built-in methods, but it supports some common operations such as ",(0,r.kt)("inlineCode",{parentName:"td"},"len()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"min()"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"max()"),", in, etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A list is used to store and manipulate heterogeneous or homogeneous data that can change over time. It is also used to implement stacks and queues."),(0,r.kt)("td",{parentName:"tr",align:null},"A tuple is used to store and access heterogeneous or homogeneous data that cannot or should not change over time. It is also used to return multiple values from a function or to unpack multiple values from a sequence."),(0,r.kt)("td",{parentName:"tr",align:null},"A range is used to generate a sequence of numbers for looping or indexing purposes. It is also used to create arithmetic progressions."))))))}u.isMDXComponent=!0;const m={toc:[{value:"Types of Scope",id:"types-of-scope",level:3}]},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Scope")),(0,r.kt)("p",null,"Scope in Python is the concept that determines the visibility and accessibility of variables, functions, and objects in different parts of a program. "),(0,r.kt)("h3",{id:"types-of-scope"},"Types of Scope"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python has four types of scope: ",(0,r.kt)("strong",{parentName:"li"},"built-in"),", ",(0,r.kt)("strong",{parentName:"li"},"global"),", ",(0,r.kt)("strong",{parentName:"li"},"enclosing"),", and ",(0,r.kt)("strong",{parentName:"li"},"local"),". These are also known as ",(0,r.kt)("strong",{parentName:"li"},"LEGB")," scopes, based on their initials. The scope of a name is determined by the place where it is defined or assigned in the code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Built-in scope"),": This is the outermost scope that contains the names of all the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"built-in objects, functions, and exceptions"))," in Python. These names are available in any part of the program, without any import or declaration. For example: ",(0,r.kt)("inlineCode",{parentName:"li"},"print"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"len"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Exception"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Global scope"),": This is the scope that contains the names that are defined or assigned ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"at the top level of a module or a script")),". These names are available in any part of the module or script, as well as in any imported modules or scripts. For example: ",(0,r.kt)("inlineCode",{parentName:"li"},"x = 10"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"def foo(): ..."),", ",(0,r.kt)("inlineCode",{parentName:"li"},"import math"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Enclosing scope"),": This is the scope that contains the names that are defined or assigned ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"in a nested function or a class")),". These names are available in any inner functions or classes, but not outside the enclosing function or class. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# define an enclosing function\ndef outer():\n    # define an enclosing variable\n    x = 20\n    # define an inner function\n    def inner():\n        # access the enclosing variable\n        print(x)\n    # call the inner function\n    inner()\n# call the outer function\nouter()\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"20\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Local scope"),": This is the scope that contains the names that are defined or assigned ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"inside a function or a class")),". These names are only available inside the function or class, and not outside it. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# define a function\ndef foo():\n    # define a local variable\n    x = 30\n    # print the local variable\n    print(x)\n# call the function\nfoo()\n# try to access the local variable outside the function\nprint(x)\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"30\nNameError: name 'x' is not defined\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"modules vs packages")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Module"),(0,r.kt)("th",{parentName:"tr",align:null},"Package"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A file containing Python code"),(0,r.kt)("td",{parentName:"tr",align:null},"A directory containing modules and sub-packages")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Has a name that matches the file name without the .py extension"),(0,r.kt)("td",{parentName:"tr",align:null},"Has a name that matches the directory name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Has a namespace that matches the module name"),(0,r.kt)("td",{parentName:"tr",align:null},"Has a namespace that matches the package name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can define any number of classes, functions and variables"),(0,r.kt)("td",{parentName:"tr",align:null},"Can only expose classes, functions and variables through its ",(0,r.kt)("strong",{parentName:"td"},"init"),".py file or its sub-packages")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can be imported using ",(0,r.kt)("inlineCode",{parentName:"td"},"import <module_name>")),(0,r.kt)("td",{parentName:"tr",align:null},"Can be imported using ",(0,r.kt)("inlineCode",{parentName:"td"},"import <package_name>")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"from <package_name>")," ",(0,r.kt)("inlineCode",{parentName:"td"},"import <sub-package or module>")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Rules of Scope")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python follows a set of rules to determine which scope a name belongs to and how to resolve any name conflicts. These rules are based on the LEGB order of scopes, ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"from innermost to outermost")),"."),(0,r.kt)("li",{parentName:"ul"},"When a name is used in a program, Python first searches for it in the local scope of the current function or class. If it finds it, then it uses it. If not, then it moves to the next outer scope, which is the enclosing scope of any nested functions or classes. If it finds it there, then it uses it. If not, then it moves to the next outer scope, which is the global scope of the current module or script. If it finds it there, then it uses it. If not, then it moves to the final outer scope, which is the built-in scope of Python. If it finds it there, then it uses it. If not, then it raises a NameError exception."),(0,r.kt)("li",{parentName:"ul"},"When a name is assigned in a program, Python usually creates or updates it in the local scope of the current function or class, unless otherwise specified by keywords such as global or nonlocal. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# assign a name in the global scope\nx = 10\n\n# define a function\ndef foo():\n    # assign a name in the local scope\n    x = 20\n    # print the local name\n    print(x)\n\n# call the function\nfoo()\n\n# print the global name\nprint(x)\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"20\n10\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The global keyword can be used to create or update a name in the global scope from inside a function or class. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\n# assign a name in the global scope\n\nx = 10\n\n# define a function\n\ndef foo():\n\n    # use global keyword to access and modify global name\n\n    global x\n\n    x = 20\n\n    # print the global name\n\n    print(x)\n\n# call the function\n\nfoo()\n\n# print the global name\n\nprint(x)\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\n20\n\n20\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"nonlocal")," keyword can be used to create or update a name in the enclosing scope from inside a nested function or class. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\n# define an enclosing function\n\ndef outer():\n\n    # assign a name in the enclosing scope\n\n    x = 10\n\n    # define an inner function\n\n    def inner():\n\n        # use nonlocal keyword to access and modify enclosing name\n\n        nonlocal x\n\n        x = 20\n\n        # print the enclosing name\n\n        print(x)\n\n    # call the inner function\n\n    inner()\n\n    # print the enclosing name\n\n    print(x)\n\n# call the outer function\n\nouter()\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\n20\n\n20\n\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"namespace vs scope")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"A namespace is a collection"))," of names and objects, while ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"a scope is a region of code"))," where a name is visible and accessible. A scope can contain one or more namespaces, and a namespace can belong to one or more scopes."),(0,r.kt)("p",null,"Like scope, Python has four types of namespaces: ",(0,r.kt)("strong",{parentName:"p"},"built-in"),", ",(0,r.kt)("strong",{parentName:"p"},"global"),", ",(0,r.kt)("strong",{parentName:"p"},"enclosing"),", and ",(0,r.kt)("strong",{parentName:"p"},"local"),". These are also known as ",(0,r.kt)("strong",{parentName:"p"},"LEGB")," scopes, based on their initials."),(0,r.kt)("p",null,"You can think of a namespace as a dictionary in which the keys are the object names and the values are the objects themselves. Each key-value pair maps a name to its corresponding object. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# create a namespace dictionary\nnamespace = {}\n\n# assign some names to objects\nnamespace["x"] = 10\nnamespace["y"] = 20\nnamespace["foo"] = lambda x: x * x\n\n# print the namespace dictionary\nprint(namespace)\n\n')),(0,r.kt)("p",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{'x': 10, 'y': 20, 'foo': <function <lambda> at 0x7f9a8c0c1f70>}\n")),(0,r.kt)("p",null,"A scope is like a region or area where you can use the dictionary to access the objects. A scope determines which dictionary is searched for a name when it is used in a program."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# create a global dictionary\nglobal_dict = {"x": 10, "y": 20}\n\n# define a function\ndef foo():\n    # create a local dictionary\n    local_dict = {"x": 30, "z": 40}\n    # print the local name x\n    print(local_dict["x"])\n    # print the global name y\n    print(global_dict["y"])\n    # print the local name z\n    print(local_dict["z"])\n\n# call the function\nfoo()\n\n# print the global name x\nprint(global_dict["x"])\n\n'))))}d.isMDXComponent=!0;const k={toc:[]},h="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Functional programming in Python")),(0,r.kt)("p",null,"Functional programming is a programming paradigm that focuses on using pure functions, which are functions that have no side effects and depend only on their inputs and outputs. Python has some features that enable functional programming, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"lambda")," keyword can be used to define anonymous functions, which are useful for creating short and concise functions that can be used in higher-order functions."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"map ()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"filter ()"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"reduce ()")," functions can be used to apply a function to an iterable, select elements from an iterable based on a condition, or reduce an iterable to a single value, respectively."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"itertools")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"functools")," modules provide additional tools for functional programming, such as ",(0,r.kt)("strong",{parentName:"li"},"iterators"),", ",(0,r.kt)("strong",{parentName:"li"},"generators"),", ",(0,r.kt)("strong",{parentName:"li"},"decorators"),", ",(0,r.kt)("strong",{parentName:"li"},"partial functions"),", and more.")),(0,r.kt)("p",null,"However, Python is not a purely functional language, as it also supports other paradigms such as procedural and object-oriented programming.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"lambda in Python")),(0,r.kt)("p",null,"A lambda function in Python is a ",(0,r.kt)("strong",{parentName:"p"},"small anonymous function")," that can take any number of arguments, but can only have one expression\xb9. The syntax for a lambda function is:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lambda arguments : expression")),(0,r.kt)("p",null,"The expression is executed and the result is returned. For example, this lambda function adds 10 to the argument and returns the result:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"x = lambda a : a + 10")),(0,r.kt)("p",null,"You can print the result by calling the function with an argument:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"print(x(5))")),(0,r.kt)("p",null,"This will output 15."),(0,r.kt)("p",null,"Here are some more examples of using lambda functions in Python:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To double a list of numbers using ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),":"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"numbers = [1, 2, 3, 4, 5]")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"doubled = map(lambda x: x * 2, numbers)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"print(list(doubled))")),(0,r.kt)("p",{parentName:"li"},"This will output ",(0,r.kt)("inlineCode",{parentName:"p"},"[2, 4, 6, 8, 10]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To filter out odd numbers from a list using ",(0,r.kt)("inlineCode",{parentName:"p"},"filter"),":"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"numbers = [1, 2, 3, 4, 5]")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"even = filter(lambda x: x % 2 == 0, numbers)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"print(list(even))")),(0,r.kt)("p",{parentName:"li"},"This will output ",(0,r.kt)("inlineCode",{parentName:"p"},"[2, 4]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To sort a list of tuples by the second element using ",(0,r.kt)("inlineCode",{parentName:"p"},"sorted"),":"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"tuples = [(1, 'a'), (3, 'c'), (2, 'b')]")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sorted_by_second = sorted(tuples, key=lambda x: x[1])")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"print(sorted_by_second)")),(0,r.kt)("p",{parentName:"li"},"This will output ",(0,r.kt)("inlineCode",{parentName:"p"},"[(1, 'a'), (2, 'b'), (3, 'c')]"),".")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"iterators in Python")),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"iterator")," in Python is an object that allows you to ",(0,r.kt)("strong",{parentName:"p"},"iterate over iterable objects")," like ",(0,r.kt)("strong",{parentName:"p"},"lists"),", ",(0,r.kt)("strong",{parentName:"p"},"tuples"),", ",(0,r.kt)("strong",{parentName:"p"},"dicts"),", and ",(0,r.kt)("strong",{parentName:"p"},"sets"),". The Python iterators object is initialized using the ",(0,r.kt)("strong",{parentName:"p"},"iter()")," method. It uses the ",(0,r.kt)("strong",{parentName:"p"},"next()")," method for iteration."),(0,r.kt)("p",null,"Python iterators implement the ",(0,r.kt)("strong",{parentName:"p"},"iterator protocol"),", which consists of the methods ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"iter"),"()")," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"next"),"()"),". The ",(0,r.kt)("strong",{parentName:"p"},"iter"),"() method returns the iterator object itself, and the ",(0,r.kt)("strong",{parentName:"p"},"next"),"() method returns the next item in the sequence."),(0,r.kt)("p",null,"You can also create your own iterators by defining a class that implements the iterator protocol. You can use ",(0,r.kt)("strong",{parentName:"p"},"yield")," to create generator iterators, which are functions that produce values on demand. You can also use ",(0,r.kt)("strong",{parentName:"p"},"generator expressions")," to create iterators in a concise way."),(0,r.kt)("p",null,"Here are some examples of how to use iterators in Python:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To iterate over a list using an iterator, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"mylist = [1, 2, 3]\nmyiter = iter(mylist) # converts iterable object to an iterator\nprint(next(myiter)) # 1\nprint(next(myiter)) # 2\nprint(next(myiter)) # 3\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a custom iterator that returns numbers from 1 to 10, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MyNumbers:\n    def __init__(self):\n        self.n = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.n < 10:\n            self.n += 1\n            return self.n\n        else:\n            raise StopIteration\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nfor x in myiter:\n    print(x) # 1, 2, ..., 10\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a generator iterator that yields Fibonacci numbers, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def fib():\n    a = 0\n    b = 1\n    while True:\n        yield a # pause & pass the value to the next function\n        a, b = b, a + b\n\nmygen = fib()\nprint(next(mygen)) # 0\nprint(next(mygen)) # 1\nprint(next(mygen)) # 1\nprint(next(mygen)) # 2\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create an iterator using a generator expression, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"mygen = (x * x for x in range(5))\nprint(next(mygen)) # 0\nprint(next(mygen)) # 1\nprint(next(mygen)) # 4\nprint(next(mygen)) # 9\nprint(next(mygen)) # 16\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"generator in Python")),(0,r.kt)("p",null,"A generator in Python is a type of function that ",(0,r.kt)("strong",{parentName:"p"},"produces a sequence of values")," when iterated over. Generators are useful when we want to produce a large sequence of values, but we don't want to store all of them in memory at once."),(0,r.kt)("p",null,"A generator function is defined like a normal function, but it uses the ",(0,r.kt)("strong",{parentName:"p"},"yield keyword")," instead of the return keyword to produce a value. The yield keyword ",(0,r.kt)("strong",{parentName:"p"},"pauses the execution")," of the function and ",(0,r.kt)("strong",{parentName:"p"},"returns a generator object")," that can be iterated over to get the next value."),(0,r.kt)("p",null,"A generator expression is a concise way to create a generator object. It is similar to a list comprehension, but it uses parentheses instead of brackets. A generator expression produces values on demand, one at a time, when iterated over."),(0,r.kt)("p",null,"Here are some examples of how to use generators and yield in Python:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a generator function that yields the squares of numbers from 0 to n, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def squares(n):\n    for i in range(n):\n        yield i * i\n\nmygen = squares(5)\nprint(next(mygen)) # 0\nprint(next(mygen)) # 1\nprint(next(mygen)) # 4\nprint(next(mygen)) # 9\nprint(next(mygen)) # 16\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a generator expression that yields the cubes of numbers from 0 to n, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"mygen = (i * i * i for i in range(5))\nprint(next(mygen)) # 0\nprint(next(mygen)) # 1\nprint(next(mygen)) # 8\nprint(next(mygen)) # 27\nprint(next(mygen)) # 64\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"iterable vs iterator vs generator")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Term"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"),(0,r.kt)("th",{parentName:"tr",align:null},"Creation"),(0,r.kt)("th",{parentName:"tr",align:null},"State"),(0,r.kt)("th",{parentName:"tr",align:null},"Values"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Iterable"),(0,r.kt)("td",{parentName:"tr",align:null},"An object that can be iterated over"),(0,r.kt)("td",{parentName:"tr",align:null},"List, string, dictionary, set"),(0,r.kt)("td",{parentName:"tr",align:null},"Any object with an ",(0,r.kt)("strong",{parentName:"td"},"iter")," method"),(0,r.kt)("td",{parentName:"tr",align:null},"Does not have a state"),(0,r.kt)("td",{parentName:"tr",align:null},"Stores all values in memory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Iterator"),(0,r.kt)("td",{parentName:"tr",align:null},"An object that represents a stream of data"),(0,r.kt)("td",{parentName:"tr",align:null},"Object returned by iter function, generator object"),(0,r.kt)("td",{parentName:"tr",align:null},"Any object with ",(0,r.kt)("strong",{parentName:"td"},"iter")," and ",(0,r.kt)("strong",{parentName:"td"},"next")," methods"),(0,r.kt)("td",{parentName:"tr",align:null},"Has a state that remembers the current position"),(0,r.kt)("td",{parentName:"tr",align:null},"Produces one value at a time on demand")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Generator"),(0,r.kt)("td",{parentName:"tr",align:null},"A special type of iterator that is created by using a function with yield or a generator expression"),(0,r.kt)("td",{parentName:"tr",align:null},"Function with yield, generator expression"),(0,r.kt)("td",{parentName:"tr",align:null},"Function with yield or generator expression"),(0,r.kt)("td",{parentName:"tr",align:null},"Saves the state of the local variables every time yield pauses the loop"),(0,r.kt)("td",{parentName:"tr",align:null},"Produces one value at a time on demand"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"decorator")),(0,r.kt)("p",null,"Decorators are useful when you want to ",(0,r.kt)("strong",{parentName:"p"},"add some functionality")," to an existing function or class without changing its source code or subclassing it. Decorators can also help you to ",(0,r.kt)("strong",{parentName:"p"},"avoid code duplication")," and make your code more readable and maintainable."),(0,r.kt)("p",null,"The syntax for using decorators in Python is simple: you just need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," symbol followed by the name of the decorator function before the definition of the function or class that you want to decorate. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@make_pretty\ndef ordinary():\n    print("I am ordinary")\n\n# is equivalent to\n\ndef ordinary():\n    print("I am ordinary")\n\nordinary = make_pretty(ordinary)\n')),(0,r.kt)("p",null,"Here, make_pretty is a decorator function that takes an ordinary function as an argument and returns a modified version of it. The @ symbol is a syntactic sugar that makes the code more concise and elegant."),(0,r.kt)("p",null,"Decorators can also take arguments, which can be passed after the decorator name in parentheses. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@repeat(3)\ndef greet(name):\n    print(f"Hello, {name}")\n\n# is equivalent to\n\ndef greet(name):\n    print(f"Hello, {name}")\n\ngreet = repeat(3)(greet)\n')),(0,r.kt)("p",null,"Here, repeat is a decorator function that takes a number as an argument and returns another decorator function that repeats the original function that many times. The parentheses after repeat indicate that we are passing 3 as an argument to the repeat decorator."),(0,r.kt)("p",null,"Decorators can also be applied to classes, which can modify their methods or attributes. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@singleton\nclass Foo:\n    pass\n\n# is equivalent to\n\nclass Foo:\n    pass\n\nFoo = singleton(Foo)\n")),(0,r.kt)("p",null,"Here, singleton is a decorator function that takes a class as an argument and returns a modified version of it that ensures only one instance of the class can be created. The @ symbol indicates that we are applying the singleton decorator to the Foo class.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"partial function in python")),(0,r.kt)("p",null,"A partial function in Python is a function that allows you to ",(0,r.kt)("strong",{parentName:"p"},"fix a certain number of arguments")," of another function and generate a new function. Partial functions are useful when you want to ",(0,r.kt)("strong",{parentName:"p"},"derive specialized functions")," from general functions and therefore help you to ",(0,r.kt)("strong",{parentName:"p"},"reuse your code"),"."),(0,r.kt)("p",null,"Here are some examples of how to use partial functions in Python:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a partial function that adds 10 to any number, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from functools import partial\n\ndef add(a, b):\n    return a + b\n\nadd_ten = partial(add, 10)\n\nprint(add_ten(5)) # 15\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a partial function that greets a person with a specified message, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from functools import partial\n\ndef greet(message, name):\n    return f"{message}, {name}!"\n\nhello = partial(greet, "Hello")\n\nprint(hello("Alice")) # Hello, Alice!\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a partial function that calculates the power of a number with a fixed exponent, you can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from functools import partial\n\ndef power(base, exponent):\n    return base ** exponent\n\nsquare = partial(power, exponent=2)\n\nprint(square(4)) # 16\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"*args vs **kwargs")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"*args")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"**kwargs")," are special symbols in Python that allow you to ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"pass a variable number of arguments or keyword arguments to a function")),". They are useful when you want to create flexible and generic functions that can handle different types and numbers of inputs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"*args")," stands for ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"non-keyword arguments")),". It is used to pass a variable-length argument list to a function. The function can then access the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"arguments as a tuple")),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"**kwargs")," stands for ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"keyword arguments")),". It is used to pass a variable-length keyword argument dictionary to a function. The function can then access the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"arguments as a dictionary")),"."))),(0,r.kt)("p",null,"Here are some examples of how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"*args")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"**kwargs")," in Python:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a function that can sum any number of numbers, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"*args"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def my_sum(*args):\n    result = 0\n    for x in args:\n        result += x\n    return result\n\nprint(my_sum(1, 2, 3)) # 6\nprint(my_sum(4, 5)) # 9\nprint(my_sum(10)) # 10\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a function that can print any number of key-value pairs, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def my_print(**kwargs):\n    for key, value in kwargs.items():\n        print(f"{key} = {value}")\n\nmy_print(name="Alice", age=25) # name = Alice, age = 25\nmy_print(color="red", shape="circle") # color = red, shape = circle\nmy_print(country="Vietnam") # country = Vietnam\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To create a function that can accept both positional and keyword arguments, you can use both ",(0,r.kt)("inlineCode",{parentName:"li"},"*args")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def my_func(*args, **kwargs):\n    print(f\"args = {args}\")\n    print(f\"kwargs = {kwargs}\")\n\nmy_func(1, 2, 3, name=\"Alice\", age=25)\n# args = (1, 2, 3)\n# kwargs = {'name': 'Alice', 'age': 25}\n"))))}g.isMDXComponent=!0;const y={},f="Python Zero To Hero",N={unversionedId:"django/intro",id:"django/intro",title:"Python Zero To Hero",description:"\x3c!--",source:"@site/docs/django/intro.md",sourceDirName:"django",slug:"/django/intro",permalink:"/devviews/interviews/django/intro",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/django/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"djangoInterviewSidebar",previous:{title:"Django Interviews",permalink:"/devviews/interviews/django/django-interview-questions-answers-junior"}},b={},x=[{value:"How Python Works",id:"how-python-works",level:3},{value:"DataStructures",id:"datastructures",level:3},{value:"Scope",id:"scope",level:3},{value:"Functional",id:"functional",level:3}],w={toc:x},v="wrapper";function T(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,a.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-zero-to-hero"},"Python Zero To Hero"),(0,r.kt)("h2",{id:""}),(0,r.kt)("h3",{id:"how-python-works"},"How Python Works"),(0,r.kt)(i,{mdxType:"HowPythonWorks"}),(0,r.kt)("h3",{id:"datastructures"},"DataStructures"),(0,r.kt)(u,{mdxType:"DataStructures"}),(0,r.kt)("h3",{id:"scope"},"Scope"),(0,r.kt)(d,{mdxType:"Scope"}),(0,r.kt)("h3",{id:"functional"},"Functional"),(0,r.kt)(g,{mdxType:"Functional"}))}T.isMDXComponent=!0},21099:function(e,t,n){t.Z=n.p+"assets/images/data-structure-b70c3b42128062a7cdb332502a44cd5b.png"},33019:function(e,t,n){t.Z=n.p+"assets/images/how-python-works-94a1423c69d03b75a4c738e3a41371e1.png"},61896:function(e,t,n){t.Z=n.p+"assets/images/memory-management-4e100bcb31ebdd4e24c475278a405204.png"}}]);