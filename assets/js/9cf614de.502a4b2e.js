"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5143],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return v}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,v=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return n?i.createElement(v,s(s({ref:t},p),{},{components:n})):i.createElement(v,s({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},17745:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return o},toc:function(){return c}});var i=n(83117),r=(n(67294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",slug:"/reactnative-flatlist-vs-sessionlist",tags:["Basic React Native Interviews"]},s=void 0,o={unversionedId:"react-native/basic/flatlist-vs-sessionlist",id:"react-native/basic/flatlist-vs-sessionlist",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/react-native/basic/flatlist-vs-sessionlist.md",sourceDirName:"react-native/basic",slug:"/reactnative-flatlist-vs-sessionlist",permalink:"/devviews/interviews/reactnative-flatlist-vs-sessionlist",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/react-native/basic/flatlist-vs-sessionlist.md",tags:[{label:"Basic React Native Interviews",permalink:"/devviews/interviews/tags/basic-react-native-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",slug:"/reactnative-flatlist-vs-sessionlist",tags:["Basic React Native Interviews"]},sidebar:"reactnativeInterviewSidebar",previous:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/reactnative-flatlist-vs-listview"},next:{title:"Memory leak Issue",permalink:"/devviews/interviews/memory-leak"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nFlatList vs SessionList in react native?")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn React Native, there are two main types of components that are commonly used to support list rendering:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FlatList"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," is a high-performance component that is suitable for rendering large lists of data. It provides a lot of flexibility and customization options, such as support for scroll events, item separators, and more. In addition, it uses a virtualized list to optimize performance by rendering only the visible items on the screen."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SectionList"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionList")," is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList"),", but provides support for rendering data in nested sections. It allows you to group your data into sections and render each section as a separate list, with the ability to specify a header and/or footer for each section."),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionList")," can be used to render dynamic lists of data with high performance. However, ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," is more suitable for rendering large, flat lists without nested sections, while ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionList")," is best for rendering nested data with sections, such as products by category or messages by date.")))}d.isMDXComponent=!0}}]);