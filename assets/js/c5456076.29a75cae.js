"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8087],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return k}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?i.createElement(k,a(a({ref:n},c),{},{components:t})):i.createElement(k,a({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},42461:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var i=t(83117),r=(t(67294),t(3905));const o={sidebar_position:1e3,sidebar_label:"Apollo Link & Link Chain",title:"What Is Apollo Link & Link Chain",slug:"/what-is-apollo-link--link-chain",tags:["Basic Apollo GraphQL Interviews"]},a=void 0,l={unversionedId:"apollographql/basic/link-chain",id:"apollographql/basic/link-chain",title:"What Is Apollo Link & Link Chain",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/apollographql/basic/link-chain.md",sourceDirName:"apollographql/basic",slug:"/what-is-apollo-link--link-chain",permalink:"/devviews/interviews/what-is-apollo-link--link-chain",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/apollographql/basic/link-chain.md",tags:[{label:"Basic Apollo GraphQL Interviews",permalink:"/devviews/interviews/tags/basic-apollo-graph-ql-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Apollo Link & Link Chain",title:"What Is Apollo Link & Link Chain",slug:"/what-is-apollo-link--link-chain",tags:["Basic Apollo GraphQL Interviews"]},sidebar:"apolloInterviewSidebar",next:{title:"Persisted Queries Link",permalink:"/devviews/interviews/persisted-query-link-apollojs"}},p={},s=[{value:"Example About Link",id:"example-about-link",level:4}],c={toc:s},u="wrapper";function d(e){let{components:n,...o}=e;return(0,r.kt)(u,(0,i.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat Is Apollo Link & Link Chain?")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn Apollo Client, "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Link")," represents a ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Node"))," (or a middleware) "),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Link")," chain is lik a ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"pipeline of Nodes"))," (or middleware functions) ")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Apollo Link Chain",src:t(71458).Z,width:"754",height:"109"})),(0,r.kt)("p",null," They are used to modify GraphQL operations (queries, mutations, and subscriptions) as they pass through the pipeline. Each ",(0,r.kt)("inlineCode",{parentName:"p"},"Link")," in the pipeline has the ability to modify the operation in some way, either by adding headers, logging information, or modifying the operation itself. This allows developers to build a custom pipeline of ",(0,r.kt)("inlineCode",{parentName:"p"},"Links")," that fit the specific needs of their application. ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"The ",(0,r.kt)("inlineCode",{parentName:"em"},"Link")," concept is inspired by the concept of middleware"))," in web frameworks like Express.js, which allows developers to add layers of functionality to their applications."),(0,r.kt)("h4",{id:"example-about-link"},"Example About Link"),(0,r.kt)("p",null," ",(0,r.kt)("inlineCode",{parentName:"p"},"forward")," is like ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," function in Express.js passes data to next Link in the chain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ApolloLink } from '@apollo/client';\n\nconst roundTripLink = new ApolloLink((operation, forward) => {\n  // Called before operation is sent to server\n  operation.setContext({ start: new Date() });\n\n  return forward(operation).map((data) => {\n    // Called after server responds\n    const time = new Date() - operation.getContext().start;\n    console.log(`Operation ${operation.operationName} took ${time} to complete`);\n    return data;\n  });\n});\n"))))}d.isMDXComponent=!0},71458:function(e,n,t){n.Z=t.p+"assets/images/linkchain-adda4d91bebf2b2c9d811e6e3120d55b.png"}}]);