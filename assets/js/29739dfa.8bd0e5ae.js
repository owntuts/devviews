"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[3209],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),v=i,f=c["".concat(a,".").concat(v)]||c[v]||d[v]||s;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=v;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},6488:function(e,t,n){n.r(t),n.d(t,{assets:function(){return a},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(3117),i=(n(7294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Query vs ResolveField",title:"Query vs ResolveField In NestJS?",slug:"/query-vs-resolvefield-nestjs",tags:["NestJS Interviews"]},o=void 0,l={unversionedId:"nodejs/nestjs/basic/query-vs-resolvefield",id:"nodejs/nestjs/basic/query-vs-resolvefield",title:"Query vs ResolveField In NestJS?",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/nodejs/nestjs/basic/query-vs-resolvefield.md",sourceDirName:"nodejs/nestjs/basic",slug:"/query-vs-resolvefield-nestjs",permalink:"/devviews/interviews/query-vs-resolvefield-nestjs",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nestjs/basic/query-vs-resolvefield.md",tags:[{label:"NestJS Interviews",permalink:"/devviews/interviews/tags/nest-js-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Query vs ResolveField",title:"Query vs ResolveField In NestJS?",slug:"/query-vs-resolvefield-nestjs",tags:["NestJS Interviews"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Query Example",permalink:"/devviews/interviews/query-example-nestjs"},next:{title:"Routing",permalink:"/devviews/interviews/routing-in-nestjs"}},a={},u=[{value:"Example",id:"example",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nPlease explain the difference between ",(0,i.kt)("inlineCode",{parentName:"p"},"@Query")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@ResolveField")," in NextJS GraphQL App?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"@ResolveField()"),' is like "sub-query", it is used for adding relationships reference.'),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"  You have a query like this"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{5}"},"query {\n    author {\n        firstName\n        lastName\n        posts {\n            title\n            description\n        }\n    }\n}\n")),(0,i.kt)("p",null,"  The posts field will be reference to independent ",(0,i.kt)("inlineCode",{parentName:"p"},"BlogEntity")," type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{9}","{9}":!0},"@Resolver('Author')\nexport class AuthorsResolver {\n    @Query()\n    async author(@Args('id') id: number) {\n      return this.authorsService.findOneById(id);\n    }\n\n    // the field `posts` references to `BlogEntity` type\n    @ResolveField(returns => [BlogEntity])\n    // `@Parent()` is reference to current classs\n    async posts(@Parent() author) {\n      const { id } = author;\n      return this.postsService.findAll({ authorId: id });\n    }\n}\n"))))}d.isMDXComponent=!0}}]);