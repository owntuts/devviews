"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[1049],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=o(a),h=i,c=m["".concat(s,".").concat(h)]||m[h]||d[h]||r;return a?n.createElement(c,l(l({ref:t},u),{},{components:a})):n.createElement(c,l({ref:t},u))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3404:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return o}});var n=a(3117),i=(a(7294),a(3905));const r={sidebar_position:3,sidebar_label:"Heap",title:"Heap Data Structure",slug:"/heap-data-structure",tags:["Tree Data Structures"]},l=void 0,p={unversionedId:"data-structures/tree/heap",id:"data-structures/tree/heap",title:"Heap Data Structure",description:"First Views of A Heap",source:"@site/tutorials/data-structures/tree/heap.md",sourceDirName:"data-structures/tree",slug:"/heap-data-structure",permalink:"/devviews/tutorials/heap-data-structure",draft:!1,tags:[{label:"Tree Data Structures",permalink:"/devviews/tutorials/tags/tree-data-structures"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Heap",title:"Heap Data Structure",slug:"/heap-data-structure",tags:["Tree Data Structures"]},sidebar:"dataStructureSidebar",next:{title:"Trie",permalink:"/devviews/tutorials/trie-data-structure"}},s={},o=[{value:"First Views of A Heap",id:"first-views-of-a-heap",level:3},{value:"What Is A Heap?",id:"what-is-a-heap",level:3},{value:"How To Build A Heap?",id:"how-to-build-a-heap",level:3},{value:"Heapify Algorithm Explanation",id:"heapify-algorithm-explanation",level:3},{value:"Heapify Implementation Note",id:"heapify-implementation-note",level:3},{value:"Heapify Implementation",id:"heapify-implementation",level:3},{value:"Max Heap Tree Building",id:"max-heap-tree-building",level:4},{value:"Max Heapify",id:"max-heapify",level:4}],u={toc:o},m="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"first-views-of-a-heap"},"First Views of A Heap"),(0,i.kt)("p",null,"The following is a heap of stones. The rocks underneath is bigger than the rock on top. This is a case of min-heap."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Heap data structure demo",src:a(3244).Z,width:"587",height:"238"})," "),(0,i.kt)("h3",{id:"what-is-a-heap"},"What Is A Heap?"),(0,i.kt)("p",null,":::tip Definition"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Max Heap data structure"),": is a complete binary tree in which any given node is always ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"greater"))," than its child nodes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Min Heap data structure"),": is a complete binary tree in which any given node is always ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"smaller"))," than its child nodes.\n:::")),(0,i.kt)("h3",{id:"how-to-build-a-heap"},"How To Build A Heap?"),(0,i.kt)("p",null,":::note Problem\nGiven an array: ",(0,i.kt)("inlineCode",{parentName:"p"},"A = [3, 9, 2, 1, 4, 5]"),", How to build a ",(0,i.kt)("strong",{parentName:"p"},"max-heap")," from that array?\n:::"),(0,i.kt)("p",null,":::note Solution\n",(0,i.kt)("img",{alt:"heap array demo",src:a(7501).Z,width:"532",height:"147"})),(0,i.kt)("p",null,"First, View the array as a tree in which if a node is ",(0,i.kt)("inlineCode",{parentName:"p"},"A[i]")," then it's children will be ",(0,i.kt)("inlineCode",{parentName:"p"},"A[2*i + 1]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"A[2i + 2]"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"heap tree demo",src:a(3733).Z,width:"374",height:"301"})),(0,i.kt)("p",null,"Then, Heapify the above tree. Heapify is a proccess of bringing smaller/larger items upwards (see below).\n:::"),(0,i.kt)("h3",{id:"heapify-algorithm-explanation"},"Heapify Algorithm Explanation"),(0,i.kt)("p",null,"Let's call:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"i")," is the Phase, runs from ",(0,i.kt)("inlineCode",{parentName:"li"},"n/2 - 1")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"heapify")," is the Heapify function.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"First Phase"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"i")," starts at ",(0,i.kt)("inlineCode",{parentName:"li"},"2 = n/2 - 1"),".\n",(0,i.kt)("img",{alt:"Heapify array demo phase 1",src:a(7585).Z,width:"526",height:"80"})),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"heapify")," does:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"marks ",(0,i.kt)("inlineCode",{parentName:"li"},"A[i]")," as largest elelment, "),(0,i.kt)("li",{parentName:"ul"},"looks at children of ",(0,i.kt)("inlineCode",{parentName:"li"},"A[i]"),", if they're larger than ",(0,i.kt)("inlineCode",{parentName:"li"},"A[i]"),", it will re-mark the new largest and  swap ",(0,i.kt)("inlineCode",{parentName:"li"},"A[i]")," with the new largest value."),(0,i.kt)("li",{parentName:"ul"},"Then does the same thing (recursively) to the new marked position.")))),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Heapify demo phase 1",src:a(6821).Z,width:"872",height:"301"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Second Phase"),": Similar to First phase but ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," at ",(0,i.kt)("inlineCode",{parentName:"p"},"1")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Heapify array demo phase 2",src:a(5061).Z,width:"526",height:"80"})),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Heapify demo phase 1",src:a(8234).Z,width:"474",height:"271"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Final Phase"),": Similar to First phase but ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," at ",(0,i.kt)("inlineCode",{parentName:"p"},"0")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Heapify array demo phase 3",src:a(2861).Z,width:"526",height:"80"})),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Heapify demo phase 1",src:a(4870).Z,width:"807",height:"621"})))),(0,i.kt)("h3",{id:"heapify-implementation-note"},"Heapify Implementation Note"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The phase ",(0,i.kt)("inlineCode",{parentName:"li"},"i")," (runs from ",(0,i.kt)("inlineCode",{parentName:"li"},"n/2 - 1")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"): ",(0,i.kt)("inlineCode",{parentName:"li"},"for (int i = n/2 - 1; i >= 0; i--)")),(0,i.kt)("li",{parentName:"ul"},"Heapify start from node ",(0,i.kt)("inlineCode",{parentName:"li"},"i"),", comes down and do heapify again => so it's call itself (recursive function).")),(0,i.kt)("h3",{id:"heapify-implementation"},"Heapify Implementation"),(0,i.kt)("h4",{id:"max-heap-tree-building"},"Max Heap Tree Building"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void build_maxheap (vector<int> &A)\n  {\n    int n = A.size();\n    for(int i = n/2 - 1 ; i >= 0 ; i--)\n    {\n      max_heapify (A, i) ;\n    }\n  }\n")),(0,i.kt)("h4",{id:"max-heapify"},"Max Heapify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void max_heapify(vector<int> &hT, int i)\n{\n  int n = hT.size();\n  int largest = i; // mark i as largest\n  int l = 2 * i + 1;\n  int r = 2 * i + 2;\n  // review the children & re-mark largest if needed\n  if (l < n && hT[l] > hT[largest])\n    largest = l;\n  if (r < n && hT[r] > hT[largest])\n    largest = r;\n\n  if (largest != i)\n  {\n    swap(&hT[i], &hT[largest]);\n    // do heapify recursively on new marked position\n    heapify(hT, largest); \n  }\n}\n\nvoid swap(int *a, int *b)\n{\n  int temp = *b;\n  *b = *a;\n  *a = temp;\n}\n")))}d.isMDXComponent=!0},7501:function(e,t,a){t.Z=a.p+"assets/images/heap-array-demo-f93c3f4a7813da30e935eb0619c71731.svg"},3244:function(e,t,a){t.Z=a.p+"assets/images/heap-demo-c82708a44c5ab69c25d64afdcaf55a64.svg"},3733:function(e,t,a){t.Z=a.p+"assets/images/heap-tree-e0269675f82a998af19ed960504c1bd8.svg"},7585:function(e,t,a){t.Z=a.p+"assets/images/heapify-array-phase-1-e712396ebdee91a2e23c8365262315a3.svg"},5061:function(e,t,a){t.Z=a.p+"assets/images/heapify-array-phase-2-e745c04c9352f0438d73ee411541df67.svg"},2861:function(e,t,a){t.Z=a.p+"assets/images/heapify-array-phase-3-845f8d0b2828800f7570c30e38224806.svg"},6821:function(e,t,a){t.Z=a.p+"assets/images/heapify-phase-1-39c444ee64f07c9f0679ecde09aa8c43.svg"},8234:function(e,t,a){t.Z=a.p+"assets/images/heapify-phase-2-09fde91bf58642ba9619605bb0e9a3db.svg"},4870:function(e,t,a){t.Z=a.p+"assets/images/heapify-phase-3-700ff99da103e297a0320f7a6e4235fe.svg"}}]);