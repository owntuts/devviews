"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8914],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return v}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,v=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(v,o(o({ref:n},p),{},{components:t})):r.createElement(v,o({ref:n},p))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},31120:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c}});var r=t(83117),i=(t(67294),t(3905));const a={sidebar_position:1e3,sidebar_label:"init vs readonly",title:"init vs readonly In C# (C-Sharp)",slug:"/init-vs-readonly-c-sharp",tags:["Basic C# Interviews"]},o=void 0,l={unversionedId:"c-sharp/basic/int-vs-readonly",id:"c-sharp/basic/int-vs-readonly",title:"init vs readonly In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/int-vs-readonly.md",sourceDirName:"c-sharp/basic",slug:"/init-vs-readonly-c-sharp",permalink:"/devviews/interviews/init-vs-readonly-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/int-vs-readonly.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"init vs readonly",title:"init vs readonly In C# (C-Sharp)",slug:"/init-vs-readonly-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Initialization",permalink:"/devviews/interviews/initialization-c-sharp"},next:{title:"new vs override",permalink:"/devviews/interviews/new-vs-override"}},s={},c=[{value:"Example of <code>init</code> in constructor",id:"example-of-init-in-constructor",level:4},{value:"Example of <code>init</code> in object initializer",id:"example-of-init-in-object-initializer",level:4},{value:"Example of <code>readonly</code> in constructor",id:"example-of-readonly-in-constructor",level:4}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"init")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," in c#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nBoth ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," are used to ensure that a field's value can only be initialized once and cannot be changed afterwards (",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"immutable")),"). However, there are some differences between the two modifiers."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Modifier"),(0,i.kt)("th",{parentName:"tr",align:null},"Applicable to"),(0,i.kt)("th",{parentName:"tr",align:null},"Value Assigned"),(0,i.kt)("th",{parentName:"tr",align:null},"Value Changeable"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"init")),(0,i.kt)("td",{parentName:"tr",align:null},"Properties and fields"),(0,i.kt)("td",{parentName:"tr",align:null},"During object construction & object initializer only"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"readonly")),(0,i.kt)("td",{parentName:"tr",align:null},"Fields only"),(0,i.kt)("td",{parentName:"tr",align:null},"During object construction only"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h4",{id:"example-of-init-in-constructor"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"init")," in constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class Person\n{\n    public string Name { get; init; }\n\n    // set variable in constructor\n    public Person(string name)\n    {\n        Name = name;\n    }\n}\n\nvar person = new Person("John");\nperson.Name = "Jane"; // This will cause a compile-time error\n')),(0,i.kt)("h4",{id:"example-of-init-in-object-initializer"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"init")," in object initializer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class Person\n{\n  public string Name {get; init;}\n}\n\nvar person = new Person\n{\n  // set variable in object initializer\n  Name = "Jane"\n}\n')),(0,i.kt)("h4",{id:"example-of-readonly-in-constructor"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"readonly")," in constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class Circle\n{\n    private readonly double _radius;\n\n    // set variable in constructor, can't be change later\n    public Circle(double radius)\n    {\n        _radius = radius;\n    }\n\n    public double CalculateArea()\n    {\n        _radius = 1; // result in error\n    }\n}\n"))))}d.isMDXComponent=!0}}]);