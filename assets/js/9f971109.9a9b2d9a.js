"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[9845,3578,300,998,9460,9655,2323,4890],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,k=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4312:function(e,t,n){n.d(t,{ZP:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const i={toc:[]},o="wrapper";function l(e){let{components:t,...n}=e;return(0,a.kt)(o,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"interview"},n.level&&(0,a.kt)("span",{className:"level"},n.level),n.children))}l.isMDXComponent=!0},4486:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return m},default:function(){return N},frontMatter:function(){return p},metadata:function(){return k},toc:function(){return g}});var r=n(3117),a=(n(7294),n(3905)),i=(n(4312),n(4089)),o=n(9153),l=n(4212),s=n(3096),c=n(7290),d=n(8230),u=n(1838);const p={sidebar_position:3,id:"docker-from-zero-hero",sidebar_label:"Docker Interviews",title:"Docker Zero To Hero",tags:["Docker Interviews"]},m="Docker Zero To Hero",k={unversionedId:"docker/docker-from-zero-hero",id:"docker/docker-from-zero-hero",title:"Docker Zero To Hero",description:"Container vs VirtualMachine",source:"@site/docs/docker/1.intro.md",sourceDirName:"docker",slug:"/docker/docker-from-zero-hero",permalink:"/devviews/interviews/docker/docker-from-zero-hero",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/1.intro.md",tags:[{label:"Docker Interviews",permalink:"/devviews/interviews/tags/docker-interviews"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"docker-from-zero-hero",sidebar_label:"Docker Interviews",title:"Docker Zero To Hero",tags:["Docker Interviews"]},sidebar:"dockerInterviewSidebar",previous:{title:"Dockerfile-commands",permalink:"/devviews/interviews/docker/hero/dockerfile-commands"}},h={},g=[{value:"Container vs VirtualMachine",id:"container-vs-virtualmachine",level:3},{value:"Docker Architecture",id:"docker-architecture",level:3},{value:"Docker Build Pipeline",id:"docker-build-pipeline",level:3},{value:"Docker Building Stages",id:"docker-building-stages",level:3},{value:"RUN vs CMD vs ENTRYPOINT",id:"run-vs-cmd-vs-entrypoint",level:3},{value:"Docker Compose Declaration",id:"docker-compose-declaration",level:3},{value:"Dockerfile Commands",id:"dockerfile-commands",level:3}],f={toc:g},v="wrapper";function N(e){let{components:t,...n}=e;return(0,a.kt)(v,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"docker-zero-to-hero"},"Docker Zero To Hero"),(0,a.kt)("h3",{id:"container-vs-virtualmachine"},"Container vs VirtualMachine"),(0,a.kt)(i.default,{mdxType:"ContainerVsVirtualMachine"}),(0,a.kt)("h3",{id:"docker-architecture"},"Docker Architecture"),(0,a.kt)(c.default,{mdxType:"Architecture"}),(0,a.kt)("h3",{id:"docker-build-pipeline"},"Docker Build Pipeline"),(0,a.kt)(d.default,{mdxType:"BuildPipeline"}),(0,a.kt)("h3",{id:"docker-building-stages"},"Docker Building Stages"),(0,a.kt)(u.default,{mdxType:"BuildingStages"}),(0,a.kt)("h3",{id:"run-vs-cmd-vs-entrypoint"},"RUN vs CMD vs ENTRYPOINT"),(0,a.kt)(s.default,{mdxType:"RUNCMDENTRYPOINT"}),(0,a.kt)("h3",{id:"docker-compose-declaration"},"Docker Compose Declaration"),(0,a.kt)(o.default,{mdxType:"DockerCompose"}),(0,a.kt)("h3",{id:"dockerfile-commands"},"Dockerfile Commands"),(0,a.kt)(l.default,{mdxType:"DockerfileCommands"}))}N.isMDXComponent=!0},3096:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"RUN vs CMD vs ENTRYPOINT",title:"RUN vs CMD vs ENTRYPOINT",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/RUN-CMD-ENTRYPOINT",id:"docker/hero/RUN-CMD-ENTRYPOINT",title:"RUN vs CMD vs ENTRYPOINT",description:"RUN vs CMD vs ENTRYPOINT",source:"@site/docs/docker/hero/RUN-CMD-ENTRYPOINT.md",sourceDirName:"docker/hero",slug:"/docker/hero/RUN-CMD-ENTRYPOINT",permalink:"/devviews/interviews/docker/hero/RUN-CMD-ENTRYPOINT",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/RUN-CMD-ENTRYPOINT.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"RUN vs CMD vs ENTRYPOINT",title:"RUN vs CMD vs ENTRYPOINT",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",next:{title:"Docker Architecture",permalink:"/devviews/interviews/docker/hero/architecture"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"RUN vs CMD vs ENTRYPOINT")),(0,a.kt)("p",null,"Here is a brief summary of the difference between RUN, CMD and ENTRYPOINT commands in a dockerfile:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RUN"),": Executes a command and saves the result as a new layer in the image. It is usually used to install packages or run build steps (",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"within Docker Image Building Stages"))," - when Image is being created from Dockerfile). For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# To install curl in the image\nRUN apt-get update && apt-get install -y curl\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CMD"),": Specifies the default command to ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"run when a container is created"))," from the image. It can be overridden by passing a different command to the docker run command. For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To run a python script as the default command\nCMD ["python", "app.py"]\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENTRYPOINT"),": Specifies the executable that will ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"run when the container is started"))," (when bash shell of container is provided). It allows the ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"container to be run as if it was a binary")),". It can be combined with CMD to provide default arguments that can be overridden. For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To run a python script as the entrypoint\nENTRYPOINT ["python"]\n# To provide a default argument to the entrypoint\nCMD ["app.py"]\n'))))}p.isMDXComponent=!0},7290:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Docker Architecture",title:"Docker Architecture",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/architecture",id:"docker/hero/architecture",title:"Docker Architecture",description:"RUN vs CMD vs ENTRYPOINT",source:"@site/docs/docker/hero/architecture.md",sourceDirName:"docker/hero",slug:"/docker/hero/architecture",permalink:"/devviews/interviews/docker/hero/architecture",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/architecture.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Docker Architecture",title:"Docker Architecture",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"RUN vs CMD vs ENTRYPOINT",permalink:"/devviews/interviews/docker/hero/RUN-CMD-ENTRYPOINT"},next:{title:"Build Pipeline",permalink:"/devviews/interviews/docker/hero/build-pipeline"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"RUN vs CMD vs ENTRYPOINT")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Docker Architecture",src:n(8723).Z,width:"902",height:"399"})),(0,a.kt)("p",null,"Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API\xb9."),(0,a.kt)("p",null,"The Docker daemon manages the following components:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Images"),": Images are ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"read-only templates"))," that define how to create a container. You can create your own images or use images from public or private repositories. Images are composed of layers that can be shared and reused by other images."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Containers"),": Containers ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"are instances of images"))," that run in isolation on the host machine. You can start, stop, move, or delete containers using the Docker client or API. Containers can be connected to each other and to external networks using networks and volumes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Networks"),": Networks allow containers to communicate with each other and with other hosts. Docker provides different network drivers to support different use cases, such as bridge, host, overlay, macvlan, etc. You can also create your own custom network plugins using the Docker plugin API."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Volumes"),": Volumes are persistent data storage units that can be attached to one or more containers. Volumes allow you to persist data across container restarts and share data between containers. Docker provides different volume drivers to support different storage backends, such as local, NFS, cloudstor, etc. You can also create your own custom volume plugins using the Docker plugin API."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"The Docker registry or hub")," is a service that ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"stores and distributes Docker images")),". You can use the public Docker Hub to access official images from Docker and other community images. You can also use private registries to store and manage your own images."))))}p.isMDXComponent=!0},8230:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Build Pipeline",title:"Build Pipeline",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/build-pipeline",id:"docker/hero/build-pipeline",title:"Build Pipeline",description:"Build Pipeline",source:"@site/docs/docker/hero/build-pipeline.md",sourceDirName:"docker/hero",slug:"/docker/hero/build-pipeline",permalink:"/devviews/interviews/docker/hero/build-pipeline",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/build-pipeline.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Build Pipeline",title:"Build Pipeline",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"Docker Architecture",permalink:"/devviews/interviews/docker/hero/architecture"},next:{title:"Build Stages",permalink:"/devviews/interviews/docker/hero/building-stages"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Build Pipeline")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Docker Architecture",src:n(6746).Z,width:"835",height:"274"}))))}p.isMDXComponent=!0},1838:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Build Stages",title:"Build Stages",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/building-stages",id:"docker/hero/building-stages",title:"Build Stages",description:"Docker Build Stages",source:"@site/docs/docker/hero/building-stages.md",sourceDirName:"docker/hero",slug:"/docker/hero/building-stages",permalink:"/devviews/interviews/docker/hero/building-stages",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/building-stages.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Build Stages",title:"Build Stages",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"Build Pipeline",permalink:"/devviews/interviews/docker/hero/build-pipeline"},next:{title:"container vs virtual machine",permalink:"/devviews/interviews/docker/hero/container-vs-virtual-machine"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Docker Build Stages")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Docker Build Stages",src:n(4118).Z,width:"810",height:"178"})),(0,a.kt)("p",null,"Building stages in Docker are a way to create images that use multiple base images and only keep the artifacts that are needed for the final image. Building stages can help reduce the size and complexity of your images by separating the build process into different steps."),(0,a.kt)("p",null,"A building stage is defined by a ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," instruction in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile"),". Each ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," instruction starts a new stage of the build and can use a different base image. You can copy files or run commands in each stage, and then selectively copy artifacts from one stage to another. You can also name your stages using the ",(0,a.kt)("inlineCode",{parentName:"p"},"AS")," keyword after the ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," instruction."),(0,a.kt)("p",null,"For example, here is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," that uses two building stages to create an image with a Go app:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# syntax=docker/dockerfile:1\n# First stage: build the app\nFROM golang:1.16 AS builder # named the stage\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY *.go ./\nRUN CGO_ENABLED=0 go build -o app\n\n# Second stage: copy the app and run it\nFROM alpine:latest\nWORKDIR /app\nCOPY --from=builder /app/app . # Copy the app binary from the `builder` stage\nEXPOSE 8080\nCMD [ "./app" ]\n')),(0,a.kt)("p",null,"or another example with Typescript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# Build stage 1 -> for dev\nFROM node:10.15.2\nWORKDIR /usr/src/app\nCOPY package*.json ./\nCOPY tsconfig.json ./\nRUN npm install\nCOPY ./src ./src\nRUN npm run build\n\n# Build stage 2 -> for prop.\nFROM node:10.15.2\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install --only=production\nCOPY --from=0 /usr/src/app/build ./build # Copy the app binary from the first stage\nEXPOSE 80\nCMD npm start\n\n")),(0,a.kt)("p",null,"To build the image from this ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", you can use the same ",(0,a.kt)("inlineCode",{parentName:"p"},"docker build")," command as before. You can also specify a target stage using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--target")," option if you don't want to build all the stages. For example, to build only the first stage, you can run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker build -t go-app:builder --target builder .\n"))))}p.isMDXComponent=!0},4089:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"container vs virtual machine",title:"container vs virtual machine",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/container-vs-virtual-machine",id:"docker/hero/container-vs-virtual-machine",title:"container vs virtual machine",description:"Container vs Virtual Machine",source:"@site/docs/docker/hero/container-vs-virtual-machine.md",sourceDirName:"docker/hero",slug:"/docker/hero/container-vs-virtual-machine",permalink:"/devviews/interviews/docker/hero/container-vs-virtual-machine",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/container-vs-virtual-machine.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"container vs virtual machine",title:"container vs virtual machine",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"Build Stages",permalink:"/devviews/interviews/docker/hero/building-stages"},next:{title:"docker-compose",permalink:"/devviews/interviews/docker/hero/docker-compose"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Container vs Virtual Machine")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"container vs virtialmachine",src:n(8424).Z,width:"821",height:"432"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Containers")," provide a lighter weight, faster way to run applications as they share the host kernel, whereas virtual machines have their own kernel and hardware resources. Containers have lower overhead and are easier to deploy compared to virtual machines, but they also have lower security due to shared resources. Containers are limited in terms of application compatibility whereas virtual machines can run any operating system."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Container"),(0,a.kt)("th",{parentName:"tr",align:null},"Virtual Machine"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Scope"),(0,a.kt)("td",{parentName:"tr",align:null},"OS-level"),(0,a.kt)("td",{parentName:"tr",align:null},"Hardware")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Isolation"),(0,a.kt)("td",{parentName:"tr",align:null},"Process"),(0,a.kt)("td",{parentName:"tr",align:null},"Full")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Size"),(0,a.kt)("td",{parentName:"tr",align:null},"Smaller"),(0,a.kt)("td",{parentName:"tr",align:null},"Larger")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Speed"),(0,a.kt)("td",{parentName:"tr",align:null},"Faster"),(0,a.kt)("td",{parentName:"tr",align:null},"Slower")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Overhead"),(0,a.kt)("td",{parentName:"tr",align:null},"Lower"),(0,a.kt)("td",{parentName:"tr",align:null},"High")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Deploy"),(0,a.kt)("td",{parentName:"tr",align:null},"Easier"),(0,a.kt)("td",{parentName:"tr",align:null},"Harder")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Security"),(0,a.kt)("td",{parentName:"tr",align:null},"Lower"),(0,a.kt)("td",{parentName:"tr",align:null},"Higher")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Compatibility"),(0,a.kt)("td",{parentName:"tr",align:null},"Limited"),(0,a.kt)("td",{parentName:"tr",align:null},"High")))),(0,a.kt)("p",null,"Containers are isolated environments that contain everything needed to run an application, such as code, libraries, dependencies, and configuration files. Containers are lightweight and portable, which makes them ideal for deploying applications across different environments.")))}p.isMDXComponent=!0},9153:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"docker-compose",title:"docker-compose",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/docker-compose",id:"docker/hero/docker-compose",title:"docker-compose",description:"docker-compose declaration",source:"@site/docs/docker/hero/docker-compose.md",sourceDirName:"docker/hero",slug:"/docker/hero/docker-compose",permalink:"/devviews/interviews/docker/hero/docker-compose",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/docker-compose.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"docker-compose",title:"docker-compose",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"container vs virtual machine",permalink:"/devviews/interviews/docker/hero/container-vs-virtual-machine"},next:{title:"Dockerfile-commands",permalink:"/devviews/interviews/docker/hero/dockerfile-commands"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"docker-compose declaration")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Compose file version"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"version"),": Specifies the version of the Compose file syntax being used. It determines which Compose features are available to the file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.9"\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Services"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"services"),": Defines the services that make up your application. Each service is a container that runs the image defined by the build or image field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    build: .\n    ports:\n      - "5000:5000"\n  redis:\n    image: "redis:alpine"\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Service Configuration"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"build"),": Specifies the path to the Dockerfile for building a Docker image."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"image"),": Specifies the name of an existing image to use instead of building an image from a Dockerfile."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"container_name"),": Specifies a custom name for the container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"command"),": Overrides the default command specified by the image."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"environment"),": Defines environment variables to set inside the container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ports"),": Exposes a port or a range of ports on the host."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"volumes"),": Mounts a directory or file from the host inside the container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"networks"),": Connects the service to a pre-existing network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"depends_on"),": Specifies the dependent services in the order they should be started.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    build: .\n    container_name: my_container\n    command: python app.py\n    environment:\n      - ENV_VAR=value\n    ports:\n      - "5000:5000"\n    volumes:\n      - .:/code\n    networks:\n      - my_network\n    depends_on:\n      - db\n  db:\n    image: postgres\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Networks"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"networks"),": Defines the networks to be created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"networks:\n  my_network:\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Network Configuration"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"driver"),": Specifies the network driver to use."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ipam"),": Configures the IP Address Management driver for the network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subnet"),": Specifies the subnet for the network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gateway"),": Specifies the gateway for the network.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"networks:\n  my_network:\n    driver: bridge # A bridge network is the default network driver for Docker, and it allows your containers to communicate with each other and with the host machin\n    ipam:\n      driver: default #  The default IPAM driver assigns IP addresses to your containers automatically from a predefined pool\n      config:\n        - subnet: 172.28.0.0/16\n          gateway: 172.28.5.254\n")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Volumes"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"volumes"),": Defines the volumes to be created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"volumes:\n  my_volume:\n")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Volume Configuration"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"driver"),": Specifies the volume driver to use. (Volumes can also use different drivers and options to store data on remote hosts, cloud providers, or encrypt the contents of volumes.)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"driver_opts"),": Specifies the options for the volume driver."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"external"),": Specifies whether the volume should be created on the host or in a plugin managed volume."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name"),": Specifies the name of an existing volume to use.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'volumes:\n  my_volume:\n    driver: local # The local driver stores volumes on the host machine where the containers run\n    driver_opts:\n      type: "nfs4" # the type of the volume, which is nfs4. This means that your volume will use the NFSv4 protocol to access a shared file system on a remote server\n      o: "addr=192.168.1.100,nfsvers=4,rw" #  your volume will connect to the server with IP address 192.168.1.100, use NFS version 4, and mount the volume as read-write\n      device: ":/myshare" # your volume will access the directory /myshare on the remote server\n    external: true # volume is external, which means that it has been created outside of Compose using docker volume create or another tool\n')),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Secrets"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"secrets"),": Defines the secrets to be created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n  app:\n    image: example-app:latest\n    secrets: # specify the secrets that the app service should receive\n      - db_password # mount the db_password secret below to /run/secrets/db_password\n      - source: api_key # use the api_key secret blow as the source\n        target: app_api_key # mount the api_key secret to /run/secrets/app_api_key\n\nsecrets: # define the secrets that are used in the services\n  db_password: # name of the secret\n    file: ./db_password.txt # file path where the secret value is stored on the host machine\n  api_key: # name of the secret\n    external: true # indicate that the secret is created outside of Compose using docker secret create or another tool\n")),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Configurations"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"configs"),": Defines the configurations to be created."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file"),": Specifies the path to the file to use as the configuration.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  web:\n    image: nginx\n    ports:\n      - "80:80"\n    configs: # specify the configs that the web service should receive\n      - source: nginx_config # use the nginx_config config as the source\n        target: /etc/nginx/nginx.conf # mount the config to /etc/nginx/nginx.conf within the container\n\n  app:\n    image: node\n    configs: # specify the configs that the app service should receive\n      - source: app_config # use the app_config config as the source\n        target: /app/config.json # mount the config to /app/config.json within the container\n\nconfigs:\n  nginx_config: # name of the config\n    file: ./nginx.conf # file path where the config value is stored on the host machine\n  app_config: # name of the config\n    external: true # indicate that the config is already created outside of Compose using `docker config create` or another tool\n')),(0,a.kt)("ol",{start:10},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"services_order"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"services_order"),": Specifies the order in which services should be started.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"services_order: [web, db]\n"))))}p.isMDXComponent=!0},4212:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Dockerfile-commands",title:"Dockerfile-commands",tags:["Docker Knowledge"]},o=void 0,l={unversionedId:"docker/hero/dockerfile-commands",id:"docker/hero/dockerfile-commands",title:"Dockerfile-commands",description:"Dockerfile-commands",source:"@site/docs/docker/hero/dockerfile-commands.md",sourceDirName:"docker/hero",slug:"/docker/hero/dockerfile-commands",permalink:"/devviews/interviews/docker/hero/dockerfile-commands",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/dockerfile-commands.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Dockerfile-commands",title:"Dockerfile-commands",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"docker-compose",permalink:"/devviews/interviews/docker/hero/docker-compose"},next:{title:"Docker Interviews",permalink:"/devviews/interviews/docker/docker-from-zero-hero"}},s={},c=[{value:"Commands for building images:",id:"commands-for-building-images",level:4},{value:"Commands for configuring images:",id:"commands-for-configuring-images",level:4},{value:"Miscellaneous commands",id:"miscellaneous-commands",level:4},{value:"The order of execution",id:"the-order-of-execution",level:4}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Dockerfile-commands")),(0,a.kt)("h4",{id:"commands-for-building-images"},"Commands for building images:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FROM"),": Specifies the base image for the subsequent instructions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RUN"),": Runs a command inside the container to install packages, configure services or applications, etc."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ARG"),": Defines an argument to be used in ",(0,a.kt)("inlineCode",{parentName:"li"},"Dockerfile"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WORKDIR"),": Sets the working directory for future instructions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COPY")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"ADD"),": Copies a file or directory from the host machine to the container.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Use the official node image as the base image\nFROM node:14\n\n# Define an argument called NODE_ENV with a default value of production\nARG NODE_ENV=production\n\n# Set the environment variable NODE_ENV to the value of the argument NODE_ENV\nENV NODE_ENV $NODE_ENV\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the package.json and package-lock.json files from the host to the working directory\nCOPY package*.json ./\n\n# Run the npm install command to install dependencies\nRUN npm install\n\n# Copy the rest of the files from the host to the working directory\nCOPY . .\n\n# Expose port 3000 for the app\nEXPOSE 3000\n\n# Run the npm start command to start the app\nCMD [ "npm", "start" ]\n')),(0,a.kt)("h4",{id:"commands-for-configuring-images"},"Commands for configuring images:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EXPOSE"),": Declares what port(s) should be exposed by the container.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# To expose port 80 of the container\nEXPOSE 80\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENV"),": Set environment variable inside the container.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# To set the working directory as an environment variable\nENV workdirectory /usr/node\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LABEL"),": Provides metadata to an image.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To add some labels to the image\nLABEL "author"="FOSS TechNIx"\nLABEL "Date"="2020-09-29"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"USER"),": Specifies the user or UID to use when running the image.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# To run the image as user ubuntu\nUSER ubuntu\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENTRYPOINT"),": Specifies the command to be run when the container starts.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To run a python script as the entrypoint\nENTRYPOINT ["python", "app.py"]\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CMD"),": Specifies the arguments to be passed to the entrypoint command.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To pass some arguments to the python script\nCMD ["--port", "8080"]\n')),(0,a.kt)("h4",{id:"miscellaneous-commands"},"Miscellaneous commands"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LABEL"),": Provides metadata to an image.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# To add some labels to the image\nLABEL "author"="FOSS TechNIx"\nLABEL "Date"="2020-09-29"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ONBUILD"),": Specifies a command to execute when the image is used as a base image.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# To run a command when another image is built on top of this image\nONBUILD RUN npm install\n")),(0,a.kt)("h4",{id:"the-order-of-execution"},"The order of execution"),(0,a.kt)("p",null,"Here's a list of Dockerfile commands in the order they are typically executed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FROM")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ARG")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RUN")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COPY")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"ADD")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WORKDIR")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RUN")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EXPOSE")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENV")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LABEL")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"USER")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENTRYPOINT")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CMD")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ONBUILD")))))}p.isMDXComponent=!0},8723:function(e,t,n){t.Z=n.p+"assets/images/architecture-a858870ea76d80cb2395ed46ca53d5d0.png"},6746:function(e,t,n){t.Z=n.p+"assets/images/build-pipeline-bc22b1ea8ef6111a27b735eda0d42972.png"},4118:function(e,t,n){t.Z=n.p+"assets/images/build-stages-f1d4d89ae22ad52e90558af41852f87e.png"},8424:function(e,t,n){t.Z=n.p+"assets/images/containervsvirtialmachine-b2cd86af349cbdddc1df9b2c940445e8.png"}}]);