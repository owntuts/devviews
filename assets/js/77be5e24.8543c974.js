"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8321],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),y=r,m=p["".concat(s,".").concat(y)]||p[y]||d[y]||i;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2761:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var a=n(83117),r=(n(67294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Hash Table vs Dictionary",title:"Hash Table vs Dictionary In C# (C-Sharp)",slug:"/hashtable-dictionary-c-sharp",tags:["Basic C# Interviews"]},l=void 0,o={unversionedId:"c-sharp/basic/hashtable-dictionary",id:"c-sharp/basic/hashtable-dictionary",title:"Hash Table vs Dictionary In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/hashtable-dictionary.md",sourceDirName:"c-sharp/basic",slug:"/hashtable-dictionary-c-sharp",permalink:"/devviews/interviews/hashtable-dictionary-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/hashtable-dictionary.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Hash Table vs Dictionary",title:"Hash Table vs Dictionary In C# (C-Sharp)",slug:"/hashtable-dictionary-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Event in C#",permalink:"/devviews/interviews/event-c-sharp"},next:{title:"in vs ref vs out Modifiers",permalink:"/devviews/interviews/in-ref-out-c-sharp"}},s={},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nHash Table vs Dictionary in C#?")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,r.kt)("inlineCode",{parentName:"p"},"Hashtable")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dictionary")," are two collections in C# that allow you to store data as key-value pairs. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Hashtable")," class is an older collection that was introduced in the early versions of C#. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Hashtable"),(0,r.kt)("th",{parentName:"tr",align:null},"Dictionary"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Type Safety"),(0,r.kt)("td",{parentName:"tr",align:null},"Not type-safe (any type of object can be stored)"),(0,r.kt)("td",{parentName:"tr",align:null},"Type-safe (you specify the type of the key and value to be stored)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boxing and Unboxing"),(0,r.kt)("td",{parentName:"tr",align:null},"All values are stored as objects; can be slow for value types"),(0,r.kt)("td",{parentName:"tr",align:null},"Values are stored as the specified type; no overhead for boxing and unboxing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NULL keys"),(0,r.kt)("td",{parentName:"tr",align:null},"Allows null keys"),(0,r.kt)("td",{parentName:"tr",align:null},"Does not allow null keys")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Performance for small/medium data sets"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides faster performance"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides slower performance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Performance for large data sets"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides slower performance"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides faster performance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enumeration"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides a non-generic enumerator; requires casting for strongly typed values"),(0,r.kt)("td",{parentName:"tr",align:null},"Provides a generic enumerator; no need for casting")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'// Hashtable example\nHashtable ht = new Hashtable();\nht.Add("key1", "value1");\nht.Add("key2", 25);\nht.Add("key3", true);\n\nforeach (DictionaryEntry item in ht)\n{\n    Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");\n}\n\n// Output:\n// Key: key1, Value: value1\n// Key: key2, Value: 25\n// Key: key3, Value: True\n\n// Dictionary example\nDictionary<string, object> dict = new Dictionary<string, object>();\ndict.Add("key1", "value1");\ndict.Add("key2", 25);\ndict.Add("key3", true);\n\nforeach (KeyValuePair<string, object> item in dict)\n{\n    Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");\n}\n\n// Output:\n// Key: key1, Value: value1\n// Key: key2, Value: 25\n// Key: key3, Value: True\n\n'))))}d.isMDXComponent=!0}}]);