"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[1455,6442,8812,8807,5898,7776,4251,6312],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,k=u["".concat(i,".").concat(c)]||u[c]||p[c]||s;return n?r.createElement(k,o(o({ref:t},m),{},{components:n})):r.createElement(k,o({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<s;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},99240:function(e,t,n){n.r(t),n.d(t,{assets:function(){return k},contentTitle:function(){return p},default:function(){return v},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return h}});var r=n(83117),a=(n(67294),n(3905)),s=n(33521),o=(n(58346),n(95405)),l=n(75642),i=n(46204),d=n(35416),m=n(74562);const u={sidebar_position:1},p="Nodejs From Zero To Hero",c={unversionedId:"nodejs/intro",id:"nodejs/intro",title:"Nodejs From Zero To Hero",description:"single-thread vs multi-threads vs concurrency vs paralell",source:"@site/docs/nodejs/intro.md",sourceDirName:"nodejs",slug:"/nodejs/intro",permalink:"/devviews/interviews/nodejs/intro",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Worker Thread",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread"},next:{title:"Schema First vs Code First",permalink:"/devviews/interviews/schema-first-vs-code-first-graphql-apps"}},k={},h=[{value:"single-thread vs multi-threads vs concurrency vs paralell",id:"single-thread-vs-multi-threads-vs-concurrency-vs-paralell",level:3},{value:"Nodejs Stream",id:"nodejs-stream",level:3},{value:"Nodejs Child Process",id:"nodejs-child-process",level:3},{value:"Nodejs Cluster",id:"nodejs-cluster",level:3},{value:"Worker Thread",id:"worker-thread",level:3},{value:"Worker Thread vs Cluster",id:"worker-thread-vs-cluster",level:3}],g={toc:h},N="wrapper";function v(e){let{components:t,...n}=e;return(0,a.kt)(N,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nodejs-from-zero-to-hero"},"Nodejs From Zero To Hero"),(0,a.kt)("h3",{id:"single-thread-vs-multi-threads-vs-concurrency-vs-paralell"},"single-thread vs multi-threads vs concurrency vs paralell"),(0,a.kt)(m.default,{mdxType:"Threadsvs"}),(0,a.kt)("h3",{id:"nodejs-stream"},"Nodejs Stream"),(0,a.kt)(s.default,{mdxType:"Stream"}),(0,a.kt)("h3",{id:"nodejs-child-process"},"Nodejs Child Process"),(0,a.kt)(o.default,{mdxType:"ChildProcess"}),(0,a.kt)("h3",{id:"nodejs-cluster"},"Nodejs Cluster"),(0,a.kt)(l.default,{mdxType:"Cluster"}),(0,a.kt)("h3",{id:"worker-thread"},"Worker Thread"),(0,a.kt)(i.default,{mdxType:"WorkerThread"}),(0,a.kt)("h3",{id:"worker-thread-vs-cluster"},"Worker Thread vs Cluster"),(0,a.kt)(d.default,{mdxType:"WorkerThreadCluster"}))}v.isMDXComponent=!0},95405:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs Child Process",title:"Nodejs Child Process",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/child-process",id:"nodejs/nodejs/child-process",title:"Nodejs Child Process",description:"spawn vs fork vs execFile vs exec",source:"@site/docs/nodejs/nodejs/child-process.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/child-process",permalink:"/devviews/interviews/nodejs/nodejs/child-process",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/child-process.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Child Process",title:"Nodejs Child Process",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",next:{title:"Nodejs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/cluster"}},i={},d=[{value:"Here is a table that summarizes some of the key differences between them:",id:"here-is-a-table-that-summarizes-some-of-the-key-differences-between-them",level:4},{value:"Details &amp; Examples",id:"details--examples",level:4}],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"`spawn` vs `fork` vs `execFile` vs `exec`")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"spawn"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"fork"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"execFile")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," are four ways to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"run another program (child process) from your Node.js program (parent process)")),". They are different in ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"how they run the other program and how they communicate with it")),"."),(0,a.kt)("h4",{id:"here-is-a-table-that-summarizes-some-of-the-key-differences-between-them"},"Here is a table that summarizes some of the key differences between them:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Shell"),(0,a.kt)("th",{parentName:"tr",align:null},"Streaming"),(0,a.kt)("th",{parentName:"tr",align:null},"Buffering"),(0,a.kt)("th",{parentName:"tr",align:null},"IPC"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"spawn"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fork"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"execFile"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exec"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"inter-process communication (",(0,a.kt)("strong",{parentName:"li"},"IPC"),") channel established that allows sending messages between parent and child"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Buffering"),": means waiting for the other program to finish (buferring) and then gives you all the data it produced"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Streaming"),": Sending data in chunks"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Shell"),": (a shell is a program that lets you type commands and run other programs). Using a shell means running commands via shell program.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"details--examples"},"Details & Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"spawn"),": runs the other program directly without using a shell. It sends and receives data from the other program as it runs. It is good for running programs that run for a long time and produce a lot of data.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command directly ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"without using a shell"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"streams the output"))," to the console"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fork"),": Similar but the biggest difference between spawn and fork is that a ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"communication channel"))," is established to the child process when using fork, that lets you send messages back and forth. It is good for running Node.js programs that work together.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs a Node.js module that executes the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command using a shell and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"sends (streams) the output back to the parent process using IPC"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// child.js\nconst { exec } = require('child_process');\nexec('ls -lh /usr', (error, stdout, stderr) => {\n  if (error) {\n    process.send({ error });\n  } else {\n    process.send({ stdout });\n  }\n});\n\n// parent.js\nconst { fork } = require('child_process');\nconst child = fork('./child.js');\n\nchild.on('message', (message) => {\n  if (message.error) {\n    console.error(`stderr: ${message.error}`);\n  } else {\n    console.log(`stdout: ${message.stdout}`);\n  }\n});\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"execFile"),": runs the other program directly without using a shell It waits for the other program to finish and then gives you all the data it produced. It is good for running programs that finish quickly and produce a small amount of data.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command directly ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"without using a shell"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"buffers the outpu")),"t to the callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { execFile } = require('child_process');\nexecFile('ls', ['-lh', '/usr'], (error, stdout, stderr) => {\n  if (error) {\n    console.error(`stderr: ${stderr}`);\n    throw error;\n  }\n  console.log(`stdout: ${stdout}`);\n});\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exec"),": runs the other program ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"using a shell")),". It waits for the other program to finish and then gives you all the data it produced. It is good for running programs that need a shell to work properly.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"using a shell"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"buffers the output"))," to the callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { exec } = require('child_process');\nexec('ls -lh /usr', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`stderr: ${stderr}`);\n    throw error;\n  }\n  console.log(`stdout: ${stdout}`);\n});\n\n"))))}p.isMDXComponent=!0},75642:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs Cluster",title:"Nodejs Cluster",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/cluster",id:"nodejs/nodejs/cluster",title:"Nodejs Cluster",description:"Cluster in Nodejs",source:"@site/docs/nodejs/nodejs/cluster.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/cluster",permalink:"/devviews/interviews/nodejs/nodejs/cluster",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/cluster.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Cluster",title:"Nodejs Cluster",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Child Process",permalink:"/devviews/interviews/nodejs/nodejs/child-process"},next:{title:"Nodejs Stream Events & Functions",permalink:"/devviews/interviews/nodejs/nodejs/common-stream-events"}},i={},d=[{value:"Examples of Communication",id:"examples-of-communication",level:4}],m={toc:d},u="wrapper";function p(e){let{components:t,...s}=e;return(0,a.kt)(u,(0,r.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Cluster in Nodejs")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Nodejs cluster")," is a module that allows you to create multiple child processes that run parallelly and share the same server port. This module can be used to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"take advantage of multi-core systems"))," and distribute workloads among the processes. The ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"child processes have their own memory, event loop, and V8 instance, and communicate with the parent process via IPC")),". The cluster module acts as a load balancer that can handle blocking code and improve performance."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Cluster in Nodejs",src:n(97886).Z,width:"830",height:"467"})),(0,a.kt)("p",null,"Here is an example of how to use nodejs cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import the cluster module\nimport cluster from 'node:cluster';\n// Get the number of available CPUs\nimport { availableParallelism } from 'node:os';\nconst numCPUs = availableParallelism();\n\n// Check if the current process is the primary process\nif (cluster.isPrimary) {\n  // Log the primary process ID\n  console.log(`Primary ${process.pid} is running`);\n\n  // Fork workers for each CPU\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  // Communication to Workers\n  cluster.on('fork', (worker) => {\n    console.log('Primary forked worker: ', worker.id);\n    worker.send({msg: 'Hello worker'});\n  });\n\n  // Listen for exit events from workers\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Create an HTTP server in each worker process\n  import http from 'node:http';\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n\n  // Log the worker process ID\n  console.log(`Worker ${process.pid} started`);\n\n  // Communication to Primary\n  process.on('message', (msg) => {\n    console.log('Worker received: ', msg);\n  });\n\n}\n")),(0,a.kt)("p",null,":::note\nIt depends on the nodejs version you are using. Nodejs cluster module supports two methods of distributing incoming connections: ",(0,a.kt)("strong",{parentName:"p"},"round-robin")," and ",(0,a.kt)("strong",{parentName:"p"},"OS scheduling"),"."),(0,a.kt)("p",null,"You can check or change the scheduling policy by using ",(0,a.kt)("inlineCode",{parentName:"p"},"cluster.schedulingPolicy")," property\xb9. The possible values are ",(0,a.kt)("inlineCode",{parentName:"p"},"cluster.SCHED_RR")," for round-robin or ",(0,a.kt)("inlineCode",{parentName:"p"},"cluster.SCHED_NONE")," for OS scheduling\xb9."),(0,a.kt)("p",null,":::")),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Cluster Communication")),"You can use events. There are several events that can be emitted by the cluster module. Some of them are:",(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('fork', (worker) => {})"),": This event is emitted when a new worker is forked by the primary process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('online', (worker) => {})"),": This event is emitted when a worker has started and is ready to receive messages from the primary process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('listening', (worker, address) => {})"),": This event is emitted when a worker is listening for connections on a server port\xb9. The address object contains the address, port and address type of the server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('disconnect', (worker) => {})"),": This event is emitted when the IPC channel between a worker and the primary process has disconnected. This can happen when a worker calls ",(0,a.kt)("inlineCode",{parentName:"li"},"process.disconnect()")," or exits gracefully."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('exit', (worker, code, signal) => {})"),": This event is emitted when a worker exits or is killed by a signal. The code and signal arguments contain the exit code and signal name of the worker process, if any."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('message', (worker, message, handle) => {})"),": This event is emitted when a worker sends a message to the primary process via ",(0,a.kt)("inlineCode",{parentName:"li"},"process.send()"),". The message argument contains the message object and the handle argument contains an optional handle object for sending file descriptors."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cluster.on('setup', (settings) => {})"),": This event is emitted when ",(0,a.kt)("inlineCode",{parentName:"li"},".setupPrimary()")," is called or when a new worker is forked for the first time. The settings argument contains the cluster settings object that was passed to ",(0,a.kt)("inlineCode",{parentName:"li"},".setupPrimary()")," or that was generated by default.")),(0,a.kt)("p",null,"These are some of the cluster events that can be listened by the primary process. You can find more details and examples in the documentation of nodejs cluster."),(0,a.kt)("h4",{id:"examples-of-communication"},"Examples of Communication"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// In the primary process\n// Fork workers for each CPU\nfor (let i = 0; i < numCPUs; i++) {\n  cluster.fork();\n}\n\n// Do something async and then send a message to workers\nfetch('https://example.com/api')\n  .then(res => res.json())\n  .then(data => {\n    console.log('Primary fetched data: ', data);\n    // Send a message to each worker\n    for (const id in cluster.workers) {\n      cluster.workers[id].send({msg: 'Hello worker'});\n    }\n  })\n  .catch(err => console.error(err));\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"  // In workers\n  process.on('message', (msg) => {\n    console.log('Worker received: ', msg);\n  });\n")),(0,a.kt)("p",null,":::note"),(0,a.kt)("p",null,"You can also use socket.io or node-ipc to create a bidirectional communication channel between the processes."),(0,a.kt)("p",null,":::")))}p.isMDXComponent=!0},58346:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs Stream Events & Functions",title:"Nodejs Stream Events & Functions",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/common-stream-events",id:"nodejs/nodejs/common-stream-events",title:"Nodejs Stream Events & Functions",description:"Common Events & Functions of Stream in Nodejs",source:"@site/docs/nodejs/nodejs/common-stream-events.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/common-stream-events",permalink:"/devviews/interviews/nodejs/nodejs/common-stream-events",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/common-stream-events.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Stream Events & Functions",title:"Nodejs Stream Events & Functions",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/cluster"},next:{title:"Nodejs Stream",permalink:"/devviews/interviews/nodejs/nodejs/stream"}},i={},d=[{value:"Readable Stream Events:",id:"readable-stream-events",level:4},{value:"Writable Stream Events:",id:"writable-stream-events",level:4},{value:"Readable Stream Functions:",id:"readable-stream-functions",level:4},{value:"Writable Stream Functions:",id:"writable-stream-functions",level:4}],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Common Events & Functions of Stream in Nodejs")),(0,a.kt)("p",null,"Here are tables that list some of the common events and functions for Node.js Readable streams and Writable streams:"),(0,a.kt)("h4",{id:"readable-stream-events"},"Readable Stream Events:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Event"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"readable")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when data is ready to be read from the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"data")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when data is read from the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"end")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the stream has no more data to read.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"error")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted if there is an error reading data from the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"close")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is closed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pause")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is paused.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"resume")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is resumed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"readableend")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the ",(0,a.kt)("inlineCode",{parentName:"td"},"end()")," method is called on the readable stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"readableerror")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when an error occurs reading from the stream.")))),(0,a.kt)("h4",{id:"writable-stream-events"},"Writable Stream Events:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Event"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"drain")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when the stream is ready to receive more data after previously being write-blocked.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"error")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted if there is an error writing data to the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"finish")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when all data has been successfully written to the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pipe")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when a readable stream is piped to the writable stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"unpipe")),(0,a.kt)("td",{parentName:"tr",align:null},"Emitted when a readable stream is unpiped from the writable stream.")))),(0,a.kt)("h4",{id:"readable-stream-functions"},"Readable Stream Functions:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"read([size])")),(0,a.kt)("td",{parentName:"tr",align:null},"Read ",(0,a.kt)("inlineCode",{parentName:"td"},"size")," bytes of data from the stream (or as much as is currently available if ",(0,a.kt)("inlineCode",{parentName:"td"},"size")," is omitted).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"setEncoding()")),(0,a.kt)("td",{parentName:"tr",align:null},"Set the encoding of the data emitted from the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pause()")),(0,a.kt)("td",{parentName:"tr",align:null},"Pause emitting the ",(0,a.kt)("inlineCode",{parentName:"td"},"data")," event.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"resume()")),(0,a.kt)("td",{parentName:"tr",align:null},"Resume emitting the ",(0,a.kt)("inlineCode",{parentName:"td"},"data")," event.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"isPaused()")),(0,a.kt)("td",{parentName:"tr",align:null},"Check if the stream is paused.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pipe(dest)")),(0,a.kt)("td",{parentName:"tr",align:null},"Pipe the output of the stream to a writable stream (",(0,a.kt)("inlineCode",{parentName:"td"},"dest"),").")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"unpipe(dest?)")),(0,a.kt)("td",{parentName:"tr",align:null},"Stop piping the output of the stream to a writable stream (",(0,a.kt)("inlineCode",{parentName:"td"},"dest"),"), or stop all piping if no ",(0,a.kt)("inlineCode",{parentName:"td"},"dest")," is specified.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"unshift(chunk)")),(0,a.kt)("td",{parentName:"tr",align:null},"Push a chunk of data back onto the stream's internal buffer (useful when implementing parsing logic).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"wrap(stream)")),(0,a.kt)("td",{parentName:"tr",align:null},"Wrap an old-style stream (that emits ",(0,a.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"end"),", and ",(0,a.kt)("inlineCode",{parentName:"td"},"error")," events) to make it compatible with the new-style ",(0,a.kt)("inlineCode",{parentName:"td"},"Readable")," stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"destroy([err])")),(0,a.kt)("td",{parentName:"tr",align:null},"Destroy the stream, optionally with an error.")))),(0,a.kt)("h4",{id:"writable-stream-functions"},"Writable Stream Functions:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"write(chunk[, encoding])")),(0,a.kt)("td",{parentName:"tr",align:null},"Write ",(0,a.kt)("inlineCode",{parentName:"td"},"chunk")," of data to the stream, optionally with ",(0,a.kt)("inlineCode",{parentName:"td"},"encoding"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"end([chunk][, encoding])")),(0,a.kt)("td",{parentName:"tr",align:null},"Signal the end of the stream, optionally writing a final ",(0,a.kt)("inlineCode",{parentName:"td"},"chunk")," of data with ",(0,a.kt)("inlineCode",{parentName:"td"},"encoding"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"cork()")),(0,a.kt)("td",{parentName:"tr",align:null},"Enable corking of the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uncork()")),(0,a.kt)("td",{parentName:"tr",align:null},"Flush any previously corked data on the stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"setDefaultEncoding()")),(0,a.kt)("td",{parentName:"tr",align:null},"Set the default encoding of the writable stream.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"destroy([err])")),(0,a.kt)("td",{parentName:"tr",align:null},"Destroy the stream, optionally with an error."))))))}p.isMDXComponent=!0},33521:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs Stream",title:"Nodejs Stream",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/stream",id:"nodejs/nodejs/stream",title:"Nodejs Stream",description:"Strean in Nodejs",source:"@site/docs/nodejs/nodejs/stream.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/stream",permalink:"/devviews/interviews/nodejs/nodejs/stream",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/stream.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Stream",title:"Nodejs Stream",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Stream Events & Functions",permalink:"/devviews/interviews/nodejs/nodejs/common-stream-events"},next:{title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",permalink:"/devviews/interviews/nodejs/nodejs/threadsvs"}},i={},d=[],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Strean in Nodejs")),(0,a.kt)("p",null,"A stream is an abstract interface for working with streaming data in Node.js. There are four fundamental stream types in Node.js: ",(0,a.kt)("strong",{parentName:"p"},"Readable"),", ",(0,a.kt)("strong",{parentName:"p"},"Writable"),", ",(0,a.kt)("strong",{parentName:"p"},"Duplex"),", and ",(0,a.kt)("strong",{parentName:"p"},"Transform")," streams. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"A readable stream")," is a source from which data can be consumed, such as a file or a network request.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nconst readable = fs.createReadStream("input.txt");\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"A writable stream")," is a destination to which data can be written, such as a file or a network response. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nconst readable = fs.createReadStream("input.txt");\nconst writable = fs.createWriteStream("output.txt");\nreadable.pipe(writable); // pipe them together\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"A duplex stream")," is both readable and writable, such as a TCP socket. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { Duplex } = require('stream');\n\n// Create a custom duplex stream\nconst myDuplexStream = new Duplex({\n  write(chunk, encoding, callback) {\n    // Process incoming data\n    console.log(`Incoming data: ${chunk.toString()}`);\n\n    // Call the callback to signal that we're done processing the data\n    callback();\n  },\n  read(size) {\n    // Generate and push some data onto the stream\n    const data = Math.round(Math.random() * 100).toString();\n    this.push(data);\n\n    // If we've pushed 10 or more items, stop generating data\n    if (parseInt(data) > 90) {\n      this.push(null); // signal end of stream\n    }\n  }\n});\n\n// Pipe the stream to the console\nmyDuplexStream.pipe(process.stdout);\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"A transform stream")," is a type of duplex stream that modifies the data as it passes through, such as a compression or encryption stream.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\nconst stream = require("stream");\nconst transform = new stream.Transform({\n  transform(chunk, encoding, callback) {\n    // convert chunk to uppercase\n    const upperChunk = chunk.toString().toUpperCase();\n    // push the transformed chunk to the output\n    this.push(upperChunk);\n    // call the callback when done\n    callback(null, "Done!");\n  }\n});\n// const readable = fs.createReadStream("input.txt");\n// const writable = fs.createWriteStream("output.txt");\n// readable.pipe(transform).pipe(writable);\ntransform.on("data", (chunk) => {\n  console.log(chunk.toString());\n});\ntransform.on("end", () => {\n  console.log("End of stream");\n});\ntransform.write("hello");\ntransform.write("world");\ntransform.end();\n// Output:\n// HELLO\n// WORLD\n// Done!\n// Done!\n// End of stream\n\n'))))}p.isMDXComponent=!0},74562:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/threadsvs",id:"nodejs/nodejs/threadsvs",title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",description:"single-thread vs multi-threads vs concurrency vs paralell in Nodejs",source:"@site/docs/nodejs/nodejs/threadsvs.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/threadsvs",permalink:"/devviews/interviews/nodejs/nodejs/threadsvs",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/threadsvs.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Stream",permalink:"/devviews/interviews/nodejs/nodejs/stream"},next:{title:"Nodejs Worker Thread vs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread-vs-cluster"}},i={},d=[],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"single-thread vs multi-threads vs concurrency vs paralell in Nodejs")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Single-thread:")," "),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"A web server receives requests from multiple clients."),(0,a.kt)("li",{parentName:"ul"},"The server only processes each request at a time.")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Multi-thread:")),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"A web server receives requests from multiple clients."),(0,a.kt)("li",{parentName:"ul"},"The server divides the requests into multiple tasks."),(0,a.kt)("li",{parentName:"ul"},"The server assigns each task to a different thread."),(0,a.kt)("li",{parentName:"ul"},"The threads execute the tasks concurrently. (Concurrency happen here)"),(0,a.kt)("li",{parentName:"ul"},"The server returns the results of the tasks to the clients.")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Concurrency:")," Concurrency is the ability to run multiple tasks or processes at the same time. Resources of server (CPU, Memory,...) are shared among the requests. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parallelism:")),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Consider a web server that receives requests from multiple clients. If the server only has one processor, it can only process one request at a time. However, if the server has multiple processors, it can process multiple requests simultaneously. This can be done by ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"dividing the requests into multiple tasks and assigning each task to a different processor")),".")))),(0,a.kt)("p",null,"Here is a table that summarizes the differences between single-thread, multi-thread, concurrency, and parallel:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Feature"),(0,a.kt)("th",{parentName:"tr",align:null},"Single-thread"),(0,a.kt)("th",{parentName:"tr",align:null},"Multi-thread"),(0,a.kt)("th",{parentName:"tr",align:null},"Concurrency"),(0,a.kt)("th",{parentName:"tr",align:null},"Parallelism"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Number of tasks"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"Multiple"),(0,a.kt)("td",{parentName:"tr",align:null},"Multiple"),(0,a.kt)("td",{parentName:"tr",align:null},"Multiple")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Focus"),(0,a.kt)("td",{parentName:"tr",align:null},"One task at a time"),(0,a.kt)("td",{parentName:"tr",align:null},"Different tasks at the same time"),(0,a.kt)("td",{parentName:"tr",align:null},"Different tasks at the same time"),(0,a.kt)("td",{parentName:"tr",align:null},"Same task at the same time")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Speed"),(0,a.kt)("td",{parentName:"tr",align:null},"Slow"),(0,a.kt)("td",{parentName:"tr",align:null},"Faster"),(0,a.kt)("td",{parentName:"tr",align:null},"Faster"),(0,a.kt)("td",{parentName:"tr",align:null},"Fastest"))))))}p.isMDXComponent=!0},35416:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs Worker Thread vs Cluster",title:"Nodejs Worker Thread vs Cluster",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/worker-thread-vs-cluster",id:"nodejs/nodejs/worker-thread-vs-cluster",title:"Nodejs Worker Thread vs Cluster",description:"Worker Thread vs Cluster in Nodejs",source:"@site/docs/nodejs/nodejs/worker-thread-vs-cluster.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/worker-thread-vs-cluster",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread-vs-cluster",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/worker-thread-vs-cluster.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Worker Thread vs Cluster",title:"Nodejs Worker Thread vs Cluster",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",permalink:"/devviews/interviews/nodejs/nodejs/threadsvs"},next:{title:"Nodejs Worker Thread",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread"}},i={},d=[],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Worker Thread vs Cluster in Nodejs")),(0,a.kt)("p",null,"Cluster and worker threads are two different ways to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"run JavaScript code in parallel using nodejs")),". Cluster allows you to create multiple child processes that can share the same server port and handle incoming requests in parallel. Worker threads allow you to create multiple threads within a single process that can execute JavaScript code and communicate with each other and with the main thread. Here is a summary of some of the main differences:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Cluster"),(0,a.kt)("th",{parentName:"tr",align:null},"Worker Threads"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Uses processes"),(0,a.kt)("td",{parentName:"tr",align:null},"Uses threads")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Isolated memory"),(0,a.kt)("td",{parentName:"tr",align:null},"Shared memory")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"IPC communication"),(0,a.kt)("td",{parentName:"tr",align:null},"Message passing or shared memory communication")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Suitable for I/O-intensive workloads"),(0,a.kt)("td",{parentName:"tr",align:null},"Suitable for CPU-intensive workloads")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"More overhead and limitations"),(0,a.kt)("td",{parentName:"tr",align:null},"Less overhead and more compatibility")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Provides fault tolerance and load balancing"),(0,a.kt)("td",{parentName:"tr",align:null},"Provides concurrency and memory efficiency")))),(0,a.kt)("p",null,"This table is based on the information from the documentation of nodejs cluster and nodejs worker threads. You can find more details and examples there.")))}p.isMDXComponent=!0},46204:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(83117),a=(n(67294),n(3905));const s={sidebar_position:1e3,sidebar_label:"Nodejs Worker Thread",title:"Nodejs Worker Thread",tags:["Nodejs Knowledge"]},o=void 0,l={unversionedId:"nodejs/nodejs/worker-thread",id:"nodejs/nodejs/worker-thread",title:"Nodejs Worker Thread",description:"Worker Thread in Nodejs",source:"@site/docs/nodejs/nodejs/worker-thread.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/worker-thread",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/worker-thread.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Worker Thread",title:"Nodejs Worker Thread",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Worker Thread vs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread-vs-cluster"},next:{title:"Nodejs From Zero To Hero",permalink:"/devviews/interviews/nodejs/intro"}},i={},d=[],m={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Worker Thread in Nodejs")),(0,a.kt)("p",null,"Worker threads are a way to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"run JavaScript code in parallel using multiple threads")),". They are similar to web workers in browsers, but they can also use some nodejs-specific features like file system access. Worker threads can communicate with each other and with the main thread using the ",(0,a.kt)("inlineCode",{parentName:"p"},"postMessage")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"on")," methods of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Worker")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parentPort")," objects. For example, you can create a worker thread and send a message to it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the main thread\nconst { Worker } = require('worker_threads');\nconst worker = new Worker('./worker.js'); // create a worker thread from a file\nworker.postMessage('Hello worker'); // send a message to the worker\n")),(0,a.kt)("p",null,"And you can receive the message from the worker like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the worker thread\nconst { parentPort } = require('worker_threads');\nparentPort.on('message', (msg) => { // listen for messages from the main thread\n  console.log('Worker received: ', msg); // print the message\n});\n")),(0,a.kt)("p",null,"Similarly, you can send a message from a worker to the main thread like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the worker thread\nconst { parentPort } = require('worker_threads');\nparentPort.postMessage('Hello main'); // send a message to the main thread\n")),(0,a.kt)("p",null,"And you can receive the message from the main thread like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the main thread\nconst { Worker } = require('worker_threads');\nconst worker = new Worker('./worker.js'); // create a worker thread from a file\nworker.on('message', (msg) => { // listen for messages from the worker\n  console.log('Main received: ', msg); // print the message\n});\n")),(0,a.kt)("p",null,"These are some examples of worker threads communication in nodejs. You can find more details and examples in the documentation of nodejs worker threads.")))}p.isMDXComponent=!0},97886:function(e,t,n){t.Z=n.p+"assets/images/cluster-63ae52454c74ef9147de54cac8a448d7.png"}}]);