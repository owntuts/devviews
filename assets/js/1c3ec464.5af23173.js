"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[4677],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4213:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Smooth Animation",title:"Smooth Animation",slug:"/smooth-animation",tags:["Basic React Native Interviews"]},o=void 0,s={unversionedId:"react-native/basic/smooth-animation",id:"react-native/basic/smooth-animation",title:"Smooth Animation",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/react-native/basic/smooth-animation.md",sourceDirName:"react-native/basic",slug:"/smooth-animation",permalink:"/devviews/interviews/smooth-animation",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/react-native/basic/smooth-animation.md",tags:[{label:"Basic React Native Interviews",permalink:"/devviews/interviews/tags/basic-react-native-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Smooth Animation",title:"Smooth Animation",slug:"/smooth-animation",tags:["Basic React Native Interviews"]},sidebar:"reactnativeInterviewSidebar",previous:{title:"setNativeProps",permalink:"/devviews/interviews/setNativeProps"},next:{title:"SSL Pinning",permalink:"/devviews/interviews/ssl-pinning"}},c={},l=[],u={toc:l},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Question:",type:"quest"},(0,a.kt)("p",{parentName:"admonition"},"*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nHow to make your React Native animations smooth?")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"ANSWER:")),(0,a.kt)("p",null,"  ","*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nHere are some tips to make your React Native app feel smooth on animations:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Use the Animated API instead of setState"),(0,a.kt)("li",{parentName:"ol"},"Use shouldComponentUpdate to prevent unnecessary re-renders"),(0,a.kt)("li",{parentName:"ol"},"Use requestAnimationFrame to schedule animations"),(0,a.kt)("li",{parentName:"ol"},"Use the InteractionManager API to prioritize animations"),(0,a.kt)("li",{parentName:"ol"},"Use native driver for animations"),(0,a.kt)("li",{parentName:"ol"},"Use FlatList instead of ScrollView for long lists")),(0,a.kt)("p",null,"An example of how to use ",(0,a.kt)("inlineCode",{parentName:"p"},"InteractionManager")," to deal with executing the expensive operation of fetching data to make React Native smooth:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useEffect, useState } from 'react';\nimport { View, Text, InteractionManager } from 'react-native';\n\nconst MyScreen = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    InteractionManager.runAfterInteractions(() => {\n      // Perform expensive operation here, such as fetching data from network\n      fetchData().then((result) => {\n        setData(result);\n        setIsLoading(false);\n      });\n    });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <View>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View>\n      <Text>{data}</Text>\n    </View>\n  );\n};\n\n"))))}p.isMDXComponent=!0}}]);