"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[1460,5417,2750,3292,8321,3431,395,8341,3629,6373,5090,574,6917,2062,6239,8914,5050,8174,5123,190,8803],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return v}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,v=p["".concat(o,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(v,s(s({ref:t},c),{},{components:n})):a.createElement(v,s({ref:t},c))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:i,s[1]=l;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},54312:function(e,t,n){n.d(t,{ZP:function(){return l}});var a=n(83117),i=(n(67294),n(3905));const r={toc:[]},s="wrapper";function l(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"interview"},n.level&&(0,i.kt)("span",{className:"level"},n.level),n.children))}l.isMDXComponent=!0},20304:function(e,t,n){n.r(t),n.d(t,{assets:function(){return S},contentTitle:function(){return I},default:function(){return _},frontMatter:function(){return D},metadata:function(){return T},toc:function(){return M}});var a=n(83117),i=(n(67294),n(3905)),r=n(54312),s=n(9026),l=n(80261),o=n(28317),d=n(93856),c=n(17480),p=n(99025),u=n(31120),m=n(81615),v=n(61376),k=n(2761),h=n(50756),g=n(11298),b=n(93740),N=(n(90938),n(70318)),f=n(6627),w=n(36016),y=n(94212),C=n(83883),x=n(72711);const D={sidebar_position:3,id:"c-sharp-interview-questions-answers",sidebar_label:"C# Interviews",title:"C# Interview Questions and Answers",tags:["C# Interviews"]},I=void 0,T={unversionedId:"c-sharp/c-sharp-interview-questions-answers",id:"c-sharp/c-sharp-interview-questions-answers",title:"C# Interview Questions and Answers",description:"Here, we discuss about C# Interview Questions & Answers!",source:"@site/docs/c-sharp/1.c-sharp-interviews.md",sourceDirName:"c-sharp",slug:"/c-sharp/c-sharp-interview-questions-answers",permalink:"/devviews/interviews/c-sharp/c-sharp-interview-questions-answers",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/1.c-sharp-interviews.md",tags:[{label:"C# Interviews",permalink:"/devviews/interviews/tags/c-interviews"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"c-sharp-interview-questions-answers",sidebar_label:"C# Interviews",title:"C# Interview Questions and Answers",tags:["C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"struct vs class",permalink:"/devviews/interviews/struct-vs-class.md-c-sharp"},next:{title:"intro",permalink:"/devviews/interviews/c-sharp/intro"}},S={},M=[{value:"Initialization of difference generic types in c#?",id:"initialization-of-difference-generic-types-in-c",level:2},{value:"Boxing vs Unboxing?",id:"boxing-vs-unboxing",level:2},{value:"Object Type vs Dynamic Type?",id:"object-type-vs-dynamic-type",level:2},{value:"Class vs Struct vs Record?",id:"class-vs-struct-vs-record",level:2},{value:"<code>new</code> vs <code>override</code>?",id:"new-vs-override",level:2},{value:"<code>in</code> vs <code>ref</code> vs <code>out</code>?",id:"in-vs-ref-vs-out",level:2},{value:"<code>init</code> vs <code>readonly</code>?",id:"init-vs-readonly",level:2},{value:"<code>private protected</code> Modifier?",id:"private-protected-modifier",level:2},{value:"<code>protected internal</code> Modifier?",id:"protected-internal-modifier",level:2},{value:"Hash Table vs Dictionary in C#?",id:"hash-table-vs-dictionary-in-c",level:2},{value:"<code>struct</code> vs <code>class</code> in C#?",id:"struct-vs-class-in-c",level:2},{value:"<code>deligate</code> in C#?",id:"deligate-in-c",level:2},{value:"Covariance of <code>deligate</code> in C#?",id:"covariance-of-deligate-in-c",level:2},{value:"Event in C#?",id:"event-in-c",level:2},{value:"Event vs Deligate ?",id:"event-vs-deligate-",level:2},{value:"Concurrent vs Parallel vs Asynchronous?",id:"concurrent-vs-parallel-vs-asynchronous",level:2},{value:"What Is Task?",id:"what-is-task",level:2},{value:"Explain Async Await?",id:"explain-async-await",level:2},{value:"What is Deadlock?",id:"what-is-deadlock",level:2}],A={toc:M},P="wrapper";function _(e){let{components:t,...n}=e;return(0,i.kt)(P,(0,a.Z)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Here, we discuss about C# Interview Questions & Answers!"),(0,i.kt)("h2",{id:""}),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"initialization-of-difference-generic-types-in-c"},"Initialization of difference generic types in c#?"),(0,i.kt)(o.default,{mdxType:"Initialization"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"boxing-vs-unboxing"},"Boxing vs Unboxing?"),(0,i.kt)(s.default,{mdxType:"BoxingvsUnboxing"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"object-type-vs-dynamic-type"},"Object Type vs Dynamic Type?"),(0,i.kt)(l.default,{mdxType:"ObjectvsDynamic"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"class-vs-struct-vs-record"},"Class vs Struct vs Record?"),(0,i.kt)(d.default,{mdxType:"ClassStructRecord"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"new-vs-override"},(0,i.kt)("inlineCode",{parentName:"h2"},"new")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"override"),"?"),(0,i.kt)(c.default,{mdxType:"NewOverride"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"in-vs-ref-vs-out"},(0,i.kt)("inlineCode",{parentName:"h2"},"in")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"ref")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"out"),"?"),(0,i.kt)(p.default,{mdxType:"InRefOut"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"init-vs-readonly"},(0,i.kt)("inlineCode",{parentName:"h2"},"init")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"readonly"),"?"),(0,i.kt)(u.default,{mdxType:"InitvsReadonly"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"private-protected-modifier"},(0,i.kt)("inlineCode",{parentName:"h2"},"private protected")," Modifier?"),(0,i.kt)(m.default,{mdxType:"PrivateProtected"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"protected-internal-modifier"},(0,i.kt)("inlineCode",{parentName:"h2"},"protected internal")," Modifier?"),(0,i.kt)(v.default,{mdxType:"ProtectedInternal"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"hash-table-vs-dictionary-in-c"},"Hash Table vs Dictionary in C#?"),(0,i.kt)(k.default,{mdxType:"HashtableDictionary"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"struct-vs-class-in-c"},(0,i.kt)("inlineCode",{parentName:"h2"},"struct")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"class")," in C#?"),(0,i.kt)(h.default,{mdxType:"StructvsClass"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"deligate-in-c"},(0,i.kt)("inlineCode",{parentName:"h2"},"deligate")," in C#?"),(0,i.kt)(g.default,{mdxType:"Deligate"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"covariance-of-deligate-in-c"},"Covariance of ",(0,i.kt)("inlineCode",{parentName:"h2"},"deligate")," in C#?"),(0,i.kt)(b.default,{mdxType:"CovarianceDeligate"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"event-in-c"},"Event in C#?"),(0,i.kt)(N.default,{mdxType:"Event"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"event-vs-deligate-"},"Event vs Deligate ?"),(0,i.kt)(f.default,{mdxType:"EventvsDeligate"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"concurrent-vs-parallel-vs-asynchronous"},"Concurrent vs Parallel vs Asynchronous?"),(0,i.kt)(w.default,{mdxType:"ConcurrentParallelAsynchronous"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"what-is-task"},"What Is Task?"),(0,i.kt)(y.default,{mdxType:"Task"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"explain-async-await"},"Explain Async Await?"),(0,i.kt)(C.default,{mdxType:"AsyncAwait"})),(0,i.kt)(r.ZP,{level:"Junior",mdxType:"Interview"},(0,i.kt)("h2",{id:"what-is-deadlock"},"What is Deadlock?"),(0,i.kt)(x.default,{mdxType:"Deadlock"})))}_.isMDXComponent=!0},6627:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Event vs Deligate",title:"Event vs Deligate In C# (C-Sharp)",slug:"/Event-vs-Deligate-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/Event-vs-Deligate",id:"c-sharp/basic/Event-vs-Deligate",title:"Event vs Deligate In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/Event-vs-Deligate.md",sourceDirName:"c-sharp/basic",slug:"/Event-vs-Deligate-c-sharp",permalink:"/devviews/interviews/Event-vs-Deligate-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/Event-vs-Deligate.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Event vs Deligate",title:"Event vs Deligate In C# (C-Sharp)",slug:"/Event-vs-Deligate-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",next:{title:"Task",permalink:"/devviews/interviews/task-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"Event")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"Deligate")," In C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nEvent is higher-level language construct that builds on top of delegates."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Deligate overwriting Problem:")," Suppose you have a delegate object that hold multiple method references. If someone uses the = to refer a new method then all the other method references will be lost. Event encapsulates a delegate; it avoids overwriting of a method reference by restricting the use of the assignment = operator."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Security Problem"),": a delegate can be invoked outside of a class (thus it can be called anywhere). Event overcomes this issue because an event cannot be invoked outside the class."))))}u.isMDXComponent=!0},94212:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Task",title:"Task In C# (C-Sharp)",slug:"/task-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/Task",id:"c-sharp/basic/Task",title:"Task In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/Task.md",sourceDirName:"c-sharp/basic",slug:"/task-c-sharp",permalink:"/devviews/interviews/task-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/Task.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Task",title:"Task In C# (C-Sharp)",slug:"/task-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Event vs Deligate",permalink:"/devviews/interviews/Event-vs-Deligate-c-sharp"},next:{title:"Explain About `Async` `Await` in C#",permalink:"/devviews/interviews/async-await-c-sharp"}},o={},d=[{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat is ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," in C#?  ",(0,i.kt)("inlineCode",{parentName:"p"},".Result")," vs",(0,i.kt)("inlineCode",{parentName:"p"},".Wait()"),"?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," is implementation of asynchronous programming in C#."),(0,i.kt)("h4",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'Task<string> task = Task<string>.Run(() =>\n{\n    // This is the work that will be done asynchronously\n    return "Hello, World!";\n});\n\nstring result = await task; // Wait for the task to finish and get the result\n\n')),(0,i.kt)("h4",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\nusing System.Threading.Tasks;\n\npublic class Example {\n    public static void Main() {\n      // Declare 4 Tasks. The first one start (`StartNew`)the chain, the others chains to the first (`ContinueWith`)\n       Task<DataType> getDataTask = Task.Factory.StartNew(() => { return GetData(); } );\n       Task<ProcessedDataType> processDataTask = getDataTask.ContinueWith((data) => { return ProcessData(data);} );\n       Task saveDataTask = processDataTask.ContinueWith((pData) => { SaveData(pData)} );\n       Task<string> displayDataTask = processDataTask.ContinueWith((pData) => { return CreateDisplayString(pData); } );\n\n       Console.WriteLine(displayDataTask.Result);\n      //  ensure that the `SaveData` operation completes before the application ends.\n       saveDataTask.Wait();\n    }\n}\n\n")),(0,i.kt)("p",null,"The difference from calling .Result or .Wait() is that the await keyword sends the current thread back to the thread pool, instead of keeping it in a blocked state.")))}u.isMDXComponent=!0},83883:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Explain About `Async` `Await` in C#",title:"Explain About `Async` `Await` in C# (C-Sharp)",slug:"/async-await-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/async-await",id:"c-sharp/basic/async-await",title:"Explain About `Async` `Await` in C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/async-await.md",sourceDirName:"c-sharp/basic",slug:"/async-await-c-sharp",permalink:"/devviews/interviews/async-await-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/async-await.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Explain About `Async` `Await` in C#",title:"Explain About `Async` `Await` in C# (C-Sharp)",slug:"/async-await-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Task",permalink:"/devviews/interviews/task-c-sharp"},next:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/differences-boxing-vs-unboxing-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nExplain About ",(0,i.kt)("inlineCode",{parentName:"p"},"Async")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Await")," in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn C#, ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," are keywords used for asynchronous programming."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public async Task<ResultType> DoWorkAsync()\n{\n  ResultType retVal;\n  try {\n    Task<APIResult> apiResultTask = CallAnAPIAsync();\n    var fileName = CreateFileName();\n    var apiResult = await apiResultTask;\n    await WriteToAFileAsync(fileName, apiResult);\n    retVal = await StartAsyncOperation(fileName);\n  } catch (RealException rex) {\n    HandleError(rex);\n    retVal = null\n  }\n  return retVal;\n}\n\n"))))}u.isMDXComponent=!0},9026:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",slug:"/differences-boxing-vs-unboxing-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/boxing-vs-unboxing",id:"c-sharp/basic/boxing-vs-unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/boxing-vs-unboxing.md",sourceDirName:"c-sharp/basic",slug:"/differences-boxing-vs-unboxing-c-sharp",permalink:"/devviews/interviews/differences-boxing-vs-unboxing-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/boxing-vs-unboxing.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",slug:"/differences-boxing-vs-unboxing-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Explain About `Async` `Await` in C#",permalink:"/devviews/interviews/async-await-c-sharp"},next:{title:"Built-in delegates",permalink:"/devviews/interviews/built-in-delegates-c-sharp"}},o={},d=[{value:"Performance Caveat",id:"performance-caveat",level:3}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat are Differences between ",(0,i.kt)("strong",{parentName:"p"},"Boxing")," vs ",(0,i.kt)("strong",{parentName:"p"},"Unboxing")," in C#? and caveat when using both?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nThere are two types of ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"converting"))," a value of this type to other type. That's ",(0,i.kt)("strong",{parentName:"p"},"Boxing")," & ",(0,i.kt)("strong",{parentName:"p"},"Unboxing"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Boxing")," means converting a ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"value type"))," to ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"object type"))," or to an ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"interface"))," type by wraping the value inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")," instance and stores it on the managed heap."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int i = 123;\n// boxing i (wrapping i in an object).\nobject o = i;\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Unboxing"),": is the reverse process that extracts the value type from the object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"o = 123;\n// unboxing (extracts the value o)\ni = (int)o;  \n")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Boxing"),(0,i.kt)("th",{parentName:"tr",align:null},"Unboxing"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Implicit Conversion"),(0,i.kt)("td",{parentName:"tr",align:null},"Explicit Conversion")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Convert Value Type to Reference"),(0,i.kt)("td",{parentName:"tr",align:null},"Convert Reference Type to Value Type")))),(0,i.kt)("h3",{id:"performance-caveat"},"Performance Caveat"),(0,i.kt)("p",null,"Boxing & Unboxing is expensive computationally due to allocating/unallocating & contruction/deconstruction of the object used for Boxing/Unboxing.")))}u.isMDXComponent=!0},90938:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Built-in delegates",title:"Built-in delegates In C# (C-Sharp)",slug:"/built-in-delegates-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/built-in-delegates",id:"c-sharp/basic/built-in-delegates",title:"Built-in delegates In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/built-in-delegates.md",sourceDirName:"c-sharp/basic",slug:"/built-in-delegates-c-sharp",permalink:"/devviews/interviews/built-in-delegates-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/built-in-delegates.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Built-in delegates",title:"Built-in delegates In C# (C-Sharp)",slug:"/built-in-delegates-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/differences-boxing-vs-unboxing-c-sharp"},next:{title:"class vs struct vs record",permalink:"/devviews/interviews/class-struct-record"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nBuilt-in delegates in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nC# has some built-in delegates that make it easy to create and work with delegates. Here are the four built-in delegates in C#:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Delegate"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Action")),(0,i.kt)("td",{parentName:"tr",align:null},"Represents a method that takes no parameters and returns no value."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'Action printMessage = () => Console.WriteLine("Hello World!");')," This creates an ",(0,i.kt)("inlineCode",{parentName:"td"},"Action")," delegate called ",(0,i.kt)("inlineCode",{parentName:"td"},"printMessage"),' that will print out "Hello World!" when called.')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Func")),(0,i.kt)("td",{parentName:"tr",align:null},"Represents a method that takes one or more parameters and returns a value."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'Func addAndFormat = (a, b) => $"The sum of {a} and {b} is {a + b}.";')," This creates a ",(0,i.kt)("inlineCode",{parentName:"td"},"Func")," delegate called ",(0,i.kt)("inlineCode",{parentName:"td"},"addAndFormat")," that will take two ",(0,i.kt)("inlineCode",{parentName:"td"},"int")," parameters and return a formatted ",(0,i.kt)("inlineCode",{parentName:"td"},"string")," with their sum.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Predicate")),(0,i.kt)("td",{parentName:"tr",align:null},"Represents a method that takes one parameter and returns a boolean value."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Predicate isEven = (x) => x % 2 == 0;")," This creates a ",(0,i.kt)("inlineCode",{parentName:"td"},"Predicate")," delegate called ",(0,i.kt)("inlineCode",{parentName:"td"},"isEven")," that will return ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," if the input integer is even, and ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," otherwise.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"EventHandler")),(0,i.kt)("td",{parentName:"tr",align:null},"Represents a method that handles an event."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"public event EventHandler MyEvent;")," This creates an ",(0,i.kt)("inlineCode",{parentName:"td"},"event")," that can be subscribed to with an ",(0,i.kt)("inlineCode",{parentName:"td"},"EventHandler")," delegate. When the event is raised, all registered handlers will be called.")))),(0,i.kt)("p",null,":::note\nThere's ",(0,i.kt)("inlineCode",{parentName:"p"},"Action<>")," is another built-in delegate in C# that is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Action"),", but allows for methods that take one or more arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'Action<int, string> logData = (id, message) => Console.WriteLine($"ID: {id}, Message: {message}");\nlogData(123, "An important message");\n\n')),(0,i.kt)("p",null,":::")))}u.isMDXComponent=!0},93856:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"class vs struct vs record",title:"class vs struct vs record in C-Sharp",slug:"/class-struct-record",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/class-struct-record",id:"c-sharp/basic/class-struct-record",title:"class vs struct vs record in C-Sharp",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/class-struct-record.md",sourceDirName:"c-sharp/basic",slug:"/class-struct-record",permalink:"/devviews/interviews/class-struct-record",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/class-struct-record.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"class vs struct vs record",title:"class vs struct vs record in C-Sharp",slug:"/class-struct-record",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Built-in delegates",permalink:"/devviews/interviews/built-in-delegates-c-sharp"},next:{title:"Concurrent vs Parallel vs Asynchronous",permalink:"/devviews/interviews/concurrent-vs-parallel-vs-asynchronous"}},o={},d=[{value:"An example of how to define and use a <code>record</code> in C#:",id:"an-example-of-how-to-define-and-use-a-record-in-c",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"class")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"record")," in C#? Give an example using ",(0,i.kt)("inlineCode",{parentName:"p"},"record"),"?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("p",null,"Here's a summary of the differences between the three types:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Type")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Allocation")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Access")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Inheritance")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Mutability")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Class")),(0,i.kt)("td",{parentName:"tr",align:null},"Heap"),(0,i.kt)("td",{parentName:"tr",align:null},"Reference"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Mutable")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Struct")),(0,i.kt)("td",{parentName:"tr",align:null},"Stack"),(0,i.kt)("td",{parentName:"tr",align:null},"Value"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Mutable")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Record")),(0,i.kt)("td",{parentName:"tr",align:null},"Heap"),(0,i.kt)("td",{parentName:"tr",align:null},"Reference"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Immutable")))),(0,i.kt)("p",null,"In general, use a ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," when you need complex behavior, inheritance, and references, use a ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," when you need a simple data container that can be passed around by value, and use a ",(0,i.kt)("inlineCode",{parentName:"p"},"record")," when you need an immutable data container with some additional functionality."),(0,i.kt)("h4",{id:"an-example-of-how-to-define-and-use-a-record-in-c"},"An example of how to define and use a ",(0,i.kt)("inlineCode",{parentName:"h4"},"record")," in C#:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\n\npublic class MyClass\n{\n    public record Person(string Name, int Age);\n\n    public static void Main(string[] args)\n    {\n        Person person = new Person("John Smith", 30);\n\n        // Accessing values of a record\n        string name = person.Name; // "John Smith"\n        int age = person.Age; // 30\n\n        // Attempt to update the object\n        // This won\'t work because records are immutable\n        // person.Age = 31;\n\n        // Creating a new Person record with updated age\n        Person updatedPerson = person with { Age = 31 };\n        Console.WriteLine(updatedPerson.Age); // Output: 31\n    }\n}\n\n'))))}u.isMDXComponent=!0},36016:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Concurrent vs Parallel vs Asynchronous",title:"Concurrent vs Parallel vs Asynchronous",slug:"/concurrent-vs-parallel-vs-asynchronous",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/concurrent-vs-parallel-vs-asynchronous",id:"c-sharp/basic/concurrent-vs-parallel-vs-asynchronous",title:"Concurrent vs Parallel vs Asynchronous",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/concurrent-vs-parallel-vs-asynchronous.md",sourceDirName:"c-sharp/basic",slug:"/concurrent-vs-parallel-vs-asynchronous",permalink:"/devviews/interviews/concurrent-vs-parallel-vs-asynchronous",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/concurrent-vs-parallel-vs-asynchronous.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Concurrent vs Parallel vs Asynchronous",title:"Concurrent vs Parallel vs Asynchronous",slug:"/concurrent-vs-parallel-vs-asynchronous",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"class vs struct vs record",permalink:"/devviews/interviews/class-struct-record"},next:{title:"Covariance in delegate",permalink:"/devviews/interviews/covariance-in-delegate-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nConcurrent vs Parallel vs Asynchronous")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1. Synchronous execution"),": doing things one after the another."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2. Asynchronous"),": not having to wait for one task to finish before starting another. (i.e, The execution thread should not wait for an I/O-bound or CPU-bound task to finish.)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"3. Concurrent"),": doing multiple things at the same time. (i.e, Multiple threads run in the background.)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"4. Parallel"),": doing multiple copies of something at the same time.")))}u.isMDXComponent=!0},93740:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Covariance in delegate",title:"Covariance in delegate In C# (C-Sharp)",slug:"/covariance-in-delegate-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/covariance-in-delegate",id:"c-sharp/basic/covariance-in-delegate",title:"Covariance in delegate In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/covariance-in-delegate.md",sourceDirName:"c-sharp/basic",slug:"/covariance-in-delegate-c-sharp",permalink:"/devviews/interviews/covariance-in-delegate-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/covariance-in-delegate.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Covariance in delegate",title:"Covariance in delegate In C# (C-Sharp)",slug:"/covariance-in-delegate-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Concurrent vs Parallel vs Asynchronous",permalink:"/devviews/interviews/concurrent-vs-parallel-vs-asynchronous"},next:{title:"what is Deadlocks",permalink:"/devviews/interviews/deadlock"}},o={},d=[{value:"Example",id:"example",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nexplain Covariance in delegate in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nWhen you assign a method to a delegate, the method signature does not have to match the delegate type exactly. It can be Covariance of deligate type insteads."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"class Parent { }\nclass Child : Parent { }\ndelegate Parent CovarianceDelegate(); // the delegate's return type is the base class\nstatic Child CovarianceMethod() // the method's return type is the derived class\n{\n    return new Child();\n}\n\u200b\nstatic void Main(string[] args)\n{\n    CovarianceDelegate delegateObject = CovarianceMethod;\n    Parent result = delegateObject();\n    \n    /*\n        cast is needed if you want to hold the return value in an instance of the derived class e.g.:\n        Child result = (Child)result(); or Child result = result() as Child;\n    */\n}\n"))))}u.isMDXComponent=!0},72711:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"what is Deadlocks",title:"what is Deadlocks",slug:"/deadlock",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/deadlock",id:"c-sharp/basic/deadlock",title:"what is Deadlocks",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/deadlock.md",sourceDirName:"c-sharp/basic",slug:"/deadlock",permalink:"/devviews/interviews/deadlock",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/deadlock.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"what is Deadlocks",title:"what is Deadlocks",slug:"/deadlock",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Covariance in delegate",permalink:"/devviews/interviews/covariance-in-delegate-c-sharp"},next:{title:"deligate",permalink:"/devviews/interviews/deligate-c-sharp"}},o={},d=[{value:"Here&#39;s an example of a deadlock in C#:",id:"heres-an-example-of-a-deadlock-in-c",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nwhat is Deadlocks? & example in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,i.kt)("strong",{parentName:"p"},"Deadlock")," is a situation that can occur in concurrent programming where two or more threads are blocked, ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"waiting for each other")),' to release a resource or finish executing some code, resulting in a standstill or "deadlock".'),(0,i.kt)("h4",{id:"heres-an-example-of-a-deadlock-in-c"},"Here's an example of a deadlock in C#:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyApiController : ApiController\n{\n  // Top-level method\n  public ActionResult HandleRESTApiCall(){\n    SomeType someObj = DoSomethingAsync().Result;\n    return OkResult(someObj);\n  }\n\n  private async Task<SomeType> DoSomethingAsync(){\n    var someData = await GetDataAsync();\n    return new SomeType(someData);\n  }\n}\n\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Deadlock",src:n(74418).Z,width:"1020",height:"419"})),(0,i.kt)("p",null,"Pay attention to ",(0,i.kt)("inlineCode",{parentName:"p"},".Result")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," keyword."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"First, ",(0,i.kt)("inlineCode",{parentName:"li"},".Result")," lock resource to wait for ",(0,i.kt)("inlineCode",{parentName:"li"},"DoSomethingAsync()")," completed."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"DoSomethingAsync()")," runs -> calls ",(0,i.kt)("inlineCode",{parentName:"li"},"GetDataAsync()")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"await")," lock resource & wait for ",(0,i.kt)("inlineCode",{parentName:"li"},"GetDataAsync()")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"GetDataAsync()")," returns result but ",(0,i.kt)("inlineCode",{parentName:"li"},"await")," need resource (HTTP context) released to execute but ",(0,i.kt)("inlineCode",{parentName:"li"},"DoSomethingAsync().Result")," holds that resource and waiting for ",(0,i.kt)("inlineCode",{parentName:"li"},"DoSomethingAsync()")," returns.")),(0,i.kt)("p",null,"That means ",(0,i.kt)("inlineCode",{parentName:"p"},".Result")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"wait"),"  are waiting to each other => cause deadlock."),(0,i.kt)("p",null,"There are two solutions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Do not block on async code.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"// Top-level method\npublic async ActionResult HandleRESTApiCall(){\n  SomeType someObj = await DoSomethingAsync(); // remove .Result\n  return OkResult(someObj);\n}\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"private async Task<SomeType> DoSomethingAsync(){\n  var someData = await GetDataAsync().ConfigureAwait(false);\n  return new SomeType(someData);\n}\n"))))}u.isMDXComponent=!0},11298:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"deligate",title:"deligate In C# (C-Sharp)",slug:"/deligate-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/deligate",id:"c-sharp/basic/deligate",title:"deligate In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/deligate.md",sourceDirName:"c-sharp/basic",slug:"/deligate-c-sharp",permalink:"/devviews/interviews/deligate-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/deligate.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"deligate",title:"deligate In C# (C-Sharp)",slug:"/deligate-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"what is Deadlocks",permalink:"/devviews/interviews/deadlock"},next:{title:"Event in C#",permalink:"/devviews/interviews/event-c-sharp"}},o={},d=[{value:"Chained Delegate",id:"chained-delegate",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nExplain about ",(0,i.kt)("inlineCode",{parentName:"p"},"delegate")," in c#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn C#, a delegate is a type that represents references to methods with a specific signature. Delegates are similar to function pointers in C and C++, but with some additional features."),(0,i.kt)("p",null,"Here are some key points to understand about delegates:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A delegate is a reference type."),(0,i.kt)("li",{parentName:"ul"},"Delegates are used to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"define method signatures"))," that can be assigned to variables and passed as method arguments."),(0,i.kt)("li",{parentName:"ul"},"Delegates can be used to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"implement callback"))," functionality, where a method is called in response to an event or some other trigger."),(0,i.kt)("li",{parentName:"ul"},"Delegates can reference static or instance methods."),(0,i.kt)("li",{parentName:"ul"},"Delegates can be ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"multicast")),", meaning that they can reference multiple methods that will be called in sequence when the delegate is invoked."),(0,i.kt)("li",{parentName:"ul"},"Delegates can be ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"chained"))," together using the ",(0,i.kt)("inlineCode",{parentName:"li"},"+")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-")," operators to add or remove methods from the invocation list."),(0,i.kt)("li",{parentName:"ul"},"A delegate instance is ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"immutable")),", so adding or removing a method from a delegate returns a new delegate instance with the modified invocation list.")),(0,i.kt)("p",null,"Here is an example of how to use a delegate in C#:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Define a delegate type\npublic delegate void MyDelegate(int x);\n\n// Create a method to be referenced by the delegate (method signature)\npublic void MyMethod(int x)\n{\n    Console.WriteLine($"MyMethod was called with argument {x}");\n}\n\n// Create a delegate instance that references the method\nMyDelegate myDelegate = new MyDelegate(MyMethod);\n// or\n// MyDelegate myDelegate = MyMethod;\n\n// Invoke the delegate\nmyDelegate(42); // The output will be "MyMethod was called with argument 42"\n\n')),(0,i.kt)("h4",{id:"chained-delegate"},"Chained Delegate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Define a delegate type\npublic delegate void MyDelegate();\n\n// Define method 1\npublic void Method1()\n{\n    Console.WriteLine("Method 1");\n}\n\n// Define method 2\npublic void Method2()\n{\n    Console.WriteLine("Method 2");\n}\n\n// Create a delegate instance that chains together Method1 and Method2\nMyDelegate myDelegate = new MyDelegate(Method1);\nmyDelegate += Method2;\n\n// Invoke the delegate\nmyDelegate(); // The output will be "Method 1" followed by "Method 2"\n\n// using reference \nforeach (MyDelegate fnc in myDelegate.GetInvocationList())\n{\n    Console.WriteLine(fnc());\n}\n\n'))))}u.isMDXComponent=!0},70318:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Event in C#",title:"explain about `Event` in C# (C-Sharp)",slug:"/event-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/event",id:"c-sharp/basic/event",title:"explain about `Event` in C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/event.md",sourceDirName:"c-sharp/basic",slug:"/event-c-sharp",permalink:"/devviews/interviews/event-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/event.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Event in C#",title:"explain about `Event` in C# (C-Sharp)",slug:"/event-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"deligate",permalink:"/devviews/interviews/deligate-c-sharp"},next:{title:"Hash Table vs Dictionary",permalink:"/devviews/interviews/hashtable-dictionary-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nExplain about ",(0,i.kt)("inlineCode",{parentName:"p"},"Event")," in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn C#, an ",(0,i.kt)("inlineCode",{parentName:"p"},"event")," is a language feature that enables classes to send notifications or signals to other objects. It follows the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"publisher/subscriber pattern")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Define the event arguments\npublic class DataReceivedEventArgs : EventArgs\n{\n    public string Data { get; set; }\n}\n\n// Define the publisher class\npublic class DataReceiver\n{\n    // Declare the event\n    public event EventHandler<DataReceivedEventArgs> DataReceived;\n    \n    public void ReceiveData(string data)\n    {\n        // Fire the event\n        DataReceived?.Invoke(this, new DataReceivedEventArgs { Data = data });\n    }\n}\n\n// Define the subscriber class\npublic class DataConsumer\n{\n    public void OnDataReceived(object sender, DataReceivedEventArgs e)\n    {\n        Console.WriteLine($"Received data: {e.Data}");\n    }\n}\n\n// Usage\nvar receiver = new DataReceiver();\nvar consumer = new DataConsumer();\n\nreceiver.DataReceived += consumer.OnDataReceived; // Subscribe to the event\nreceiver.ReceiveData("Some data"); // Raise the event\n\n'))))}u.isMDXComponent=!0},2761:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Hash Table vs Dictionary",title:"Hash Table vs Dictionary In C# (C-Sharp)",slug:"/hashtable-dictionary-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/hashtable-dictionary",id:"c-sharp/basic/hashtable-dictionary",title:"Hash Table vs Dictionary In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/hashtable-dictionary.md",sourceDirName:"c-sharp/basic",slug:"/hashtable-dictionary-c-sharp",permalink:"/devviews/interviews/hashtable-dictionary-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/hashtable-dictionary.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Hash Table vs Dictionary",title:"Hash Table vs Dictionary In C# (C-Sharp)",slug:"/hashtable-dictionary-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Event in C#",permalink:"/devviews/interviews/event-c-sharp"},next:{title:"in vs ref vs out Modifiers",permalink:"/devviews/interviews/in-ref-out-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nHash Table vs Dictionary in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"Hashtable")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Dictionary")," are two collections in C# that allow you to store data as key-value pairs. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Hashtable")," class is an older collection that was introduced in the early versions of C#. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Feature"),(0,i.kt)("th",{parentName:"tr",align:null},"Hashtable"),(0,i.kt)("th",{parentName:"tr",align:null},"Dictionary"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Type Safety"),(0,i.kt)("td",{parentName:"tr",align:null},"Not type-safe (any type of object can be stored)"),(0,i.kt)("td",{parentName:"tr",align:null},"Type-safe (you specify the type of the key and value to be stored)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Boxing and Unboxing"),(0,i.kt)("td",{parentName:"tr",align:null},"All values are stored as objects; can be slow for value types"),(0,i.kt)("td",{parentName:"tr",align:null},"Values are stored as the specified type; no overhead for boxing and unboxing")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NULL keys"),(0,i.kt)("td",{parentName:"tr",align:null},"Allows null keys"),(0,i.kt)("td",{parentName:"tr",align:null},"Does not allow null keys")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Performance for small/medium data sets"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides faster performance"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides slower performance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Performance for large data sets"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides slower performance"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides faster performance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Enumeration"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides a non-generic enumerator; requires casting for strongly typed values"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides a generic enumerator; no need for casting")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Hashtable example\nHashtable ht = new Hashtable();\nht.Add("key1", "value1");\nht.Add("key2", 25);\nht.Add("key3", true);\n\nforeach (DictionaryEntry item in ht)\n{\n    Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");\n}\n\n// Output:\n// Key: key1, Value: value1\n// Key: key2, Value: 25\n// Key: key3, Value: True\n\n// Dictionary example\nDictionary<string, object> dict = new Dictionary<string, object>();\ndict.Add("key1", "value1");\ndict.Add("key2", 25);\ndict.Add("key3", true);\n\nforeach (KeyValuePair<string, object> item in dict)\n{\n    Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");\n}\n\n// Output:\n// Key: key1, Value: value1\n// Key: key2, Value: 25\n// Key: key3, Value: True\n\n'))))}u.isMDXComponent=!0},99025:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"in vs ref vs out Modifiers",title:"in vs ref vs out Modifiers in C#?",slug:"/in-ref-out-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/in-ref-out",id:"c-sharp/basic/in-ref-out",title:"in vs ref vs out Modifiers in C#?",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/in-ref-out.md",sourceDirName:"c-sharp/basic",slug:"/in-ref-out-c-sharp",permalink:"/devviews/interviews/in-ref-out-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/in-ref-out.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"in vs ref vs out Modifiers",title:"in vs ref vs out Modifiers in C#?",slug:"/in-ref-out-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Hash Table vs Dictionary",permalink:"/devviews/interviews/hashtable-dictionary-c-sharp"},next:{title:"Initialization",permalink:"/devviews/interviews/initialization-c-sharp"}},o={},d=[{value:"The <code>in</code> modifier example",id:"the-in-modifier-example",level:4},{value:"The <code>ref</code> modifier example",id:"the-ref-modifier-example",level:4},{value:"The <code>out</code> modifier example",id:"the-out-modifier-example",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"in")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"out")," Modifiers in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("p",null,"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"in"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ref"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"out")," modifiers are used to modify how parameters are passed to methods or functions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"in"),": read data from the outside"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"out"),": do something then pass data to the outside"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ref"),": reference (sync) to the outside data")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Modifier"),(0,i.kt)("th",{parentName:"tr",align:null},"Parameter Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Changes to Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Initialized Beforehand"),(0,i.kt)("th",{parentName:"tr",align:null},"Must be Assigned a Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"in")),(0,i.kt)("td",{parentName:"tr",align:null},"Value type (including ",(0,i.kt)("inlineCode",{parentName:"td"},"struct"),") and ReadOnly reference type"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ref")),(0,i.kt)("td",{parentName:"tr",align:null},"Any type"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"out")),(0,i.kt)("td",{parentName:"tr",align:null},"Any type"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,i.kt)("h4",{id:"the-in-modifier-example"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"in")," modifier example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Example usage of `in`\npublic static void DisplayPerson(in Person person)\n{\n    Console.WriteLine($"First Name: {person.FirstName}, Last Name: {person.LastName}");\n}\n\n// Usage\nPerson person1 = new Person("John", "Doe");\nDisplayPerson(person1);\n\n')),(0,i.kt)("h4",{id:"the-ref-modifier-example"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"ref")," modifier example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Example usage of `ref`\npublic static void ChangeAge(ref Person person, int age)\n{\n    person.Age = age;\n}\n\n// Usage\nPerson person1 = new Person("John", "Doe");\nChangeAge(ref person1, 30);\n\n')),(0,i.kt)("h4",{id:"the-out-modifier-example"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"out")," modifier example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"// Example usage of `out`\npublic static void Divide(int dividend, int divisor, out int quotient, out int remainder)\n{\n    quotient = dividend / divisor;\n    remainder = dividend % divisor;\n}\n\n// Usage\nint quotient, remainder;\nDivide(10, 3, out quotient, out remainder);\n\n"))))}u.isMDXComponent=!0},28317:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Initialization",title:"Initialization In C# (C-Sharp)",slug:"/initialization-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/initialization",id:"c-sharp/basic/initialization",title:"Initialization In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/initialization.md",sourceDirName:"c-sharp/basic",slug:"/initialization-c-sharp",permalink:"/devviews/interviews/initialization-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/initialization.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Initialization",title:"Initialization In C# (C-Sharp)",slug:"/initialization-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"in vs ref vs out Modifiers",permalink:"/devviews/interviews/in-ref-out-c-sharp"},next:{title:"init vs readonly",permalink:"/devviews/interviews/init-vs-readonly-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," : "),(0,i.kt)("p",{parentName:"admonition"},"Initialization of difference generic types in c#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"1. Initializing a List of strings:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'List<string> stringList = new List<string> { "foo", "bar", "baz" };\n')),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"2. Initializing a Dictionary with a string key and an integer value:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'Dictionary<string, int> dict = new Dictionary<string, int> { {"foo", 1}, {"bar", 2}, {"baz", 3} };\n')),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"3. Hash table")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'Hashtable<string, string> hashtable = new Hashtable<string, string>(){  {"UK", "London"},   {"USA", "Chicago"}, {"India", "Mumbai"}};\n')),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"4. Creating an instance of a generic class:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'MyGenericClass<string> myObj = new MyGenericClass<string>("hello");\n')),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"5. Creating an instance of a generic method:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"int result = MyGenericMethod<int>(10, 20);\n"))))}u.isMDXComponent=!0},31120:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"init vs readonly",title:"init vs readonly In C# (C-Sharp)",slug:"/init-vs-readonly-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/int-vs-readonly",id:"c-sharp/basic/int-vs-readonly",title:"init vs readonly In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/int-vs-readonly.md",sourceDirName:"c-sharp/basic",slug:"/init-vs-readonly-c-sharp",permalink:"/devviews/interviews/init-vs-readonly-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/int-vs-readonly.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"init vs readonly",title:"init vs readonly In C# (C-Sharp)",slug:"/init-vs-readonly-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Initialization",permalink:"/devviews/interviews/initialization-c-sharp"},next:{title:"new vs override",permalink:"/devviews/interviews/new-vs-override"}},o={},d=[{value:"Example of <code>init</code> in constructor",id:"example-of-init-in-constructor",level:4},{value:"Example of <code>init</code> in object initializer",id:"example-of-init-in-object-initializer",level:4},{value:"Example of <code>readonly</code> in constructor",id:"example-of-readonly-in-constructor",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"init")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," in c#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nBoth ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," are used to ensure that a field's value can only be initialized once and cannot be changed afterwards (",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"immutable")),"). However, there are some differences between the two modifiers."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Modifier"),(0,i.kt)("th",{parentName:"tr",align:null},"Applicable to"),(0,i.kt)("th",{parentName:"tr",align:null},"Value Assigned"),(0,i.kt)("th",{parentName:"tr",align:null},"Value Changeable"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"init")),(0,i.kt)("td",{parentName:"tr",align:null},"Properties and fields"),(0,i.kt)("td",{parentName:"tr",align:null},"During object construction & object initializer only"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"readonly")),(0,i.kt)("td",{parentName:"tr",align:null},"Fields only"),(0,i.kt)("td",{parentName:"tr",align:null},"During object construction only"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h4",{id:"example-of-init-in-constructor"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"init")," in constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class Person\n{\n    public string Name { get; init; }\n\n    // set variable in constructor\n    public Person(string name)\n    {\n        Name = name;\n    }\n}\n\nvar person = new Person("John");\nperson.Name = "Jane"; // This will cause a compile-time error\n')),(0,i.kt)("h4",{id:"example-of-init-in-object-initializer"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"init")," in object initializer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class Person\n{\n  public string Name {get; init;}\n}\n\nvar person = new Person\n{\n  // set variable in object initializer\n  Name = "Jane"\n}\n')),(0,i.kt)("h4",{id:"example-of-readonly-in-constructor"},"Example of ",(0,i.kt)("inlineCode",{parentName:"h4"},"readonly")," in constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class Circle\n{\n    private readonly double _radius;\n\n    // set variable in constructor, can't be change later\n    public Circle(double radius)\n    {\n        _radius = radius;\n    }\n\n    public double CalculateArea()\n    {\n        _radius = 1; // result in error\n    }\n}\n"))))}u.isMDXComponent=!0},17480:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"new vs override",title:"new vs override In C# (C-Sharp)",slug:"/new-vs-override",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/new-vs-override",id:"c-sharp/basic/new-vs-override",title:"new vs override In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/new-vs-override.md",sourceDirName:"c-sharp/basic",slug:"/new-vs-override",permalink:"/devviews/interviews/new-vs-override",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/new-vs-override.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"new vs override",title:"new vs override In C# (C-Sharp)",slug:"/new-vs-override",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"init vs readonly",permalink:"/devviews/interviews/init-vs-readonly-c-sharp"},next:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/dynamic-type-vs-object-type-variables-c-sharp"}},o={},d=[{value:"Here&#39;s an example of using <code>new</code>:",id:"heres-an-example-of-using-new",level:4},{value:"Here&#39;s an example of using <code>override</code>:",id:"heres-an-example-of-using-override",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"new")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"override")," method in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"new")," are used for method hiding"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"override")," are used for method overriding,")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"th"},"new")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"th"},"override")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Method hiding"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes, the method with the same name in the base class is hidden"),(0,i.kt)("td",{parentName:"tr",align:null},"No, the method with the same name in the base class is not hidden")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Method overriding"),(0,i.kt)("td",{parentName:"tr",align:null},"No, a new implementation of the method is created in the derived class"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes, a new implementation of the method replaces the implementation in the base class")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Signature"),(0,i.kt)("td",{parentName:"tr",align:null},"Can have a different signature from the method in the base class"),(0,i.kt)("td",{parentName:"tr",align:null},"Must have the same signature as the method in the base class")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Polymorphism"),(0,i.kt)("td",{parentName:"tr",align:null},"Method resolution depends on the object type that is used to call it"),(0,i.kt)("td",{parentName:"tr",align:null},"Method resolution is always the current implementation of the method in the derived class")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Use case"),(0,i.kt)("td",{parentName:"tr",align:null},"Used to provide a new implementation of a method that is not intended to replace the implementation in the base class"),(0,i.kt)("td",{parentName:"tr",align:null},"Used to customize the behavior of an inherited method and provide functionality that is specific to the derived class")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Syntax"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"public new returnType MethodName(parameters) { ... }")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"public override returnType MethodName(parameters) { ... }"))))),(0,i.kt)("h4",{id:"heres-an-example-of-using-new"},"Here's an example of using ",(0,i.kt)("inlineCode",{parentName:"h4"},"new"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class BaseClass\n{\n    public virtual void SayHello()\n    {\n        Console.WriteLine("Hello from BaseClass");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public new void SayHello()\n    {\n        Console.WriteLine("Hello from DerivedClass");\n    }\n}\n\n// Usage\nBaseClass obj1 = new DerivedClass();\nobj1.SayHello(); // Output: "Hello from BaseClass"\n\nDerivedClass obj2 = new DerivedClass();\nobj2.SayHello(); // Output: "Hello from DerivedClass"\n')),(0,i.kt)("h4",{id:"heres-an-example-of-using-override"},"Here's an example of using ",(0,i.kt)("inlineCode",{parentName:"h4"},"override"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class BaseClass\n{\n    public virtual void SayHello()\n    {\n        Console.WriteLine("Hello from BaseClass");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void SayHello()\n    {\n        Console.WriteLine("Hello from DerivedClass");\n    }\n}\n\n// Usage\nBaseClass obj1 = new DerivedClass();\nobj1.SayHello(); // Output: "Hello from DerivedClass"\n\nDerivedClass obj2 = new DerivedClass();\nobj2.SayHello(); // Output: "Hello from DerivedClass"\n\n'))))}u.isMDXComponent=!0},80261:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Difference Between Dynamic type vs Object type variables In C# (C-Sharp)",slug:"/dynamic-type-vs-object-type-variables-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/object-vs-dynamic-type",id:"c-sharp/basic/object-vs-dynamic-type",title:"Difference Between Dynamic type vs Object type variables In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/object-vs-dynamic-type.md",sourceDirName:"c-sharp/basic",slug:"/dynamic-type-vs-object-type-variables-c-sharp",permalink:"/devviews/interviews/dynamic-type-vs-object-type-variables-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/object-vs-dynamic-type.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Difference Between Dynamic type vs Object type variables In C# (C-Sharp)",slug:"/dynamic-type-vs-object-type-variables-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"new vs override",permalink:"/devviews/interviews/new-vs-override"},next:{title:"private protected",permalink:"/devviews/interviews/private-protected-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nPlease tell the diference between Between ",(0,i.kt)("strong",{parentName:"p"},"Dynamic type")," vs ",(0,i.kt)("strong",{parentName:"p"},"Object type")," variables In C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"object type")," is an alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")," in .NET. All types in .Net inherit directly or indirectly from ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Object"),". So, you can assign values of any type to variables of type object.  ",(0,i.kt)("u",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Type checking"))," for object type variables takes place ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"at compile time"))),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Dynamic types")," are similar to object types. But ",(0,i.kt)("u",null,"dynamic type is not resolved or type checked at compile time"),". ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"At run time")),", dynamic type is converted to object type."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"dynamic dyn = 1;\nobject obj = 1;\ndyn = dyn + 3; // throw error at run time\nobj = obj + 3; // throw error at compile time\n"))))))}u.isMDXComponent=!0},81615:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"private protected",title:"private protected In C# (C-Sharp)",slug:"/private-protected-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/private-protected",id:"c-sharp/basic/private-protected",title:"private protected In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/private-protected.md",sourceDirName:"c-sharp/basic",slug:"/private-protected-c-sharp",permalink:"/devviews/interviews/private-protected-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/private-protected.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"private protected",title:"private protected In C# (C-Sharp)",slug:"/private-protected-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/dynamic-type-vs-object-type-variables-c-sharp"},next:{title:"protected internal",permalink:"/devviews/interviews/protected-internal-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat happens when you apply the ",(0,i.kt)("inlineCode",{parentName:"p"},"private protected")," access modifier to a variable in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :"),(0,i.kt)("p",null,"  ",(0,i.kt)("inlineCode",{parentName:"p"},"private protected")," is just the combination of ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"protected"),". We can see what happen in the following example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\n\npublic class MyBaseClass\n{\n    private protected int number = 0;\n}\n\npublic class MyDerivedClass : MyBaseClass\n{\n    public void DisplayNumber()\n    {\n        var baseObj = new MyBaseClass();\n        // baseObj.number = 55; ---\x3e leads to Error because number is private\n\n        number = 65;  // number is accessible here because MyDerivedClass derives from MyBaseClass (because number is protected)\n    }\n}\n"))))}u.isMDXComponent=!0},61376:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"protected internal",title:"protected internal In C# (C-Sharp)",slug:"/protected-internal-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/protected-internal",id:"c-sharp/basic/protected-internal",title:"protected internal In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/protected-internal.md",sourceDirName:"c-sharp/basic",slug:"/protected-internal-c-sharp",permalink:"/devviews/interviews/protected-internal-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/protected-internal.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"protected internal",title:"protected internal In C# (C-Sharp)",slug:"/protected-internal-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"private protected",permalink:"/devviews/interviews/private-protected-c-sharp"},next:{title:"struct vs class",permalink:"/devviews/interviews/struct-vs-class.md-c-sharp"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nExplain ",(0,i.kt)("inlineCode",{parentName:"p"},"protected internal")," in C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"protected internal")," access modifier combines the functionalities of ",(0,i.kt)("inlineCode",{parentName:"p"},"protected")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"internal")," access modifiers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protected")," means variable can be used in derived class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"internal")," means it can be used in the same namespace")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"namespace MyNamespace\n{\n    public class MyBaseClass\n    {\n        protected internal int number = 42;\n    }\n\n    public class MyDerivedClass : MyBaseClass\n    {\n        public void Access()\n        {\n            var baseObj = new MyBaseClass();\n            baseObj.number = 44; // can modify variable here because it's internal (in the same namespace)\n        }\n    }\n}\n\n// Program.cs\n\nusing MyNamespace;\n\nnamespace MyApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MyBaseClass myBaseClass = new MyBaseClass();\n            myBaseClass.number = 45; // Error, because it's internal (can't be modified outside it's name space)\n\n            MyDerivedClass myDerivedClass = new MyDerivedClass();\n            myDerivedClass.number = 56; // it's ok because it's protected can be modified in derived class\n        }\n    }\n}\n\n"))))}u.isMDXComponent=!0},50756:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=n(83117),i=(n(67294),n(3905));const r={sidebar_position:1e3,sidebar_label:"struct vs class",title:"struct vs class In C# (C-Sharp)",slug:"/struct-vs-class.md-c-sharp",tags:["Basic C# Interviews"]},s=void 0,l={unversionedId:"c-sharp/basic/struct-vs-class",id:"c-sharp/basic/struct-vs-class",title:"struct vs class In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/struct-vs-class.md",sourceDirName:"c-sharp/basic",slug:"/struct-vs-class.md-c-sharp",permalink:"/devviews/interviews/struct-vs-class.md-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/struct-vs-class.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"struct vs class",title:"struct vs class In C# (C-Sharp)",slug:"/struct-vs-class.md-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"protected internal",permalink:"/devviews/interviews/protected-internal-c-sharp"},next:{title:"C# Interviews",permalink:"/devviews/interviews/c-sharp/c-sharp-interview-questions-answers"}},o={},d=[],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," In C#?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn C#, ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," are two user-defined data types that can be used to define and create objects. Here are some key differences between ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"class"),":"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Feature"),(0,i.kt)("th",{parentName:"tr",align:null},"Struct"),(0,i.kt)("th",{parentName:"tr",align:null},"Class"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Definition and Usage"),(0,i.kt)("td",{parentName:"tr",align:null},"Value type, allocated on the stack"),(0,i.kt)("td",{parentName:"tr",align:null},"Reference type, allocated on the heap")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Inheritance"),(0,i.kt)("td",{parentName:"tr",align:null},"Cannot inherit from other structs or classes, cannot be used as a base for any other type"),(0,i.kt)("td",{parentName:"tr",align:null},"Can inherit from other classes and can be used as a base for other classes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Default Values"),(0,i.kt)("td",{parentName:"tr",align:null},"Initialized to default value"),(0,i.kt)("td",{parentName:"tr",align:null},"Initialized to ",(0,i.kt)("inlineCode",{parentName:"td"},"null"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Performance"),(0,i.kt)("td",{parentName:"tr",align:null},"Faster creation and destruction, larger structs can have significant impact on performance due to copying required when passed as parameters"),(0,i.kt)("td",{parentName:"tr",align:null},"Slower creation and destruction, but memory allocation is more flexible")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Boxing and Unboxing"),(0,i.kt)("td",{parentName:"tr",align:null},"Not subject to boxing and unboxing"),(0,i.kt)("td",{parentName:"tr",align:null},"Subject to boxing and unboxing when passed as an ",(0,i.kt)("inlineCode",{parentName:"td"},"object")," parameter or when used in collections")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Struct example\nstruct PointStruct\n{\n    public int x, y;\n}\n\n// Class example\nclass PointClass\n{\n    public int x, y;\n}\n\n// Usage examples\nPointStruct p1 = new PointStruct();\np1.x = 1;\np1.y = 2;\nConsole.WriteLine(p1.x + ", " + p1.y); // Output: 1, 2\n\nPointClass p2 = new PointClass();\np2.x = 1;\np2.y = 2;\nConsole.WriteLine(p2.x + ", " + p2.y); // Output: 1, 2\n\n'))))}u.isMDXComponent=!0},74418:function(e,t,n){t.Z=n.p+"assets/images/deadlock-4a73c9fedb7c82dc40a71a9e75a754c3.png"}}]);