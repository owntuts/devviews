"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[6295],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||s;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<s;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},68368:function(e,n,t){t.r(n),t.d(n,{assets:function(){return o},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c}});var a=t(83117),r=(t(67294),t(3905));const s={sidebar_position:1e3,sidebar_label:"Innerclass",title:"Innerclass",tags:["Java Knowledge"]},l=void 0,i={unversionedId:"java/hero/innerclass",id:"java/hero/innerclass",title:"Innerclass",description:"Innerclass",source:"@site/docs/java/hero/innerclass.md",sourceDirName:"java/hero",slug:"/java/hero/innerclass",permalink:"/devviews/interviews/java/hero/innerclass",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/java/hero/innerclass.md",tags:[{label:"Java Knowledge",permalink:"/devviews/interviews/tags/java-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Innerclass",title:"Innerclass",tags:["Java Knowledge"]},sidebar:"javaInterviewSidebar",previous:{title:"How JVM Works",permalink:"/devviews/interviews/java/hero/how-jvm-works"},next:{title:"Scopes In Java",permalink:"/devviews/interviews/java/hero/scope"}},o={},c=[],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Innerclass")),(0,r.kt)("p",null,"An inner class is a class that is defined inside another class or interface. The purpose of inner classes is to group classes that are logically related, to improve readability and maintainability, and to increase encapsulation and access control."),(0,r.kt)("p",null,"There are four types of inner classes in Java:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Access to members of outer class"),(0,r.kt)("th",{parentName:"tr",align:null},"Requires instance of outer class"),(0,r.kt)("th",{parentName:"tr",align:null},"Can be declared abstract or final"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Member inner class"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"class OuterClass { class InnerClass { } }")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes, both static and non-static"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes, using ",(0,r.kt)("inlineCode",{parentName:"td"},"OuterClass.InnerClass inner = outer.new InnerClass();")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Local inner class"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"class OuterClass { void someMethod() { class LocalClass { } } }")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes, both static and non-static (final or effectively final)"),(0,r.kt)("td",{parentName:"tr",align:null},"No, but can only be instantiated within the method"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Static nested class"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"class OuterClass { static class NestedClass { } }")),(0,r.kt)("td",{parentName:"tr",align:null},"Only static members of outer class"),(0,r.kt)("td",{parentName:"tr",align:null},"No, using ",(0,r.kt)("inlineCode",{parentName:"td"},"OuterClass.NestedClass nested = new OuterClass.NestedClass();")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Anonymous inner class"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"class OuterClass { SomeInterface obj = new SomeInterface() { // implement methods here }; }")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes, both static and non-static (final or effectively final)"),(0,r.kt)("td",{parentName:"tr",align:null},"No, but must extend a class or implement an interface"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"Here is an example that demonstrates each type of inner class in Java:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class OuterClass {\n\n    // a private instance variable\n    private int x = 10;\n\n    // a public static variable\n    public static int y = 20;\n\n    // a member inner class\n    public class MemberInnerClass {\n        // a method of the member inner class\n        public void print() {\n            System.out.println("Member inner class: x = " + x);\n        }\n    }\n\n    // a method of the outer class\n    public void display() {\n        // a local variable\n        final int z = 30;\n\n        // a local inner class\n        class LocalInnerClass {\n            // a method of the local inner class\n            public void print() {\n                System.out.println("Local inner class: x = " + x + ", z = " + z);\n            }\n        }\n\n        // creating an object of the local inner class\n        LocalInnerClass lic = new LocalInnerClass();\n        // calling the method of the local inner class\n        lic.print();\n    }\n\n    // a static nested class\n    public static class StaticNestedClass {\n        // a method of the static nested class\n        public void print() {\n            System.out.println("Static nested class: y = " + y);\n        }\n    }\n\n    // a method that returns an anonymous inner class that implements an interface\n    public Printable getAnonymousInnerClass() {\n        return new Printable() {\n            @Override\n            public void print() {\n                System.out.println("Anonymous inner class: x = " + x);\n            }\n        };\n    }\n}\n\n// an interface for demonstration purpose\ninterface Printable {\n    void print();\n}\n\n// a test class\npublic class Main {\n\n    public static void main(String[] args) {\n        // creating an object of the outer class\n        OuterClass oc = new OuterClass();\n\n        // creating an object of the member inner class\n        OuterClass.MemberInnerClass mic = oc.new MemberInnerClass();\n        // calling the method of the member inner class\n        mic.print();\n\n        // calling the method of the outer class that contains a local inner class\n        oc.display();\n\n        // creating an object of the static nested class\n        OuterClass.StaticNestedClass snc = new OuterClass.StaticNestedClass();\n        // calling the method of the static nested class\n        snc.print();\n\n        // getting an object of the anonymous inner class that implements Printable interface\n        Printable p = oc.getAnonymousInnerClass();\n        // calling the method of the anonymous inner class\n        p.print();\n    }\n}\n')),(0,r.kt)("p",null,"The output of this program is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Member inner class: x = 10\nLocal inner class: x = 10, z = 30\nStatic nested class: y = 20\nAnonymous inner class: x = 10\n"))))}d.isMDXComponent=!0}}]);