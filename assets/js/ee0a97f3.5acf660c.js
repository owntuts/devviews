"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[6312],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return k}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return r?n.createElement(k,s(s({ref:t},p),{},{components:r})):n.createElement(k,s({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},74562:function(e,t,r){r.r(t),r.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var n=r(83117),a=(r(67294),r(3905));const l={sidebar_position:1e3,sidebar_label:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",tags:["Nodejs Knowledge"]},s=void 0,i={unversionedId:"nodejs/nodejs/threadsvs",id:"nodejs/nodejs/threadsvs",title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",description:"single-thread vs multi-threads vs concurrency vs paralell in Nodejs",source:"@site/docs/nodejs/nodejs/threadsvs.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/threadsvs",permalink:"/devviews/interviews/nodejs/nodejs/threadsvs",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/threadsvs.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",title:"Nodejs single-thread vs multi-threads vs concurrency vs paralell",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Stream",permalink:"/devviews/interviews/nodejs/nodejs/stream"},next:{title:"Nodejs Worker Thread vs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread-vs-cluster"}},o={},u=[],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"single-thread vs multi-threads vs concurrency vs paralell in Nodejs")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Single-thread:")," "),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"A web server receives requests from multiple clients."),(0,a.kt)("li",{parentName:"ul"},"The server only processes each request at a time.")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Multi-thread:")),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"A web server receives requests from multiple clients."),(0,a.kt)("li",{parentName:"ul"},"The server divides the requests into multiple tasks."),(0,a.kt)("li",{parentName:"ul"},"The server assigns each task to a different thread."),(0,a.kt)("li",{parentName:"ul"},"The threads execute the tasks concurrently. (Concurrency happen here)"),(0,a.kt)("li",{parentName:"ul"},"The server returns the results of the tasks to the clients.")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Concurrency:")," Concurrency is the ability to run multiple tasks or processes at the same time. Resources of server (CPU, Memory,...) are shared among the requests. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parallelism:")),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Consider a web server that receives requests from multiple clients. If the server only has one processor, it can only process one request at a time. However, if the server has multiple processors, it can process multiple requests simultaneously. This can be done by ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"dividing the requests into multiple tasks and assigning each task to a different processor")),".")))),(0,a.kt)("p",null,"Here is a table that summarizes the differences between single-thread, multi-thread, concurrency, and parallel:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Feature"),(0,a.kt)("th",{parentName:"tr",align:null},"Single-thread"),(0,a.kt)("th",{parentName:"tr",align:null},"Multi-thread"),(0,a.kt)("th",{parentName:"tr",align:null},"Concurrency"),(0,a.kt)("th",{parentName:"tr",align:null},"Parallelism"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Number of tasks"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"Multiple"),(0,a.kt)("td",{parentName:"tr",align:null},"Multiple"),(0,a.kt)("td",{parentName:"tr",align:null},"Multiple")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Focus"),(0,a.kt)("td",{parentName:"tr",align:null},"One task at a time"),(0,a.kt)("td",{parentName:"tr",align:null},"Different tasks at the same time"),(0,a.kt)("td",{parentName:"tr",align:null},"Different tasks at the same time"),(0,a.kt)("td",{parentName:"tr",align:null},"Same task at the same time")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Speed"),(0,a.kt)("td",{parentName:"tr",align:null},"Slow"),(0,a.kt)("td",{parentName:"tr",align:null},"Faster"),(0,a.kt)("td",{parentName:"tr",align:null},"Faster"),(0,a.kt)("td",{parentName:"tr",align:null},"Fastest"))))))}d.isMDXComponent=!0}}]);