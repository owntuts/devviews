"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5123],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(o,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},756:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const s={sidebar_position:1e3,sidebar_label:"struct vs class",title:"struct vs class In C# (C-Sharp)",slug:"/struct-vs-class.md-c-sharp",tags:["Basic C# Interviews"]},i=void 0,l={unversionedId:"c-sharp/basic/struct-vs-class",id:"c-sharp/basic/struct-vs-class",title:"struct vs class In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/c-sharp/basic/struct-vs-class.md",sourceDirName:"c-sharp/basic",slug:"/struct-vs-class.md-c-sharp",permalink:"/devviews/interviews/struct-vs-class.md-c-sharp",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/c-sharp/basic/struct-vs-class.md",tags:[{label:"Basic C# Interviews",permalink:"/devviews/interviews/tags/basic-c-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"struct vs class",title:"struct vs class In C# (C-Sharp)",slug:"/struct-vs-class.md-c-sharp",tags:["Basic C# Interviews"]},sidebar:"cSharpInterviewSidebar",previous:{title:"protected internal",permalink:"/devviews/interviews/protected-internal-c-sharp"},next:{title:"C# Interviews",permalink:"/devviews/interviews/c-sharp/c-sharp-interview-questions-answers"}},o={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Question:",type:"quest"},(0,a.kt)("p",{parentName:"admonition"},"*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\n",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," vs ",(0,a.kt)("inlineCode",{parentName:"p"},"class")," In C#?")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h5",null,"ANSWER:")),(0,a.kt)("p",null,"  ","*",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\nIn C#, ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"class")," are two user-defined data types that can be used to define and create objects. Here are some key differences between ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"class"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Feature"),(0,a.kt)("th",{parentName:"tr",align:null},"Struct"),(0,a.kt)("th",{parentName:"tr",align:null},"Class"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Definition and Usage"),(0,a.kt)("td",{parentName:"tr",align:null},"Value type, allocated on the stack"),(0,a.kt)("td",{parentName:"tr",align:null},"Reference type, allocated on the heap")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Inheritance"),(0,a.kt)("td",{parentName:"tr",align:null},"Cannot inherit from other structs or classes, cannot be used as a base for any other type"),(0,a.kt)("td",{parentName:"tr",align:null},"Can inherit from other classes and can be used as a base for other classes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Default Values"),(0,a.kt)("td",{parentName:"tr",align:null},"Initialized to default value"),(0,a.kt)("td",{parentName:"tr",align:null},"Initialized to ",(0,a.kt)("inlineCode",{parentName:"td"},"null"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Performance"),(0,a.kt)("td",{parentName:"tr",align:null},"Faster creation and destruction, larger structs can have significant impact on performance due to copying required when passed as parameters"),(0,a.kt)("td",{parentName:"tr",align:null},"Slower creation and destruction, but memory allocation is more flexible")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Boxing and Unboxing"),(0,a.kt)("td",{parentName:"tr",align:null},"Not subject to boxing and unboxing"),(0,a.kt)("td",{parentName:"tr",align:null},"Subject to boxing and unboxing when passed as an ",(0,a.kt)("inlineCode",{parentName:"td"},"object")," parameter or when used in collections")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'// Struct example\nstruct PointStruct\n{\n    public int x, y;\n}\n\n// Class example\nclass PointClass\n{\n    public int x, y;\n}\n\n// Usage examples\nPointStruct p1 = new PointStruct();\np1.x = 1;\np1.y = 2;\nConsole.WriteLine(p1.x + ", " + p1.y); // Output: 1, 2\n\nPointClass p2 = new PointClass();\np2.x = 1;\np2.y = 2;\nConsole.WriteLine(p2.x + ", " + p2.y); // Output: 1, 2\n\n'))))}d.isMDXComponent=!0}}]);