"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5712],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},55860:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l}});var a=n(83117),r=(n(67294),n(3905));const o={sidebar_position:1e3,sidebar_label:"Route Guards",title:"How Many Types of Route Guards In Angular?",slug:"/many-types-route-guards-angular",tags:["Middle Angular Interviews"]},s=void 0,i={unversionedId:"js/angular-interviews/middle/route-gaurds",id:"js/angular-interviews/middle/route-gaurds",title:"How Many Types of Route Guards In Angular?",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/js/angular-interviews/middle/route-gaurds.md",sourceDirName:"js/angular-interviews/middle",slug:"/many-types-route-guards-angular",permalink:"/devviews/interviews/many-types-route-guards-angular",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/js/angular-interviews/middle/route-gaurds.md",tags:[{label:"Middle Angular Interviews",permalink:"/devviews/interviews/tags/middle-angular-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Route Guards",title:"How Many Types of Route Guards In Angular?",slug:"/many-types-route-guards-angular",tags:["Middle Angular Interviews"]},sidebar:"jsInterviewSidebar",previous:{title:"ProvidedIn vs Providers",permalink:"/devviews/interviews/providedin-vs-providers-angular"},next:{title:"useClass vs useValue vs useFactory",permalink:"/devviews/interviews/useclass-vs-usevalue-vs-usefactory-providers"}},u={},l=[],p={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nWhat is ",(0,r.kt)("strong",{parentName:"p"},"Route Guard")," in Angular? How Many Types of Route Guards In Angular? Please Explain about them?")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,r.kt)("strong",{parentName:"p"},"Route guards")," are interfaces provided by Angular allows us to control the accessibility of a route based on condition. We usually use Route guard for authentication, limit user access to certain routes."),(0,r.kt)("p",null,"  There are 5 types of route guards:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"canActivate"),": Allows to control if a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"route can be activated (accessed)")),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="router.route.ts"',"{5}":!0,title:'"router.route.ts"'},"const routes: Routes = [\n  {\n    path: 'private-route',\n    component: PrivateComponent,\n    canActivate: [CanActivateRouteGaurd]\n  }\n]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{4} title="can-activate-route-gaurd.service.ts"',"{4}":!0,title:'"can-activate-route-gaurd.service.ts"'},"@Injectable()\nexport class CanActivateRouteGaurd implements CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    // return boolean -> `false` means not allows users to access\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"canActivateChild"),": Allows to control if ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"children of a route can be activated (accessed)")),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="router.route.ts"',"{5}":!0,title:'"router.route.ts"'},"const routes: Routes = [\n  {\n    path: 'private-route',\n    component: PrivateComponent,\n    canActivateChild: [CanActivateChildRouteGaurd],\n    children: [\n        { path: 'child-route', component: ChildComponent},\n      ]\n  }\n]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{4} title="can-activate-child-route-gaurd.service.ts"',"{4}":!0,title:'"can-activate-child-route-gaurd.service.ts"'},"@Injectable()\nexport class CanActivateChildRouteGaurd implements CanActivateChild {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    // return boolean -> `false` means not allows users to access\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"canLoad"),": Allows to control if a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"route can be accessed"))," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"feature module be loaded"))," (In the case of lazy loading, CanLoad can control feature module loading)."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="router.route.ts"',"{5}":!0,title:'"router.route.ts"'},"const routes: Routes = [\n  {\n    path: 'private-route',\n    loadChildren: () => import('./private-route').then(m => m.PrivateModule),\n    canLoad: [CanLoadGaurd]\n  }\n]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{4} title="can-load-route-gaurd.service.ts"',"{4}":!0,title:'"can-load-route-gaurd.service.ts"'},"@Injectable()\nexport class CanLoadGaurd implements CanLoad {\n  canLoad(route:Route,segments:UrlSegment[]): boolean {\n    // return true or false depending on whether you want to load PrivateModule or not\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"canDeactivate"),": Allows to control if the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"user can leave a route")),". Note that this guard doesn\u2019t prevent the user from closing the browser tab or navigating to a different address."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="router.route.ts"',"{5}":!0,title:'"router.route.ts"'},"const routes: Routes = [\n  {\n    path: 'private-route',\n    component: CertainComponent,\n    canDeactivate: CanDeactivateRouteGaurd\n  }\n]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="can-deactivate-route-gaurd.service.ts"',"{5}":!0,title:'"can-deactivate-route-gaurd.service.ts"'},"@Injectable()\nexport class CanDeactivateRouteGaurd implements CanDeactivate<CertainComponent> {\n  canActivate(compoent: CertainComponent): boolean {\n    if(component.unsaved()) {\n      return confirm('Are you sure you want to quit?')\n    }\n    return true;\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"resolve"),": In a route, heavy data is not possible to pass through query params. Resolve Guard allows to ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"resolve data and pass to the component")),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="router.route.ts"',"{5}":!0,title:'"router.route.ts"'},"const routes: Routes = [\n  {\n    path: 'heavy-data-route',\n    component: DataComponent,\n    resolve: { data: ResolveGuard }\n  }\n]\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{4} title="resolve-route-gaurd.service.ts"',"{4}":!0,title:'"resolve-route-gaurd.service.ts"'},"@Injectable()\nexport class ResolveGuard implements Resolve<SomeDataType> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): SomeDataType {\n    // Fetch and return data here\n  }\n}\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7} title="data-component.component.ts"',"{7}":!0,title:'"data-component.component.ts"'},"@Component()\nexport class DataComponent implements OnInit {\n  constructor(private route: ActivatedRoute, private router: Router) {\n\n  }\n  ngOnInit() {\n    this.route.data.subscribe(data: Data => /* Return data needed*/)\n  }\n}\n"))))))}d.isMDXComponent=!0}}]);