"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[7262],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=i,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1871:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=t(3117),i=(t(7294),t(3905));const a={sidebar_position:1e3,sidebar_label:"Lambda Function vs Expression Function",title:"Lambda Function vs Expression Function",slug:"/lambda-vs-expression-function",tags:["Basic Kotlin Interviews"]},o=void 0,s={unversionedId:"kotlin/basic/lambda-vs-expression-function",id:"kotlin/basic/lambda-vs-expression-function",title:"Lambda Function vs Expression Function",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/kotlin/basic/lambda-vs-expression-function.md",sourceDirName:"kotlin/basic",slug:"/lambda-vs-expression-function",permalink:"/devviews/interviews/lambda-vs-expression-function",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/kotlin/basic/lambda-vs-expression-function.md",tags:[{label:"Basic Kotlin Interviews",permalink:"/devviews/interviews/tags/basic-kotlin-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Lambda Function vs Expression Function",title:"Lambda Function vs Expression Function",slug:"/lambda-vs-expression-function",tags:["Basic Kotlin Interviews"]},sidebar:"kotllinInterviewSidebar",previous:{title:"associateBy vs groupBy in Kotlin",permalink:"/devviews/interviews/associateBy-vs-groupBy"},next:{title:"let vs run vs with vs apply vs also in Kotlin",permalink:"/devviews/interviews/let-vs-run-vs-with-vs-apply-vs-also"}},l={},u=[],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Question:",type:"quest"},(0,i.kt)("p",{parentName:"admonition"},"*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nlambda function vs expression function?")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("h5",null,"ANSWER:")),(0,i.kt)("p",null,"  ","*",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," : "),(0,i.kt)("p",null,"A lambda function and an expression function are two different ways of defining a function in Kotlin, and they have some subtle differences. "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"A lambda function")," is a function that has no name and can be passed as an argument to another function. It is defined using curly braces ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"->"),"."),(0,i.kt)("p",{parentName:"li"},"This is a lambda fuunction."))),(0,i.kt)("p",null,"It's equivalent to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"val lambdaFunc: (Int, Int) -> Int = { a, b -> a + b }\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"An expression function")," is a named function that has an expression as its body. It is defined using the ",(0,i.kt)("inlineCode",{parentName:"li"},"fun")," keyword, followed by the function name and its parameters.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"fun sum(a: Int, b: Int) = a + b\n"))))}d.isMDXComponent=!0}}]);