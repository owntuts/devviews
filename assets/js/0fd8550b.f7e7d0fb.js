"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[5982],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return v}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,v=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return n?i.createElement(v,o(o({ref:t},c),{},{components:n})):i.createElement(v,o({ref:t},c))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1867:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var i=n(3117),r=(n(7294),n(3905));const a={sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",slug:"/reactnative-flatlist-vs-listview",tags:["Basic React Native Interviews"]},o=void 0,s={unversionedId:"react-native/basic/flatlist-vs-listview",id:"react-native/basic/flatlist-vs-listview",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",description:"\\*\u0ca0_\u0ca0\\* :",source:"@site/docs/react-native/basic/flatlist-vs-listview.md",sourceDirName:"react-native/basic",slug:"/reactnative-flatlist-vs-listview",permalink:"/devviews/interviews/reactnative-flatlist-vs-listview",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/react-native/basic/flatlist-vs-listview.md",tags:[{label:"Basic React Native Interviews",permalink:"/devviews/interviews/tags/basic-react-native-interviews"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Boxing vs Unboxing",title:"Differences Between Boxing vs Unboxing In C# (C-Sharp)",slug:"/reactnative-flatlist-vs-listview",tags:["Basic React Native Interviews"]},sidebar:"reactnativeInterviewSidebar",previous:{title:"AsyncStorage",permalink:"/devviews/interviews/asynstorage"},next:{title:"Boxing vs Unboxing",permalink:"/devviews/interviews/reactnative-flatlist-vs-sessionlist"}},l={},p=[],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Question:",type:"quest"},(0,r.kt)("p",{parentName:"admonition"},"*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u0ca0_\u0ca0")),"*"," :\nFlatlist vs ListView in react native?")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"ANSWER:")),(0,r.kt)("p",null,"  ","*",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u25d4\u032f\u25d4")),"*"," :\n",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView")," are both components in React Native that allow you to render a scrollable list of items. While they serve the same purpose, they have some key differences in terms of performance and features.\nHere are some differences between ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Performance"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," provides better performance than ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView")," keeps all items in the memory, while ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," only renders the visible items, thus reducing the memory usage and improving the performance of the app. ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," also uses a virtualized list which optimizes the rendering process by rendering only a subset of the items in the list based on the position of the user on the screen."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Data management"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," has better data management and item rendering capabilities than ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," allows you to easily manage data by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"renderItem")," props, while in ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView")," you need to handle the data and item rendering manually."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Item layout"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," provides more flexibility and customization options for item layout. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"horizontal")," prop to render the items horizontally, and you can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"numColumns")," prop to render the items in multiple columns."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scroll position"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," provides better control over the scroll position than ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView"),". You can programmatically scroll to a specific position in the list using the ",(0,r.kt)("inlineCode",{parentName:"p"},"scrollToIndex")," method or the ",(0,r.kt)("inlineCode",{parentName:"p"},"scrollToOffset")," method."),(0,r.kt)("p",null,"In summary, while both ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ListView")," provide the same basic functionality of rendering a scrollable list, ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatList")," provides better performance and more advanced features for data management, item rendering, and scroll position control."),(0,r.kt)("p",null,":::note Note:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ListView")," is deprecated now"),(0,r.kt)("p",null,":::")))}d.isMDXComponent=!0}}]);