"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[4251],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return k}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=n.createContext({}),l=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(d.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,k=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return t?n.createElement(k,s(s({ref:r},c),{},{components:t})):n.createElement(k,s({ref:r},c))}));function k(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var d in r)hasOwnProperty.call(r,d)&&(i[d]=r[d]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},46204:function(e,r,t){t.r(r),t.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return l}});var n=t(83117),o=(t(67294),t(3905));const a={sidebar_position:1e3,sidebar_label:"Nodejs Worker Thread",title:"Nodejs Worker Thread",tags:["Nodejs Knowledge"]},s=void 0,i={unversionedId:"nodejs/nodejs/worker-thread",id:"nodejs/nodejs/worker-thread",title:"Nodejs Worker Thread",description:"Worker Thread in Nodejs",source:"@site/docs/nodejs/nodejs/worker-thread.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/worker-thread",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/worker-thread.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Worker Thread",title:"Nodejs Worker Thread",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",previous:{title:"Nodejs Worker Thread vs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/worker-thread-vs-cluster"},next:{title:"Nodejs From Zero To Hero",permalink:"/devviews/interviews/nodejs/intro"}},d={},l=[],c={toc:l},p="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,(0,o.kt)("h5",null,"Worker Thread in Nodejs")),(0,o.kt)("p",null,"Worker threads are a way to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"run JavaScript code in parallel using multiple threads")),". They are similar to web workers in browsers, but they can also use some nodejs-specific features like file system access. Worker threads can communicate with each other and with the main thread using the ",(0,o.kt)("inlineCode",{parentName:"p"},"postMessage")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"on")," methods of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Worker")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"parentPort")," objects. For example, you can create a worker thread and send a message to it like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the main thread\nconst { Worker } = require('worker_threads');\nconst worker = new Worker('./worker.js'); // create a worker thread from a file\nworker.postMessage('Hello worker'); // send a message to the worker\n")),(0,o.kt)("p",null,"And you can receive the message from the worker like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the worker thread\nconst { parentPort } = require('worker_threads');\nparentPort.on('message', (msg) => { // listen for messages from the main thread\n  console.log('Worker received: ', msg); // print the message\n});\n")),(0,o.kt)("p",null,"Similarly, you can send a message from a worker to the main thread like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the worker thread\nconst { parentPort } = require('worker_threads');\nparentPort.postMessage('Hello main'); // send a message to the main thread\n")),(0,o.kt)("p",null,"And you can receive the message from the main thread like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// In the main thread\nconst { Worker } = require('worker_threads');\nconst worker = new Worker('./worker.js'); // create a worker thread from a file\nworker.on('message', (msg) => { // listen for messages from the worker\n  console.log('Main received: ', msg); // print the message\n});\n")),(0,o.kt)("p",null,"These are some examples of worker threads communication in nodejs. You can find more details and examples in the documentation of nodejs worker threads.")))}u.isMDXComponent=!0}}]);