"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[8807],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,g=u["".concat(i,".").concat(c)]||u[c]||m[c]||o;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},95405:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=n(83117),a=(n(67294),n(3905));const o={sidebar_position:1e3,sidebar_label:"Nodejs Child Process",title:"Nodejs Child Process",tags:["Nodejs Knowledge"]},s=void 0,l={unversionedId:"nodejs/nodejs/child-process",id:"nodejs/nodejs/child-process",title:"Nodejs Child Process",description:"spawn vs fork vs execFile vs exec",source:"@site/docs/nodejs/nodejs/child-process.md",sourceDirName:"nodejs/nodejs",slug:"/nodejs/nodejs/child-process",permalink:"/devviews/interviews/nodejs/nodejs/child-process",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/nodejs/nodejs/child-process.md",tags:[{label:"Nodejs Knowledge",permalink:"/devviews/interviews/tags/nodejs-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Nodejs Child Process",title:"Nodejs Child Process",tags:["Nodejs Knowledge"]},sidebar:"nodejsInterviewSidebar",next:{title:"Nodejs Cluster",permalink:"/devviews/interviews/nodejs/nodejs/cluster"}},i={},p=[{value:"Here is a table that summarizes some of the key differences between them:",id:"here-is-a-table-that-summarizes-some-of-the-key-differences-between-them",level:4},{value:"Details &amp; Examples",id:"details--examples",level:4}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"`spawn` vs `fork` vs `execFile` vs `exec`")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"spawn"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"fork"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"execFile")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," are four ways to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"run another program (child process) from your Node.js program (parent process)")),". They are different in ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"how they run the other program and how they communicate with it")),"."),(0,a.kt)("h4",{id:"here-is-a-table-that-summarizes-some-of-the-key-differences-between-them"},"Here is a table that summarizes some of the key differences between them:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Shell"),(0,a.kt)("th",{parentName:"tr",align:null},"Streaming"),(0,a.kt)("th",{parentName:"tr",align:null},"Buffering"),(0,a.kt)("th",{parentName:"tr",align:null},"IPC"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"spawn"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fork"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"execFile"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exec"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"inter-process communication (",(0,a.kt)("strong",{parentName:"li"},"IPC"),") channel established that allows sending messages between parent and child"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Buffering"),": means waiting for the other program to finish (buferring) and then gives you all the data it produced"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Streaming"),": Sending data in chunks"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Shell"),": (a shell is a program that lets you type commands and run other programs). Using a shell means running commands via shell program.")),(0,a.kt)("hr",null),(0,a.kt)("h4",{id:"details--examples"},"Details & Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"spawn"),": runs the other program directly without using a shell. It sends and receives data from the other program as it runs. It is good for running programs that run for a long time and produce a lot of data.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command directly ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"without using a shell"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"streams the output"))," to the console"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fork"),": Similar but the biggest difference between spawn and fork is that a ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"communication channel"))," is established to the child process when using fork, that lets you send messages back and forth. It is good for running Node.js programs that work together.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs a Node.js module that executes the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command using a shell and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"sends (streams) the output back to the parent process using IPC"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// child.js\nconst { exec } = require('child_process');\nexec('ls -lh /usr', (error, stdout, stderr) => {\n  if (error) {\n    process.send({ error });\n  } else {\n    process.send({ stdout });\n  }\n});\n\n// parent.js\nconst { fork } = require('child_process');\nconst child = fork('./child.js');\n\nchild.on('message', (message) => {\n  if (message.error) {\n    console.error(`stderr: ${message.error}`);\n  } else {\n    console.log(`stdout: ${message.stdout}`);\n  }\n});\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"execFile"),": runs the other program directly without using a shell It waits for the other program to finish and then gives you all the data it produced. It is good for running programs that finish quickly and produce a small amount of data.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command directly ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"without using a shell"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"buffers the outpu")),"t to the callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { execFile } = require('child_process');\nexecFile('ls', ['-lh', '/usr'], (error, stdout, stderr) => {\n  if (error) {\n    console.error(`stderr: ${stderr}`);\n    throw error;\n  }\n  console.log(`stdout: ${stdout}`);\n});\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exec"),": runs the other program ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"using a shell")),". It waits for the other program to finish and then gives you all the data it produced. It is good for running programs that need a shell to work properly.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"using a shell"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"buffers the output"))," to the callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { exec } = require('child_process');\nexec('ls -lh /usr', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`stderr: ${stderr}`);\n    throw error;\n  }\n  console.log(`stdout: ${stdout}`);\n});\n\n"))))}m.isMDXComponent=!0}}]);