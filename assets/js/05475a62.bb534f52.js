"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[9259],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return g}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},54312:function(e,t,a){a.d(t,{ZP:function(){return l}});var n=a(83117),r=(a(67294),a(3905));const o={toc:[]},i="wrapper";function l(e){let{components:t,...a}=e;return(0,r.kt)(i,(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"interview"},a.level&&(0,r.kt)("span",{className:"level"},a.level),a.children))}l.isMDXComponent=!0},47651:function(e,t,a){a.r(t),a.d(t,{assets:function(){return D},contentTitle:function(){return $},default:function(){return j},frontMatter:function(){return x},metadata:function(){return C},toc:function(){return M}});var n=a(83117),r=(a(67294),a(3905));a(54312);const o={toc:[]},i="wrapper";function l(e){let{components:t,...l}=e;return(0,r.kt)(i,(0,n.Z)({},o,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Replication Architecture")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Replication Architecture",src:a(12240).Z,width:"3773",height:"2485"})),(0,r.kt)("p",null,"MongoDB uses a ",(0,r.kt)("strong",{parentName:"p"},"replica set")," as the basic unit of replication. A replica set is a group of ",(0,r.kt)("strong",{parentName:"p"},"mongod")," instances that maintain the same data set. "),(0,r.kt)("p",null,"A replica set contains one ",(0,r.kt)("strong",{parentName:"p"},"primary")," node and one or more ",(0,r.kt)("strong",{parentName:"p"},"secondary")," nodes. Optionally, it can also contain one or more ",(0,r.kt)("strong",{parentName:"p"},"arbiter")," nodes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The primary node")," ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"receives all write operations"))," and records them in its ",(0,r.kt)("strong",{parentName:"li"},"operation log"),", or ",(0,r.kt)("strong",{parentName:"li"},"oplog"),". "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The secondary nodes")," ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"replicate the primary's oplog"))," and apply the operations to their data sets asynchronously. The secondary nodes ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"can also serve read operations")),", but they may not have the most up-to-date data."),(0,r.kt)("li",{parentName:"ul"},"If the primary node fails or becomes unavailable, one of the secondary nodes can hold an ",(0,r.kt)("strong",{parentName:"li"},"election")," to elect itself as the new primary. The election process ensures that there is always one and only one primary node in a replica set."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"An arbiter node")," is a special type of node that does ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"not hold any data")),", but ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"participates in elections")),". An arbiter node can ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"help maintain an odd number of voting members"))," in a replica set, which is necessary for electing a primary."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Some notes about replica set")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A replica set can have ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"up to 50 members")),", but ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"only 7 members can vote"))," in elections."),(0,r.kt)("li",{parentName:"ul"},"A replica set can have ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"only one primary node at a time")),", and it must have a majority of voting members online to elect or maintain a primary node."),(0,r.kt)("li",{parentName:"ul"},"A replica set ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"should have an odd number of voting members")),". If a replica set has an even number of voting members, and half of them vote for one candidate and half of them vote for another candidate, then there is no clear winner and the election fails."),(0,r.kt)("li",{parentName:"ul"},"A replica set can have different types of secondary nodes, such as hidden nodes, delayed nodes, or non-voting nodes, for different purposes."),(0,r.kt)("li",{parentName:"ul"},"A replica set can use authentication and encryption to secure the communication between the members."),(0,r.kt)("li",{parentName:"ul"},"A replica set can use tags to group the members by location, function, or hardware configuration. Tags can be used to control read preferences and write concerns."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Read and write concern in replica set")),(0,r.kt)("p",null,"Read and write concern in replica set are options that allow you to control the consistency and durability of the data read and written from replica sets."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To read data from the primary node only, you can use the following read concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ readConcern: { level: "local" } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To read data that has been acknowledged by a majority of the replica set members, you can use the following read concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ readConcern: { level: "majority" } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To read data that reflects all successful writes issued with a majority write concern and that are acknowledged by the current primary node, you can use the following read concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ readConcern: { level: "linearizable" } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To read data from any available replica set member, regardless of whether the data may be rolled back or not, you can use the following read concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ readConcern: { level: "available" } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To read data from a specific point in time that reflects the majority committed state of the data, you can use the following read concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ readConcern: { level: "snapshot" } }\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"write concern",src:a(56188).Z,width:"455",height:"457"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To write data to the primary node only, you can use the following write concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{ writeConcern: { w: 1 } }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To write data to a majority of the replica set members, you can use the following write concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ writeConcern: { w: "majority" } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To write data to at least three replica set members, you can use the following write concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{ writeConcern: { w: 3 } }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To write data to a specific set of replica set members that have a certain tag, you can use the following write concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ writeConcern: { w: "<tag>" } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To write data with a timeout of 10 seconds, you can use the following write concern:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ writeConcern: { w: "majority", wtimeout: 10000 } }\n')),(0,r.kt)("p",null,":::note"),(0,r.kt)("p",null,"A majority of the replica set members is the smallest number of members that constitutes more than half of the voting members in the replica set. For example, if a replica set has 5 voting members, a majority is 3. If a replica set has 6 voting members, a majority is 4."),(0,r.kt)("p",null,":::"),(0,r.kt)("p",null,":::note"),(0,r.kt)("p",null,"You can specify read and write concerns for the following commands in MongoDB:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For read operations, you can use the ",(0,r.kt)("strong",{parentName:"li"},"find"),", ",(0,r.kt)("strong",{parentName:"li"},"aggregate"),", ",(0,r.kt)("strong",{parentName:"li"},"count"),", ",(0,r.kt)("strong",{parentName:"li"},"distinct"),", ",(0,r.kt)("strong",{parentName:"li"},"geoNear"),", and ",(0,r.kt)("strong",{parentName:"li"},"geoSearch")," commands with the ",(0,r.kt)("strong",{parentName:"li"},"readConcern")," option."),(0,r.kt)("li",{parentName:"ul"},"For write operations, you can use the ",(0,r.kt)("strong",{parentName:"li"},"insert"),", ",(0,r.kt)("strong",{parentName:"li"},"update"),", ",(0,r.kt)("strong",{parentName:"li"},"delete"),", and ",(0,r.kt)("strong",{parentName:"li"},"findAndModify")," commands with the ",(0,r.kt)("strong",{parentName:"li"},"writeConcern")," option."),(0,r.kt)("li",{parentName:"ul"},"For other commands that support read or write concerns, you can use the ",(0,r.kt)("strong",{parentName:"li"},"db.runCommand()")," method with the ",(0,r.kt)("strong",{parentName:"li"},"readConcern")," or ",(0,r.kt)("strong",{parentName:"li"},"writeConcern")," option. For example, you can use the ",(0,r.kt)("strong",{parentName:"li"},"createIndexes")," command with the ",(0,r.kt)("strong",{parentName:"li"},"writeConcern")," option as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'db.runCommand( {\n   createIndexes: "products",\n   indexes: [\n      { key: { item: 1 }, name: "item_1" }\n   ],\n   writeConcern: { w: "majority" }\n} )\n')),(0,r.kt)("p",null,":::")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Types of secondary nodes")),(0,r.kt)("p",null,"You can configure a secondary member for a specific purpose. You can configure a secondary to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Priority 0 Node"),": In MongoDB, The higher the priority, the more likely a node is to become the primary. The default priority is 1, and you can set it to any value between 0 and 1000. To prevent a node from becoming a primary in an election, which allows it to reside in a secondary data center or to serve as a cold standby. These are called ",(0,r.kt)("strong",{parentName:"li"},"priority 0")," replica set members."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hidden Node"),": Prevent applications from reading from it, which allows it to run applications that require separation from normal traffic (",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"running in background")),"). These are called ",(0,r.kt)("strong",{parentName:"li"},"hidden")," replica set members (usually, ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"use for analytics")),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Delayed Node"),": Keep a ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},'running "historical" snapshot'))," for use in recovery from certain errors, such as unintentionally deleted databases. These are called ",(0,r.kt)("strong",{parentName:"li"},"delayed")," replica set members."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Deploy replicaset in mongodb")),(0,r.kt)("p",null,"First of all, to deploy a replica set in MongoDB, you need to ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"have at least three mongod instances"))," running on separate machines or on the same machine with different ports."),(0,r.kt)("p",null,"For example, if you have three mongod instances running on localhost with ports ",(0,r.kt)("inlineCode",{parentName:"p"},"27017"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"27018"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"27019"),", and you want to create a replica set named ",(0,r.kt)("inlineCode",{parentName:"p"},"rs0"),", you can do the following steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start each mongod instance with the ",(0,r.kt)("inlineCode",{parentName:"li"},"--replSet rs0")," option. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mongod --port 27017 --dbpath /data/db1 --replSet rs0\nmongod --port 27018 --dbpath /data/db2 --replSet rs0\nmongod --port 27019 --dbpath /data/db3 --replSet rs0\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connect to one of the mongod instances with mongosh. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mongosh --port 27017\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initiate the replica set with the rs.initiate () command. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"rs.initiate ()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add the other members to the replica set with the rs.add () command. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'rs.add ("localhost:27018")\nrs.add ("localhost:27019")\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Check the status of the replica set with the rs.status () command. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"rs.status ()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"connect to replicaset using nodejs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"var mongoose = require ('mongoose');\nvar uri = 'mongodb://user:pass@host1:port1,host2:port2/dbname?replicaSet=rsname';\nvar options = {\n  db: { native_parser: true },\n  replset: {\n    auto_reconnect:false,\n    poolSize: 10,\n    socketOptions: {\n      keepAlive: 1000,\n      connectTimeoutMS: 30000\n    }\n  },\n  server: {\n    poolSize: 5,\n    socketOptions: {\n      keepAlive: 1000,\n      connectTimeoutMS: 30000\n    }\n  }\n};\nmongoose.connect (uri, options);\n"))))}l.isMDXComponent=!0;const s={toc:[{value:"1. start config server replicaset mongodb",id:"1-start-config-server-replicaset-mongodb",level:4},{value:"2. Deploy - Start Shard Server Replicaset",id:"2-deploy---start-shard-server-replicaset",level:4},{value:"3. Deploy - Start a mongos for the Sharded Cluster",id:"3-deploy---start-a-mongos-for-the-sharded-cluster",level:4}]},p="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Sharding Architecture")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"sharding",src:a(52998).Z,width:"840",height:"596"})),(0,r.kt)("p",null,"Sharding is a method for distributing data across multiple machines. It is useful when single machine can handle large modern-day workloads, by allowing you to scale horizontally."),(0,r.kt)("p",null,"In MongoDB, a sharded cluster consists of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Shards"),": Each shard contains a subset of the cluster\u2019s data. Each shard can be deployed as a replica set."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mongos"),": The mongos acts as a query router for client applications, handling both read and write operations. It dispatches client requests to the relevant shards and aggregates the result from shards into a consistent client response."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Config servers"),": Config servers store metadata and configuration settings for the cluster. The sharding metadata reflects the state and organization of the sharded data.")),(0,r.kt)("p",null,"MongoDB shards data at the collection level, using a ",(0,r.kt)("strong",{parentName:"p"},"shard key")," to distribute the collection's documents across shards. The shard key consists of a field or multiple fields in the documents. MongoDB splits the data into ",(0,r.kt)("strong",{parentName:"p"},"chunks"),", by dividing the span of shard key values into non-overlapping ranges. MongoDB then attempts to distribute those chunks evenly among the shards in the cluster.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"How it works")),(0,r.kt)("p",null,"We need to index Shards with ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"ranges of certain keys"))," (ranged sharding) or ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"hashes of keys"))," (hashed sharding)."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"sharding",src:a(96461).Z,width:"3616",height:"2038"}))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Ranged Sharding")),(0,r.kt)("p",null,"Ranged sharding in MongoDB is a way of splitting up your data into smaller pieces called chunks and spreading them across different machines called shards. "),(0,r.kt)("p",null,"The process of ranged sharding: "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Routers => Look in config servers => Get metadata about shard key ranges and chunk locations (table) => Route requests to relevant shards => Aggregate results from shards => Send response to clients.")),(0,r.kt)("p",null,"To use ranged sharding, you need to run a command called ",(0,r.kt)("inlineCode",{parentName:"p"},"sh.shardCollection()")," and tell MongoDB which collection and which field you want to use as the shard key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'sh.shardCollection("users.history", { user_id : 1 } )\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"sharding",src:a(51125).Z,width:"4192",height:"1815"})),(0,r.kt)("p",null,"Some of the pros and cons of ranged sharding are:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pros:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It allows for efficient queries where reads target documents within a contiguous range."),(0,r.kt)("li",{parentName:"ul"},"It is simple and easy to implement if you have a good understanding of your data and query patterns."),(0,r.kt)("li",{parentName:"ul"},"It is the default sharding methodology in MongoDB if you don't have any special requirements.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Cons:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It can lead to uneven distribution or hotspots if the shard key values are not well distributed or have high frequency."),(0,r.kt)("li",{parentName:"ul"},"It can cause poor performance if the shard key values change monotonically (such as timestamps or auto-incrementing IDs) and create write bottlenecks on a single shard."),(0,r.kt)("li",{parentName:"ul"},"It can make cross-shard queries more difficult or inefficient if the query does not include the shard key or spans multiple chunks or shards."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Hashed Sharding")),(0,r.kt)("p",null,"Hashed sharding is a method for ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"distributing data across a MongoDB cluster based on a hashed index"))," of a shard key field. It provides a more even data distribution across the cluster than ranged sharding, but it reduces the ability to perform targeted operations on documents with close shard key values."),(0,r.kt)("p",null,"The process of ranged sharding: "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"look for that hash in table => find doc in what chunk")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"hashed-sharding",src:a(8284).Z,width:"4235",height:"1602"}))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Deploy sharding")),(0,r.kt)("p",null,"To deploy sharding in MongoDB, you need to set up a sharded cluster that consists of shards, mongos and config servers."),(0,r.kt)("h4",{id:"1-start-config-server-replicaset-mongodb"},"1. start config server replicaset mongodb"),(0,r.kt)("p",null,"To start the config server replica set in MongoDB, you need to follow these steps\xb9:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start three mongod instances on separate machines as config servers. Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"--configsvr")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"--replSet")," options to specify that the mongod instances are config servers and members of a replica set. For example, on one machine, you can use this command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mongod --configsvr --replSet configReplSet --port 27019 --dbpath /data/configdb\n")),(0,r.kt)("p",null,"Replace the port number and dbpath with your own values. Repeat this step for the other two machines, using different port numbers and dbpaths."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Connect to one of the config servers using a mongo shell and initiate the config server replica set using this command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'rs.initiate(\n   {\n      _id: "configReplSet",\n      configsvr: true,\n      members: [\n         { _id : 0, host : "config01.example.net:27019" },\n         { _id : 1, host : "config02.example.net:27019" },\n         { _id : 2, host : "config03.example.net:27019" }\n      ]\n   }\n)\n')),(0,r.kt)("p",null,"Replace the host names and port numbers with your own values."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Verify that the config server replica set is running by using this command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"rs.status()\n")),(0,r.kt)("h4",{id:"2-deploy---start-shard-server-replicaset"},"2. Deploy - Start Shard Server Replicaset"),(0,r.kt)("p",null,"To start the shard server replica set in MongoDB, you need to follow these steps\xb9:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start each member of the replica set with the appropriate options. For each member, start a mongod instance with the following settings:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set ",(0,r.kt)("inlineCode",{parentName:"li"},"--shardsvr")," option to indicate that the mongod instance is a shard."),(0,r.kt)("li",{parentName:"ul"},"Set ",(0,r.kt)("inlineCode",{parentName:"li"},"--replSet")," option to specify the name of the shard replica set."),(0,r.kt)("li",{parentName:"ul"},"Set ",(0,r.kt)("inlineCode",{parentName:"li"},"--bind_ip")," option to specify the hostname/ip or a comma-delimited list of hostnames/ips that remote clients can use to connect to the instance."),(0,r.kt)("li",{parentName:"ul"},"Set any other settings as appropriate for your deployment.")),(0,r.kt)("p",null,"For example, on one machine, you can use this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mongod --shardsvr --replSet shardReplSet --bind_ip localhost,<hostname(s)|ip address(es)>\n")),(0,r.kt)("p",null,"Replace the hostname(s) and ip address(es) with your own values. Repeat this step for the other members of the shard replica set, using different port numbers and dbpaths."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Connect to one of the shard servers using a mongo shell and initiate the shard replica set using this command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'rs.initiate(\n   {\n      _id: "shardReplSet",\n      members: [\n         { _id : 0, host : "shard01.example.net:27018" },\n         { _id : 1, host : "shard02.example.net:27018" },\n         { _id : 2, host : "shard03.example.net:27018" }\n      ]\n   }\n)\n')),(0,r.kt)("p",null,"Replace the host names and port numbers with your own values."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Verify that the shard server replica set is running by using this command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"rs.status()\n")),(0,r.kt)("h4",{id:"3-deploy---start-a-mongos-for-the-sharded-cluster"},"3. Deploy - Start a mongos for the Sharded Cluster")))}d.isMDXComponent=!0;const u={toc:[]},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Features of MongoDB")),(0,r.kt)("p",null,"MongoDB is a ",(0,r.kt)("strong",{parentName:"p"},"NoSQL document database")," that allows you to store and query data in a flexible and scalable way. Some of the key features of MongoDB are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Support for ad hoc queries"),": You can perform complex queries on your data using the MongoDB Query Language (MQL), which supports field queries, range queries, regular expression searches, and user-defined functions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Indexing"),": You can create indexes on any field or combination of fields in your documents to improve the performance of your queries. MongoDB also supports ",(0,r.kt)("strong",{parentName:"li"},"text indexes"),", ",(0,r.kt)("strong",{parentName:"li"},"geospatial indexes"),", ",(0,r.kt)("strong",{parentName:"li"},"hashed indexes"),", and more."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Replication"),": You can set up a replica set of multiple MongoDB servers that keep copies of the same data and provide high availability and fault tolerance. Replica sets also allow you to perform read operations from secondary servers to balance the load."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sharding"),": You can distribute your data across multiple shards, or partitions, of your database to achieve horizontal scaling and handle large amounts of data. Sharding also helps with load balancing and data locality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Aggregation"),": You can perform data analysis and transformation operations using the aggregation framework, which allows you to group, filter, project, sort, and manipulate your data using pipelines of stages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Special collection and index types"),": It supports time-to-live (TTL) collections for data that should expire at a certain time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"File storage"),": It supports an easy-to-use protocol for storing large files and file metadata."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"When to use MongoDB?")),(0,r.kt)("p",null,"MongoDB is a document database that can be used for a variety of applications that need flexibility, scalability, and performance. MongoDB is especially suitable for the following scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"E-commerce product catalog"),": MongoDB can store complex and dynamic product data, such as attributes, reviews, ratings, images, etc. MongoDB can also support fast and flexible search and aggregation queries on the product catalog."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Blogs and content management"),": MongoDB can store rich and diverse content, such as text, images, videos, comments, tags, etc. MongoDB can also handle high traffic and concurrent updates on the content."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Real-time analytics and high-speed logging"),": MongoDB can ingest and process large volumes of data in real time, such as clickstream data, sensor data, social media data, etc. MongoDB can also provide fast and complex analytics on the data using the aggregation framework or MapReduce."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Configuration management"),": MongoDB can store configuration data for various applications and environments, such as servers, networks, devices, etc. MongoDB can also support dynamic schema changes and maintain consistency across the configurations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Maintaining location-based data"),": MongoDB can store geospatial data, such as points, lines, polygons, etc. MongoDB can also perform geospatial queries and calculations, such as finding nearby locations, measuring distances, or intersecting regions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mobile and social networking sites"),": MongoDB can store user profiles, preferences, interactions, messages, etc. MongoDB can also scale horizontally to handle large numbers of users and data growth\xb9\xb3."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Evolving data requirements"),": MongoDB can store data that has no predefined schema or that changes over time. MongoDB can also support schema validation and evolution without downtime or performance impact."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Loosely coupled objectives"),": MongoDB can store data that is not tightly related or dependent on other data. MongoDB can also support embedding or linking of documents to optimize performance and flexibility.")),(0,r.kt)("p",null,"These are some of the common use cases where MongoDB can be a good choice. However, there may be other situations where MongoDB is not the best fit, such as highly transactional systems or where the data model is designed up front. Therefore, it is important to evaluate your application requirements and compare different database options before choosing MongoDB.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Equivalent to RDBMS")),(0,r.kt)("p",null,"MongoDB is a ",(0,r.kt)("strong",{parentName:"p"},"NoSQL")," database that stores data in ",(0,r.kt)("strong",{parentName:"p"},"documents"),", which are flexible and dynamic JSON-like structures. RDBMS is a ",(0,r.kt)("strong",{parentName:"p"},"relational")," database that stores data in ",(0,r.kt)("strong",{parentName:"p"},"tables"),", which are rigid and predefined structures. MongoDB and RDBMS have different ways of organizing and querying data, but they can be compared by some common terms:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"collection")," in MongoDB is equivalent to a ",(0,r.kt)("strong",{parentName:"li"},"table")," in RDBMS. It is a group of documents that share a common schema or structure."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"document")," in MongoDB is equivalent to a ",(0,r.kt)("strong",{parentName:"li"},"row")," or ",(0,r.kt)("strong",{parentName:"li"},"record")," in RDBMS. It is an individual unit of data that contains one or more fields and values."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"field")," in MongoDB is equivalent to a ",(0,r.kt)("strong",{parentName:"li"},"column")," or ",(0,r.kt)("strong",{parentName:"li"},"attribute")," in RDBMS. It is a key-value pair that represents a property or characteristic of a document."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"primary key")," in MongoDB is equivalent to a ",(0,r.kt)("strong",{parentName:"li"},"primary key")," in RDBMS. It is a unique identifier for each document in a collection. MongoDB automatically creates an ",(0,r.kt)("inlineCode",{parentName:"li"},"_id")," field for each document, which acts as the primary key."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"secondary index")," in MongoDB is equivalent to a ",(0,r.kt)("strong",{parentName:"li"},"secondary index")," in RDBMS. It is an additional data structure that allows faster queries on fields other than the primary key."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"foreign key")," in RDBMS is equivalent to a ",(0,r.kt)("strong",{parentName:"li"},"reference")," or an ",(0,r.kt)("strong",{parentName:"li"},"embedded document")," in MongoDB. It is a way of linking data across different tables or collections. MongoDB does not enforce referential integrity, so it is up to the application to maintain the consistency of the references."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Storage Engine")),(0,r.kt)("p",null,"The storage engine handles the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"interface between the database and the hardware"))," - handles representations of the data (or metadata) that is located there, which is to say the data and indexes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The data file format"),": Different storage engines can implement different types of compression, and different ways of storing the BSON for mongoDB."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Format of indexes"),": MongoDB uses Btrees. With MongoDB 3.0, WiredTiger will be using B+ trees")),(0,r.kt)("p",null,"Some of the storage engines that MongoDB supports are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"WiredTiger"),": This is the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"default storage engine"))," since MongoDB 3.2. It is well-suited for most workloads and is recommended for new deployments. WiredTiger ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"provides a document-level concurrency model, checkpointing, and compression, among other features")),". In MongoDB Enterprise, WiredTiger also supports encryption at rest."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"In-Memory"),": This is a storage engine that is ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"available in MongoDB Enterprise")),". It stores data in memory rather than on disk, which provides more predictable data latencies. However, it also requires more RAM and does not persist data across restarts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MMAPv1"),": This is a legacy storage engine that was the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"default before MongoDB 3.2")),". It ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"uses memory-mapped files to map data files directly to virtual memory")),". MMAPv1 provides collection-level locking and power-of-two sized allocations. MMAPv1 was removed in MongoDB 4.2.")),(0,r.kt)("p",null,"You can check the storage engine of your MongoDB server by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"db.serverStatus().storageEngine"),".name command in the mongo shell. You can also specify the storage engine when starting mongod by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--storageEngine")," option.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Data Types in MongoDB")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"A sequence of characters."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"This is a string."'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Integer")),(0,r.kt)("td",{parentName:"tr",align:null},"A whole number."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"12345"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Double")),(0,r.kt)("td",{parentName:"tr",align:null},"A floating-point number."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"12.345"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"A value that can be either true or false."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Array")),(0,r.kt)("td",{parentName:"tr",align:null},"A collection of values."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["This", "is", "an", "array"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:null},"A collection of key-value pairs."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{ "name": "John Doe", "age": 30 }'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Null")),(0,r.kt)("td",{parentName:"tr",align:null},"A value that represents the absence of data."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Date")),(0,r.kt)("td",{parentName:"tr",align:null},"A value that represents a point in time."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'new Date("2023-07-09T14:02:07Z")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"A value that represents a point in time and a sequence number."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{ "seconds": 1657229327, "microseconds": 123456 }'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Binary data")),(0,r.kt)("td",{parentName:"tr",align:null},"A sequence of bytes."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"binary data"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"ObjectId")),(0,r.kt)("td",{parentName:"tr",align:null},"A unique identifier that is used to identify documents in MongoDB."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"5f07291e4a6f430001542155"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Symbol")),(0,r.kt)("td",{parentName:"tr",align:null},"A string that is used to represent a named value."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"mySymbol"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Code")),(0,r.kt)("td",{parentName:"tr",align:null},"A JavaScript function that can be stored in a document."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function myFunction() {}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Regular expression")),(0,r.kt)("td",{parentName:"tr",align:null},"A pattern that can be used to match text."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/[a-z]+/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Min/Max keys")),(0,r.kt)("td",{parentName:"tr",align:null},"Used to store the minimum and maximum values of a field."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{ "min": 1, "max": 100 }')))))))}c.isMDXComponent=!0;const g={toc:[{value:"$match",id:"match",level:2},{value:"$project",id:"project",level:2},{value:"$group",id:"group",level:2},{value:"$sort",id:"sort",level:2},{value:"$limit",id:"limit",level:2},{value:"$skip",id:"skip",level:2},{value:"$unwind",id:"unwind",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Array Operators",id:"array-operators",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Date Operators",id:"date-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"String Operators",id:"string-operators",level:2}]},h="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Aggregation Pineline")),(0,r.kt)("p",null,"Aggregation pipeline is a way of processing and transforming data in MongoDB by ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"passing documents through a series of stages")),". Each stage performs an operation on the input documents and outputs the modified documents to the next stage. The final output of the pipeline is the result of the aggregation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Run an aggregation pipeline on the orders collection\ndb.orders.aggregate([\n  // Stage 1: Group documents by pizza name and calculate the average price\n  { $group: { _id: "$name", avgPrice: { $avg: "$price" } } },\n  // Stage 2: Filter documents by average price greater than 15\n  { $match: { avgPrice: { $gt: 15 } } },\n  // Stage 3: Include only the name and average price fields in the output\n  { $project: { name: 1, avgPrice: 1 } },\n  // Stage 4: Sort the documents by average price in descending order\n  { $sort: { avgPrice: -1 } },\n  // Stage 5: Limit the output to only 3 documents\n  { $limit: 3 }\n])\n\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Aggregation Pipeline Stages")),(0,r.kt)("p",null,"Aggregation pipeline stages are the steps that process and transform data in an aggregation pipeline. Each stage takes an input collection or the output of the previous stage and performs some operation on it. The output of the last stage is the result of the aggregation\xb2."),(0,r.kt)("p",null,"Some of the common aggregation pipeline stages are:"),(0,r.kt)("h2",{id:"match"},"$match"),(0,r.kt)("p",null,"This stage filters documents by a given condition and passes only the matching documents to the next stage. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Stage 1: Filter pizza order documents by pizza size\n{ $match: { size: "medium" } }\n')),(0,r.kt)("h2",{id:"project"},"$project"),(0,r.kt)("p",null,"This stage specifies the fields to include or exclude in the output documents. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Stage 2: Include only the name and quantity fields in the output\n{ $project: { name: 1, quantity: 1 } }\n")),(0,r.kt)("h2",{id:"group"},"$group"),(0,r.kt)("p",null,"This stage groups documents by a given expression and applies an accumulator function to each group. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Stage 3: Group remaining documents by pizza name and calculate total quantity\n{ $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } } }\n')),(0,r.kt)("h2",{id:"sort"},"$sort"),(0,r.kt)("p",null,"This stage sorts the documents by a specified order. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Stage 4: Sort the documents by total quantity in descending order\n{ $sort: { totalQuantity: -1 } }\n")),(0,r.kt)("h2",{id:"limit"},"$limit"),(0,r.kt)("p",null,"This stage passes only the first n documents to the next stage, where n is the specified limit. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Stage 5: Limit the output to only 3 documents\n{ $limit: 3 }\n")),(0,r.kt)("p",null,"These are just some examples of aggregation pipeline stages. There are many more stages that can perform different operations, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"$lookup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$unwind"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$bucket"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$facet"),", etc\xb3."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"db.collection.aggregate()")," method to run an aggregation pipeline on a collection. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Run an aggregation pipeline on the orders collection\ndb.orders.aggregate([\n  // Stage 1: Filter pizza order documents by pizza size\n  { $match: { size: "medium" } },\n  // Stage 2: Include only the name and quantity fields in the output\n  { $project: { name: 1, quantity: 1 } },\n  // Stage 3: Group remaining documents by pizza name and calculate total quantity\n  { $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } } },\n  // Stage 4: Sort the documents by total quantity in descending order\n  { $sort: { totalQuantity: -1 } },\n  // Stage 5: Limit the output to only 3 documents\n  { $limit: 3 }\n])\n')),(0,r.kt)("h2",{id:"skip"},"$skip"),(0,r.kt)("p",null,"This stage skips over the specified number of documents that pass into the stage and passes the remaining documents to the next stage. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Stage 6: Skip the first 2 documents\n{ $skip: 2 }\n")),(0,r.kt)("h2",{id:"unwind"},"$unwind"),(0,r.kt)("p",null,"This stage deconstructs an array field from the input documents to output a document for each element. Each output document is the input document with the value of the array field replaced by the element. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Stage 7: Unwind the toppings array field\n{ $unwind: "$toppings" }\n')),(0,r.kt)("p",null,"These are just some examples of aggregation pipeline stages. There are many more stages that can perform different operations, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"$lookup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$bucket"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$facet"),", etc\xb3."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"db.collection.aggregate()")," method to run an aggregation pipeline on a collection. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Run an aggregation pipeline on the orders collection\ndb.orders.aggregate([\n  // Stage 1: Filter pizza order documents by pizza size\n  { $match: { size: "medium" } },\n  // Stage 2: Include only the name and quantity fields in the output\n  { $project: { name: 1, quantity: 1 } },\n  // Stage 3: Group remaining documents by pizza name and calculate total quantity\n  { $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } } },\n  // Stage 4: Sort the documents by total quantity in descending order\n  { $sort: { totalQuantity: -1 } },\n  // Stage 5: Limit the output to only 3 documents\n  { $limit: 3 },\n  // Stage 6: Skip the first 2 documents\n  { $skip: 2 },\n  // Stage 7: Unwind the toppings array field\n  { $unwind: "$toppings" }\n])\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Common Aggregation Operators")),(0,r.kt)("p",null,"Aggregation operators are expressions that can be used in the aggregation pipeline stages to perform various operations on the data. MongoDB supports many aggregation operators for different purposes, such as arithmetic, array, comparison, date, logical, string, etc."),(0,r.kt)("p",null,"Here is a list of some common aggregation operators with examples for each:"),(0,r.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("p",null,"Arithmetic operators perform mathematical operations on numbers or dates. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$add"),": Adds numbers or dates to return the sum or a new date. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $add: [ "$price", "$tax" ] } // returns the sum of price and tax fields\n{ $add: [ new Date(), 3*24*60*60000 ] } // returns a date 3 days from now\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$subtract"),": Subtracts the second value from the first and returns the difference. The values can be numbers or dates. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $subtract: [ "$total", "$discount" ] } // returns the difference of total and discount fields\n{ $subtract: [ new Date(), new Date("2020-01-01") ] } // returns the milliseconds between the two dates\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$multiply"),": Multiplies numbers and returns the product. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $multiply: [ "$quantity", "$unitPrice" ] } // returns the product of quantity and unitPrice fields\n{ $multiply: [ 10, 2.5 ] } // returns 25\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$divide"),": Divides the first number by the second and returns the result. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $divide: [ "$distance", "$time" ] } // returns the quotient of distance and time fields\n{ $divide: [ 15, 3 ] } // returns 5\n')),(0,r.kt)("h2",{id:"array-operators"},"Array Operators"),(0,r.kt)("p",null,"Array operators perform operations on arrays, such as accessing elements, concatenating arrays, filtering arrays, etc. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$arrayElemAt"),": Returns the element at the specified array index. The index can be positive or negative. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $arrayElemAt: [ "$fruits", 0 ] } // returns the first element of the fruits array field\n{ $arrayElemAt: [ "$fruits", -1 ] } // returns the last element of the fruits array field\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$concatArrays"),": Concatenates arrays to return a new array. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $concatArrays: [ "$fruits", "$vegetables" ] } // returns a new array with elements from fruits and vegetables array fields\n{ $concatArrays: [ [ "a", "b" ], [ "c", "d" ] ] } // returns [ "a", "b", "c", "d" ]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$filter"),": Selects a subset of an array to return an array with only the elements that match the filter condition. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $filter: {\n   input: "$items",\n   as: "item",\n   cond: { $gte: [ "$$item.price", 100 ] }\n} } // returns an array with only the elements from items array field that have a price greater than or equal to 100\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$size"),": Returns the number of elements in an array. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $size: "$fruits" } // returns the number of elements in the fruits array field\n{ $size: [ "a", "b", "c" ] } // returns 3\n')),(0,r.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("p",null,"Comparison operators compare two values and return true or false depending on the comparison. The values must be of comparable types. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$eq"),": Returns true if the values are equal. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $eq: [ "$a", 10 ] } // returns true if the value of field a is equal to 10\n{ $eq: [ "$x", "$y" ] } // returns true if the value of field x is equal to the value of field y\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$gt"),": Returns true if the first value is greater than the second value. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $gt: [ "$a", 10 ] } // returns true if the value of field a is greater than 10\n{ $gt: [ "$x", "$y" ] } // returns true if the value of field x is greater than the value of field y\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$lt"),": Returns true if the first value is less than the second value. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $lt: [ "$a", 10 ] } // returns true if the value of field a is less than 10\n{ $lt: [ "$x", "$y" ] } // returns true if the value of field x is less than the value of field y\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$ne"),": Returns true if the values are not equal. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $ne: [ "$a", 10 ] } // returns true if the value of field a is not equal to 10\n{ $ne: [ "$x", "$y" ] } // returns true if the value of field x is not equal to the value of field y\n')),(0,r.kt)("h2",{id:"date-operators"},"Date Operators"),(0,r.kt)("p",null,"Date operators perform operations on date values, such as extracting components, formatting, or manipulating dates. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$dateToString"),": Returns a string representation of a date using a format specifier. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $dateToString: { format: "%Y-%m-%d", date: "$date" } } // returns a string with the format "yyyy-mm-dd" from the date field\n{ $dateToString: { format: "%H:%M:%S:%L", date: new Date() } } // returns a string with the format "hh:mm:ss:ms" from the current date\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$dayOfMonth"),": Returns the day of the month for a date as a number between 1 and 31. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $dayOfMonth: "$date" } // returns the day of the month from the date field\n{ $dayOfMonth: new Date("2020-01-15") } // returns 15\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$month"),": Returns the month for a date as a number between 1 and 12. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $month: "$date" } // returns the month from the date field\n{ $month: new Date("2020-01-15") } // returns 1\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$year"),": Returns the year for a date as a four-digit number. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $year: "$date" } // returns the year from the date field\n{ $year: new Date("2020-01-15") } // returns 2020\n')),(0,r.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("p",null,"Logical operators perform boolean logic operations on one or more expressions and return true or false. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$and"),": Returns true if all the expressions are true. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $and: [ { $gt: [ "$a", 10 ] }, { $lt: [ "$a", 20 ] } ] } // returns true if the value of field a is between 10 and 20\n{ $and: [ true, false ] } // returns false\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$or"),": Returns true if any of the expressions is true. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $or: [ { $eq: [ "$a", 10 ] }, { $eq: [ "$b", 20 ] } ] } // returns true if the value of field a is 10 or the value of field b is 20\n{ $or: [ false, false ] } // returns false\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$not"),": Returns the boolean opposite of the expression. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $not: { $eq: [ "$a", 10 ] } } // returns true if the value of field a is not equal to 10\n{ $not: true } // returns false\n')),(0,r.kt)("h2",{id:"string-operators"},"String Operators"),(0,r.kt)("p",null,"String operators perform operations on string values, such as concatenating, splitting, trimming, etc. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$concat"),": Concatenates strings and returns the concatenated string. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $concat: [ "$firstName", " ", "$lastName" ] } // returns a string with the first name and last name fields separated by a space\n{ $concat: [ "Hello", ", ", "World" ] } // returns "Hello, World"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$split"),": Splits a string into an array of substrings based on a delimiter. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $split: [ "$fullName", " " ] } // returns an array with two elements from splitting the fullName field by a space\n{ $split: [ "a-b-c-d", "-" ] } // returns [ "a", "b", "c", "d" ]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$trim"),": Removes whitespace or a specified character from the beginning and end of a string. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $trim: { input: "$name" } } // returns a string with no leading or trailing whitespace from the name field\n{ $trim: { input: "-Hello-", chars: "-" } } // returns "Hello"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$toUpper"),": Converts a string to uppercase and returns the result. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{ $toUpper: "$name" } // returns an uppercase string from the name field\n{ $toUpper: "hello" } // returns "HELLO"\n'))))}k.isMDXComponent=!0;const f={toc:[]},N="wrapper";function y(e){let{components:t,...a}=e;return(0,r.kt)(N,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"CRUD operations")),(0,r.kt)("p",null,"CRUD stands for ",(0,r.kt)("strong",{parentName:"p"},"Create, Read, Update, and Delete"),", which are the basic operations to interact with databases. In MongoDB, CRUD operations are performed on documents, which are flexible and dynamic JSON-like structures that store data in collections."),(0,r.kt)("p",null,"Some of the common methods and commands for CRUD operations in MongoDB are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create"),": To insert new documents into a collection, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.insertOne()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.insertMany()"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"insert")," command. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'db.users.insertOne({name: "Alice", age: 25})')," will create a new document in the ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," collection with the specified fields and values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read"),": To query documents from a collection, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.find()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.findOne()"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"find")," command. You can specify query filters or criteria that identify the documents to return. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"db.users.find({age: {$gt: 20}})")," will return all documents in the ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," collection where the ",(0,r.kt)("inlineCode",{parentName:"li"},"age")," field is greater than 20."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Update"),": To modify existing documents in a collection, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.updateOne()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.updateMany()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.replaceOne()"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"update")," command. You can specify criteria or filters that identify the documents to update, and update operators that define the changes to apply. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'db.users.updateMany({name: "Alice"}, {$set: {age: 26}})')," will update all documents in the ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," collection where the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," field is ",(0,r.kt)("inlineCode",{parentName:"li"},'"Alice"')," and set the ",(0,r.kt)("inlineCode",{parentName:"li"},"age")," field to 26."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Delete"),": To remove documents from a collection, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.deleteOne()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"db.collection.deleteMany()"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"delete")," command. You can specify criteria or filters that identify the documents to delete. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'db.users.deleteOne({name: "Bob"})')," will delete one document in the ",(0,r.kt)("inlineCode",{parentName:"li"},"users")," collection where the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," field is ",(0,r.kt)("inlineCode",{parentName:"li"},'"Bob"'),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Create a new document\ndb.products.insert({\n  "name": "Product 1",\n  "price": 100\n});\n\n// Read all documents in the products collection\ndb.products.find();\n\n// Update the price of Product 1 to 200\ndb.products.updateOne({\n  "name": "Product 1"\n}, {\n  $set: {\n    "price": 200\n  }\n});\n\n// Delete Product 1\ndb.products.deleteOne({\n  "name": "Product 1"\n});\n\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"operators that work with array datatypes")),(0,r.kt)("p",null,"There are different types of operators that work with array datatypes in MongoDB, depending on what you want to do with the arrays. Here are some examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you want to ",(0,r.kt)("strong",{parentName:"li"},"match")," documents where an array field contains all or some of the specified values, you can use the ",(0,r.kt)("strong",{parentName:"li"},"$all")," or ",(0,r.kt)("strong",{parentName:"li"},"$in")," operators\xb2\u2074. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'{"tags": {"$all": ["fruit", "tropical"]}}')," will match documents where the ",(0,r.kt)("inlineCode",{parentName:"li"},"tags")," array contains both ",(0,r.kt)("inlineCode",{parentName:"li"},'"fruit"')," and ",(0,r.kt)("inlineCode",{parentName:"li"},'"tropical"'),"."),(0,r.kt)("li",{parentName:"ul"},"If you want to ",(0,r.kt)("strong",{parentName:"li"},"query")," for documents where an array field meets some conditions, you can use the ",(0,r.kt)("strong",{parentName:"li"},"$elemMatch")," operator\xb2\xb3. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'{"scores": {"$elemMatch": {"$gt": 80, "$lt": 95}}}')," will match documents where the ",(0,r.kt)("inlineCode",{parentName:"li"},"scores")," array contains at least one element that is greater than 80 and less than 95."),(0,r.kt)("li",{parentName:"ul"},"If you want to ",(0,r.kt)("strong",{parentName:"li"},"update")," documents by adding or removing elements from an array field, you can use the ",(0,r.kt)("strong",{parentName:"li"},"$push"),", ",(0,r.kt)("strong",{parentName:"li"},"$pull"),", or ",(0,r.kt)("strong",{parentName:"li"},"$pop")," operators\xb9\xb2. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'{"$push": {"tags": "organic"}}')," will add ",(0,r.kt)("inlineCode",{parentName:"li"},'"organic"')," to the end of the ",(0,r.kt)("inlineCode",{parentName:"li"},"tags")," array."),(0,r.kt)("li",{parentName:"ul"},"If you want to ",(0,r.kt)("strong",{parentName:"li"},"aggregate")," documents by grouping or counting elements from an array field, you can use the ",(0,r.kt)("strong",{parentName:"li"},"$unwind"),", ",(0,r.kt)("strong",{parentName:"li"},"$group"),", or ",(0,r.kt)("strong",{parentName:"li"},"$count")," operators\xb9. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'{"$unwind": "$tags"}')," will create a new document for each element in the ",(0,r.kt)("inlineCode",{parentName:"li"},"tags")," array."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Operators that work with relationship")),(0,r.kt)("p",null,"There are different types of operators that work with relationships in MongoDB, depending on how you model them. Here is a list of some common operators with examples for each:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"If you use embedding"),", you can use ",(0,r.kt)("strong",{parentName:"li"},"array operators")," to perform operations on embedded arrays, such as accessing elements, concatenating arrays, filtering arrays, etc. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Access the first element of the comments array field\n{ $arrayElemAt: [ "$comments", 0 ] }\n\n// Concatenate the courses and clubs array fields\ndb.students.aggregate([\n  { $project: {\n    name: 1,\n    activities: { $concatArrays: [ "$courses", "$clubs" ] }\n  }}\n])\n\n// Filter the items array field by price\n{ $filter: {\n   input: "$items",\n   as: "item",\n   cond: { $gte: [ "$$item.price", 100 ] }\n} }\n\n// Count the number of elements in the comments array field\n{ $size: "$comments" }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"If you use referencing"),", you can use ",(0,r.kt)("strong",{parentName:"li"},"aggregation operators")," to perform operations on referenced documents, such as joining collections, unwinding arrays, grouping documents, etc. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Join the posts collection with the authors collection by _id\ndb.orders.aggregate([{ $lookup: {\n   from: "authors",\n   localField: "author_id",\n   foreignField: "_id",\n   as: "author"\n} }])\n\n// Deconstruct the comments array field\n{ $unwind: "$comments" }\n\n// Group documents by author name and count the number of posts\n{ $group: { _id: "$author.name", postCount: { $sum: 1 } } }\n')),(0,r.kt)("p",null,"These are just some examples of operators that work with relationships in MongoDB. There are many more operators that can perform different operations, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"$all"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$elemMatch"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$push"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$pull"),", etc\xb9\xb2.")))}y.isMDXComponent=!0;const b={toc:[{value:"Default _id Index",id:"default-_id-index",level:2},{value:"Single Field Index",id:"single-field-index",level:2},{value:"Compound Index",id:"compound-index",level:2},{value:"Multikey Index",id:"multikey-index",level:2},{value:"Text Index",id:"text-index",level:2},{value:"Geospatial Index",id:"geospatial-index",level:2}]},v="wrapper";function w(e){let{components:t,...a}=e;return(0,r.kt)(v,(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("h5",null,"Indexes")),(0,r.kt)("p",null,"Indexes in MongoDB are special data structures that store a small portion of the collection's data set in an easy to traverse form. Indexes support the efficient execution of queries in MongoDB by allowing the database to limit the number of documents it must inspect. Indexes also enable MongoDB to return sorted results by using the ordering in the index."),(0,r.kt)("p",null,"Some of the common features and types of indexes in MongoDB are:"),(0,r.kt)("h2",{id:"default-_id-index"},"Default _id Index"),(0,r.kt)("p",null,"MongoDB creates a unique index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," field during the creation of a collection. The ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," index prevents clients from inserting two documents with the same value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," field. You cannot drop this index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," field."),(0,r.kt)("h2",{id:"single-field-index"},"Single Field Index"),(0,r.kt)("p",null,"A single field index is an index that is created on a single field of a document. The index entries are sorted by the value of the field in ascending or descending order. For example, you can create a single field index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field of a collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create a single field ascending index on the name field\ndb.collection.createIndex( { name: 1 } )\n")),(0,r.kt)("h2",{id:"compound-index"},"Compound Index"),(0,r.kt)("p",null,"A compound index is an index that is created on multiple fields of a document. The index entries are sorted by the values of the fields in the specified order. For example, you can create a compound index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," fields of a collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create a compound index on the name and age fields\ndb.collection.createIndex( { name: 1, age: -1 } )\n")),(0,r.kt)("h2",{id:"multikey-index"},"Multikey Index"),(0,r.kt)("p",null,"A multikey index is an index that is created on an array field or a field that contains subdocuments. The index can contain multiple entries for each document, one for each element of the array or subdocument. For example, you can create a multikey index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," array field of a collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create a multikey index on the tags array field\ndb.collection.createIndex( { tags: 1 } )\n")),(0,r.kt)("h2",{id:"text-index"},"Text Index"),(0,r.kt)("p",null,"A text index is an index that is created on string fields or arrays of string elements. The index supports text search queries that can match words or phrases in the indexed fields. For example, you can create a text index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," fields of a collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Create a text index on the title and description fields\ndb.collection.createIndex( { title: "text", description: "text" } )\n')),(0,r.kt)("h2",{id:"geospatial-index"},"Geospatial Index"),(0,r.kt)("p",null,"A geospatial index is an index that is created on fields that store geospatial data, such as coordinates, polygons, or GeoJSON objects. The index supports geospatial queries that can find documents near a point, within a region, or intersecting with a geometry. For example, you can create a geospatial index on the ",(0,r.kt)("inlineCode",{parentName:"p"},"location")," field of a collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Create a geospatial index on the location field\ndb.collection.createIndex( { location: "2dsphere" } )\n')),(0,r.kt)("p",null,"These are just some examples of indexes in MongoDB. There are many more types and options for indexes, such as hashed, sparse, partial, TTL, etc.")))}w.isMDXComponent=!0;const x={sidebar_position:3,id:"mongodb-zero-to-hero",sidebar_label:"MongoDB Zero To Hero",title:"MongoDB Zero To Hero"},$="MongoDB Zero To Hero",C={unversionedId:"mongodb/mongodb-zero-to-hero",id:"mongodb/mongodb-zero-to-hero",title:"MongoDB Zero To Hero",description:"\x3c!--",source:"@site/docs/mongodb/1.intro.md",sourceDirName:"mongodb",slug:"/mongodb/mongodb-zero-to-hero",permalink:"/devviews/interviews/mongodb/mongodb-zero-to-hero",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/mongodb/1.intro.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"mongodb-zero-to-hero",sidebar_label:"MongoDB Zero To Hero",title:"MongoDB Zero To Hero"},sidebar:"mongodbInterviewSidebar"},D={},M=[{value:"Features",id:"features",level:3},{value:"Operations",id:"operations",level:3},{value:"Aggregation",id:"aggregation",level:3},{value:"Aggregation",id:"aggregation-1",level:3},{value:"Horizontal Scale",id:"horizontal-scale",level:3},{value:"Sharding",id:"sharding",level:3},{value:"Indexes",id:"indexes",level:3}],S={toc:M},T="wrapper";function j(e){let{components:t,...a}=e;return(0,r.kt)(T,(0,n.Z)({},S,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mongodb-zero-to-hero"},"MongoDB Zero To Hero"),(0,r.kt)("h2",{id:""}),(0,r.kt)("h3",{id:"features"},"Features"),(0,r.kt)(c,{mdxType:"Features"}),(0,r.kt)("h3",{id:"operations"},"Operations"),(0,r.kt)(y,{mdxType:"Operations"}),(0,r.kt)("h3",{id:"aggregation"},"Aggregation"),(0,r.kt)(k,{mdxType:"Aggregation"}),(0,r.kt)("h3",{id:"aggregation-1"},"Aggregation"),(0,r.kt)(k,{mdxType:"Aggregation"}),(0,r.kt)("h3",{id:"horizontal-scale"},"Horizontal Scale"),(0,r.kt)(l,{mdxType:"HorizontalScale"}),(0,r.kt)("h3",{id:"sharding"},"Sharding"),(0,r.kt)(d,{mdxType:"Sharding"}),(0,r.kt)("h3",{id:"indexes"},"Indexes"),(0,r.kt)(w,{mdxType:"Indexes"}))}j.isMDXComponent=!0},8284:function(e,t,a){t.Z=a.p+"assets/images/hashed-sharding-a9026ed31c35837e24783eda7485d228.png"},51125:function(e,t,a){t.Z=a.p+"assets/images/range-sharding-dc28234315eb9fb3a5c1e92a5da009d3.png"},12240:function(e,t,a){t.Z=a.p+"assets/images/replicaset-e59b15b81df17b40ce1b0aa0881e063b.png"},96461:function(e,t,a){t.Z=a.p+"assets/images/sharding-works-bc52ec6b4fdf3ffca1c9839ef8d78896.png"},52998:function(e,t,a){t.Z=a.p+"assets/images/sharding-126b9d1e63e56eeea235a112c83a6024.png"},56188:function(e,t,a){t.Z=a.p+"assets/images/write-concern-4dad5d749b8b0390414806229a6ae918.png"}}]);