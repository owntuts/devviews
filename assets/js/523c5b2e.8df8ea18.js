"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[998],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,f=c["".concat(l,".").concat(g)]||c[g]||d[g]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1838:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:1e3,sidebar_label:"Build Stages",title:"Build Stages",tags:["Docker Knowledge"]},o=void 0,s={unversionedId:"docker/hero/building-stages",id:"docker/hero/building-stages",title:"Build Stages",description:"Docker Build Stages",source:"@site/docs/docker/hero/building-stages.md",sourceDirName:"docker/hero",slug:"/docker/hero/building-stages",permalink:"/devviews/interviews/docker/hero/building-stages",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/building-stages.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"Build Stages",title:"Build Stages",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",previous:{title:"Build Pipeline",permalink:"/devviews/interviews/docker/hero/build-pipeline"},next:{title:"container vs virtual machine",permalink:"/devviews/interviews/docker/hero/container-vs-virtual-machine"}},l={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(c,(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"Docker Build Stages")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Docker Build Stages",src:n(4118).Z,width:"810",height:"178"})),(0,a.kt)("p",null,"Building stages in Docker are a way to create images that use multiple base images and only keep the artifacts that are needed for the final image. Building stages can help reduce the size and complexity of your images by separating the build process into different steps."),(0,a.kt)("p",null,"A building stage is defined by a ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," instruction in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile"),". Each ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," instruction starts a new stage of the build and can use a different base image. You can copy files or run commands in each stage, and then selectively copy artifacts from one stage to another. You can also name your stages using the ",(0,a.kt)("inlineCode",{parentName:"p"},"AS")," keyword after the ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," instruction."),(0,a.kt)("p",null,"For example, here is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," that uses two building stages to create an image with a Go app:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# syntax=docker/dockerfile:1\n# First stage: build the app\nFROM golang:1.16 AS builder # named the stage\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY *.go ./\nRUN CGO_ENABLED=0 go build -o app\n\n# Second stage: copy the app and run it\nFROM alpine:latest\nWORKDIR /app\nCOPY --from=builder /app/app . # Copy the app binary from the `builder` stage\nEXPOSE 8080\nCMD [ "./app" ]\n')),(0,a.kt)("p",null,"or another example with Typescript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# Build stage 1 -> for dev\nFROM node:10.15.2\nWORKDIR /usr/src/app\nCOPY package*.json ./\nCOPY tsconfig.json ./\nRUN npm install\nCOPY ./src ./src\nRUN npm run build\n\n# Build stage 2 -> for prop.\nFROM node:10.15.2\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install --only=production\nCOPY --from=0 /usr/src/app/build ./build # Copy the app binary from the first stage\nEXPOSE 80\nCMD npm start\n\n")),(0,a.kt)("p",null,"To build the image from this ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", you can use the same ",(0,a.kt)("inlineCode",{parentName:"p"},"docker build")," command as before. You can also specify a target stage using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--target")," option if you don't want to build all the stages. For example, to build only the first stage, you can run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker build -t go-app:builder --target builder .\n"))))}d.isMDXComponent=!0},4118:function(e,t,n){t.Z=n.p+"assets/images/build-stages-f1d4d89ae22ad52e90558af41852f87e.png"}}]);