"use strict";(self.webpackChunkinterviewdev=self.webpackChunkinterviewdev||[]).push([[2323],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3096:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var n=r(3117),a=(r(7294),r(3905));const o={sidebar_position:1e3,sidebar_label:"RUN vs CMD vs ENTRYPOINT",title:"RUN vs CMD vs ENTRYPOINT",tags:["Docker Knowledge"]},i=void 0,l={unversionedId:"docker/hero/RUN-CMD-ENTRYPOINT",id:"docker/hero/RUN-CMD-ENTRYPOINT",title:"RUN vs CMD vs ENTRYPOINT",description:"RUN vs CMD vs ENTRYPOINT",source:"@site/docs/docker/hero/RUN-CMD-ENTRYPOINT.md",sourceDirName:"docker/hero",slug:"/docker/hero/RUN-CMD-ENTRYPOINT",permalink:"/devviews/interviews/docker/hero/RUN-CMD-ENTRYPOINT",draft:!1,editUrl:"https://github.com/owntuts/devviews/edit/main/docs/docker/hero/RUN-CMD-ENTRYPOINT.md",tags:[{label:"Docker Knowledge",permalink:"/devviews/interviews/tags/docker-knowledge"}],version:"current",sidebarPosition:1e3,frontMatter:{sidebar_position:1e3,sidebar_label:"RUN vs CMD vs ENTRYPOINT",title:"RUN vs CMD vs ENTRYPOINT",tags:["Docker Knowledge"]},sidebar:"dockerInterviewSidebar",next:{title:"Docker Architecture",permalink:"/devviews/interviews/docker/hero/architecture"}},c={},s=[],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("details",{open:!0},(0,a.kt)("summary",null,(0,a.kt)("h5",null,"RUN vs CMD vs ENTRYPOINT")),(0,a.kt)("p",null,"Here is a brief summary of the difference between RUN, CMD and ENTRYPOINT commands in a dockerfile:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RUN"),": Executes a command and saves the result as a new layer in the image. It is usually used to install packages or run build steps (",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"within Docker Image Building Stages"))," - when Image is being created from Dockerfile). For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# To install curl in the image\nRUN apt-get update && apt-get install -y curl\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CMD"),": Specifies the default command to ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"run when a container is created"))," from the image. It can be overridden by passing a different command to the docker run command. For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To run a python script as the default command\nCMD ["python", "app.py"]\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENTRYPOINT"),": Specifies the executable that will ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"run when the container is started"))," (when bash shell of container is provided). It allows the ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"container to be run as if it was a binary")),". It can be combined with CMD to provide default arguments that can be overridden. For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# To run a python script as the entrypoint\nENTRYPOINT ["python"]\n# To provide a default argument to the entrypoint\nCMD ["app.py"]\n'))))}d.isMDXComponent=!0}}]);